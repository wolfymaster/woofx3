// Code generated by protoc-gen-twirp v8.1.2, DO NOT EDIT.
// source: treat.proto

package v1

import context "context"
import fmt "fmt"
import http "net/http"
import ioutil "io/ioutil"
import json "encoding/json"
import strconv "strconv"
import strings "strings"

import protojson "google.golang.org/protobuf/encoding/protojson"
import proto "google.golang.org/protobuf/proto"
import twirp "github.com/twitchtv/twirp"
import ctxsetters "github.com/twitchtv/twirp/ctxsetters"

// Version compatibility assertion.
// If the constant is not defined in the package, that likely means
// the package needs to be updated to work with this generated code.
// See https://twitchtv.github.io/twirp/docs/version_matrix.html
const _ = twirp.TwirpPackageMinVersion_8_1_0

// ======================
// TreatService Interface
// ======================

type TreatService interface {
	// Award a treat to a user
	AwardTreat(context.Context, *AwardTreatRequest) (*TreatResponse, error)

	// Get a treat by ID
	GetTreat(context.Context, *GetTreatRequest) (*TreatResponse, error)

	// Update a treat
	UpdateTreat(context.Context, *UpdateTreatRequest) (*TreatResponse, error)

	// Delete a treat
	DeleteTreat(context.Context, *DeleteTreatRequest) (*ResponseStatus, error)

	// List treats with filtering
	ListTreats(context.Context, *ListTreatsRequest) (*ListTreatsResponse, error)

	// Get a summary of treats for a user
	GetUserTreatsSummary(context.Context, *GetUserTreatsSummaryRequest) (*TreatsSummaryResponse, error)

	// Get treat statistics
	GetTreatStats(context.Context, *GetTreatStatsRequest) (*TreatStatsResponse, error)
}

// ============================
// TreatService Protobuf Client
// ============================

type treatServiceProtobufClient struct {
	client      HTTPClient
	urls        [7]string
	interceptor twirp.Interceptor
	opts        twirp.ClientOptions
}

// NewTreatServiceProtobufClient creates a Protobuf client that implements the TreatService interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewTreatServiceProtobufClient(baseURL string, client HTTPClient, opts ...twirp.ClientOption) TreatService {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	// Using ReadOpt allows backwards and forwads compatibility with new options in the future
	literalURLs := false
	_ = clientOpts.ReadOpt("literalURLs", &literalURLs)
	var pathPrefix string
	if ok := clientOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	// Build method URLs: <baseURL>[<prefix>]/<package>.<Service>/<Method>
	serviceURL := sanitizeBaseURL(baseURL)
	serviceURL += baseServicePath(pathPrefix, "treat", "TreatService")
	urls := [7]string{
		serviceURL + "AwardTreat",
		serviceURL + "GetTreat",
		serviceURL + "UpdateTreat",
		serviceURL + "DeleteTreat",
		serviceURL + "ListTreats",
		serviceURL + "GetUserTreatsSummary",
		serviceURL + "GetTreatStats",
	}

	return &treatServiceProtobufClient{
		client:      client,
		urls:        urls,
		interceptor: twirp.ChainInterceptors(clientOpts.Interceptors...),
		opts:        clientOpts,
	}
}

func (c *treatServiceProtobufClient) AwardTreat(ctx context.Context, in *AwardTreatRequest) (*TreatResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "treat")
	ctx = ctxsetters.WithServiceName(ctx, "TreatService")
	ctx = ctxsetters.WithMethodName(ctx, "AwardTreat")
	caller := c.callAwardTreat
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *AwardTreatRequest) (*TreatResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*AwardTreatRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*AwardTreatRequest) when calling interceptor")
					}
					return c.callAwardTreat(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*TreatResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*TreatResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *treatServiceProtobufClient) callAwardTreat(ctx context.Context, in *AwardTreatRequest) (*TreatResponse, error) {
	out := new(TreatResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *treatServiceProtobufClient) GetTreat(ctx context.Context, in *GetTreatRequest) (*TreatResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "treat")
	ctx = ctxsetters.WithServiceName(ctx, "TreatService")
	ctx = ctxsetters.WithMethodName(ctx, "GetTreat")
	caller := c.callGetTreat
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetTreatRequest) (*TreatResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetTreatRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetTreatRequest) when calling interceptor")
					}
					return c.callGetTreat(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*TreatResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*TreatResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *treatServiceProtobufClient) callGetTreat(ctx context.Context, in *GetTreatRequest) (*TreatResponse, error) {
	out := new(TreatResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[1], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *treatServiceProtobufClient) UpdateTreat(ctx context.Context, in *UpdateTreatRequest) (*TreatResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "treat")
	ctx = ctxsetters.WithServiceName(ctx, "TreatService")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateTreat")
	caller := c.callUpdateTreat
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UpdateTreatRequest) (*TreatResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UpdateTreatRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UpdateTreatRequest) when calling interceptor")
					}
					return c.callUpdateTreat(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*TreatResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*TreatResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *treatServiceProtobufClient) callUpdateTreat(ctx context.Context, in *UpdateTreatRequest) (*TreatResponse, error) {
	out := new(TreatResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[2], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *treatServiceProtobufClient) DeleteTreat(ctx context.Context, in *DeleteTreatRequest) (*ResponseStatus, error) {
	ctx = ctxsetters.WithPackageName(ctx, "treat")
	ctx = ctxsetters.WithServiceName(ctx, "TreatService")
	ctx = ctxsetters.WithMethodName(ctx, "DeleteTreat")
	caller := c.callDeleteTreat
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *DeleteTreatRequest) (*ResponseStatus, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*DeleteTreatRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*DeleteTreatRequest) when calling interceptor")
					}
					return c.callDeleteTreat(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ResponseStatus)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ResponseStatus) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *treatServiceProtobufClient) callDeleteTreat(ctx context.Context, in *DeleteTreatRequest) (*ResponseStatus, error) {
	out := new(ResponseStatus)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[3], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *treatServiceProtobufClient) ListTreats(ctx context.Context, in *ListTreatsRequest) (*ListTreatsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "treat")
	ctx = ctxsetters.WithServiceName(ctx, "TreatService")
	ctx = ctxsetters.WithMethodName(ctx, "ListTreats")
	caller := c.callListTreats
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ListTreatsRequest) (*ListTreatsResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListTreatsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListTreatsRequest) when calling interceptor")
					}
					return c.callListTreats(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListTreatsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListTreatsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *treatServiceProtobufClient) callListTreats(ctx context.Context, in *ListTreatsRequest) (*ListTreatsResponse, error) {
	out := new(ListTreatsResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[4], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *treatServiceProtobufClient) GetUserTreatsSummary(ctx context.Context, in *GetUserTreatsSummaryRequest) (*TreatsSummaryResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "treat")
	ctx = ctxsetters.WithServiceName(ctx, "TreatService")
	ctx = ctxsetters.WithMethodName(ctx, "GetUserTreatsSummary")
	caller := c.callGetUserTreatsSummary
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetUserTreatsSummaryRequest) (*TreatsSummaryResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetUserTreatsSummaryRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetUserTreatsSummaryRequest) when calling interceptor")
					}
					return c.callGetUserTreatsSummary(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*TreatsSummaryResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*TreatsSummaryResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *treatServiceProtobufClient) callGetUserTreatsSummary(ctx context.Context, in *GetUserTreatsSummaryRequest) (*TreatsSummaryResponse, error) {
	out := new(TreatsSummaryResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[5], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *treatServiceProtobufClient) GetTreatStats(ctx context.Context, in *GetTreatStatsRequest) (*TreatStatsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "treat")
	ctx = ctxsetters.WithServiceName(ctx, "TreatService")
	ctx = ctxsetters.WithMethodName(ctx, "GetTreatStats")
	caller := c.callGetTreatStats
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetTreatStatsRequest) (*TreatStatsResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetTreatStatsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetTreatStatsRequest) when calling interceptor")
					}
					return c.callGetTreatStats(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*TreatStatsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*TreatStatsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *treatServiceProtobufClient) callGetTreatStats(ctx context.Context, in *GetTreatStatsRequest) (*TreatStatsResponse, error) {
	out := new(TreatStatsResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[6], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// ========================
// TreatService JSON Client
// ========================

type treatServiceJSONClient struct {
	client      HTTPClient
	urls        [7]string
	interceptor twirp.Interceptor
	opts        twirp.ClientOptions
}

// NewTreatServiceJSONClient creates a JSON client that implements the TreatService interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewTreatServiceJSONClient(baseURL string, client HTTPClient, opts ...twirp.ClientOption) TreatService {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	// Using ReadOpt allows backwards and forwads compatibility with new options in the future
	literalURLs := false
	_ = clientOpts.ReadOpt("literalURLs", &literalURLs)
	var pathPrefix string
	if ok := clientOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	// Build method URLs: <baseURL>[<prefix>]/<package>.<Service>/<Method>
	serviceURL := sanitizeBaseURL(baseURL)
	serviceURL += baseServicePath(pathPrefix, "treat", "TreatService")
	urls := [7]string{
		serviceURL + "AwardTreat",
		serviceURL + "GetTreat",
		serviceURL + "UpdateTreat",
		serviceURL + "DeleteTreat",
		serviceURL + "ListTreats",
		serviceURL + "GetUserTreatsSummary",
		serviceURL + "GetTreatStats",
	}

	return &treatServiceJSONClient{
		client:      client,
		urls:        urls,
		interceptor: twirp.ChainInterceptors(clientOpts.Interceptors...),
		opts:        clientOpts,
	}
}

func (c *treatServiceJSONClient) AwardTreat(ctx context.Context, in *AwardTreatRequest) (*TreatResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "treat")
	ctx = ctxsetters.WithServiceName(ctx, "TreatService")
	ctx = ctxsetters.WithMethodName(ctx, "AwardTreat")
	caller := c.callAwardTreat
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *AwardTreatRequest) (*TreatResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*AwardTreatRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*AwardTreatRequest) when calling interceptor")
					}
					return c.callAwardTreat(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*TreatResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*TreatResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *treatServiceJSONClient) callAwardTreat(ctx context.Context, in *AwardTreatRequest) (*TreatResponse, error) {
	out := new(TreatResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *treatServiceJSONClient) GetTreat(ctx context.Context, in *GetTreatRequest) (*TreatResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "treat")
	ctx = ctxsetters.WithServiceName(ctx, "TreatService")
	ctx = ctxsetters.WithMethodName(ctx, "GetTreat")
	caller := c.callGetTreat
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetTreatRequest) (*TreatResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetTreatRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetTreatRequest) when calling interceptor")
					}
					return c.callGetTreat(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*TreatResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*TreatResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *treatServiceJSONClient) callGetTreat(ctx context.Context, in *GetTreatRequest) (*TreatResponse, error) {
	out := new(TreatResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[1], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *treatServiceJSONClient) UpdateTreat(ctx context.Context, in *UpdateTreatRequest) (*TreatResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "treat")
	ctx = ctxsetters.WithServiceName(ctx, "TreatService")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateTreat")
	caller := c.callUpdateTreat
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UpdateTreatRequest) (*TreatResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UpdateTreatRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UpdateTreatRequest) when calling interceptor")
					}
					return c.callUpdateTreat(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*TreatResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*TreatResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *treatServiceJSONClient) callUpdateTreat(ctx context.Context, in *UpdateTreatRequest) (*TreatResponse, error) {
	out := new(TreatResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[2], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *treatServiceJSONClient) DeleteTreat(ctx context.Context, in *DeleteTreatRequest) (*ResponseStatus, error) {
	ctx = ctxsetters.WithPackageName(ctx, "treat")
	ctx = ctxsetters.WithServiceName(ctx, "TreatService")
	ctx = ctxsetters.WithMethodName(ctx, "DeleteTreat")
	caller := c.callDeleteTreat
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *DeleteTreatRequest) (*ResponseStatus, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*DeleteTreatRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*DeleteTreatRequest) when calling interceptor")
					}
					return c.callDeleteTreat(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ResponseStatus)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ResponseStatus) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *treatServiceJSONClient) callDeleteTreat(ctx context.Context, in *DeleteTreatRequest) (*ResponseStatus, error) {
	out := new(ResponseStatus)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[3], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *treatServiceJSONClient) ListTreats(ctx context.Context, in *ListTreatsRequest) (*ListTreatsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "treat")
	ctx = ctxsetters.WithServiceName(ctx, "TreatService")
	ctx = ctxsetters.WithMethodName(ctx, "ListTreats")
	caller := c.callListTreats
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ListTreatsRequest) (*ListTreatsResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListTreatsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListTreatsRequest) when calling interceptor")
					}
					return c.callListTreats(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListTreatsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListTreatsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *treatServiceJSONClient) callListTreats(ctx context.Context, in *ListTreatsRequest) (*ListTreatsResponse, error) {
	out := new(ListTreatsResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[4], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *treatServiceJSONClient) GetUserTreatsSummary(ctx context.Context, in *GetUserTreatsSummaryRequest) (*TreatsSummaryResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "treat")
	ctx = ctxsetters.WithServiceName(ctx, "TreatService")
	ctx = ctxsetters.WithMethodName(ctx, "GetUserTreatsSummary")
	caller := c.callGetUserTreatsSummary
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetUserTreatsSummaryRequest) (*TreatsSummaryResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetUserTreatsSummaryRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetUserTreatsSummaryRequest) when calling interceptor")
					}
					return c.callGetUserTreatsSummary(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*TreatsSummaryResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*TreatsSummaryResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *treatServiceJSONClient) callGetUserTreatsSummary(ctx context.Context, in *GetUserTreatsSummaryRequest) (*TreatsSummaryResponse, error) {
	out := new(TreatsSummaryResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[5], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *treatServiceJSONClient) GetTreatStats(ctx context.Context, in *GetTreatStatsRequest) (*TreatStatsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "treat")
	ctx = ctxsetters.WithServiceName(ctx, "TreatService")
	ctx = ctxsetters.WithMethodName(ctx, "GetTreatStats")
	caller := c.callGetTreatStats
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetTreatStatsRequest) (*TreatStatsResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetTreatStatsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetTreatStatsRequest) when calling interceptor")
					}
					return c.callGetTreatStats(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*TreatStatsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*TreatStatsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *treatServiceJSONClient) callGetTreatStats(ctx context.Context, in *GetTreatStatsRequest) (*TreatStatsResponse, error) {
	out := new(TreatStatsResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[6], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// ===========================
// TreatService Server Handler
// ===========================

type treatServiceServer struct {
	TreatService
	interceptor      twirp.Interceptor
	hooks            *twirp.ServerHooks
	pathPrefix       string // prefix for routing
	jsonSkipDefaults bool   // do not include unpopulated fields (default values) in the response
	jsonCamelCase    bool   // JSON fields are serialized as lowerCamelCase rather than keeping the original proto names
}

// NewTreatServiceServer builds a TwirpServer that can be used as an http.Handler to handle
// HTTP requests that are routed to the right method in the provided svc implementation.
// The opts are twirp.ServerOption modifiers, for example twirp.WithServerHooks(hooks).
func NewTreatServiceServer(svc TreatService, opts ...interface{}) TwirpServer {
	serverOpts := newServerOpts(opts)

	// Using ReadOpt allows backwards and forwads compatibility with new options in the future
	jsonSkipDefaults := false
	_ = serverOpts.ReadOpt("jsonSkipDefaults", &jsonSkipDefaults)
	jsonCamelCase := false
	_ = serverOpts.ReadOpt("jsonCamelCase", &jsonCamelCase)
	var pathPrefix string
	if ok := serverOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	return &treatServiceServer{
		TreatService:     svc,
		hooks:            serverOpts.Hooks,
		interceptor:      twirp.ChainInterceptors(serverOpts.Interceptors...),
		pathPrefix:       pathPrefix,
		jsonSkipDefaults: jsonSkipDefaults,
		jsonCamelCase:    jsonCamelCase,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *treatServiceServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// handleRequestBodyError is used to handle error when the twirp server cannot read request
func (s *treatServiceServer) handleRequestBodyError(ctx context.Context, resp http.ResponseWriter, msg string, err error) {
	if context.Canceled == ctx.Err() {
		s.writeError(ctx, resp, twirp.NewError(twirp.Canceled, "failed to read request: context canceled"))
		return
	}
	if context.DeadlineExceeded == ctx.Err() {
		s.writeError(ctx, resp, twirp.NewError(twirp.DeadlineExceeded, "failed to read request: deadline exceeded"))
		return
	}
	s.writeError(ctx, resp, twirp.WrapError(malformedRequestError(msg), err))
}

// TreatServicePathPrefix is a convenience constant that may identify URL paths.
// Should be used with caution, it only matches routes generated by Twirp Go clients,
// with the default "/twirp" prefix and default CamelCase service and method names.
// More info: https://twitchtv.github.io/twirp/docs/routing.html
const TreatServicePathPrefix = "/twirp/treat.TreatService/"

func (s *treatServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "treat")
	ctx = ctxsetters.WithServiceName(ctx, "TreatService")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}

	// Verify path format: [<prefix>]/<package>.<Service>/<Method>
	prefix, pkgService, method := parseTwirpPath(req.URL.Path)
	if pkgService != "treat.TreatService" {
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}
	if prefix != s.pathPrefix {
		msg := fmt.Sprintf("invalid path prefix %q, expected %q, on path %q", prefix, s.pathPrefix, req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}

	switch method {
	case "AwardTreat":
		s.serveAwardTreat(ctx, resp, req)
		return
	case "GetTreat":
		s.serveGetTreat(ctx, resp, req)
		return
	case "UpdateTreat":
		s.serveUpdateTreat(ctx, resp, req)
		return
	case "DeleteTreat":
		s.serveDeleteTreat(ctx, resp, req)
		return
	case "ListTreats":
		s.serveListTreats(ctx, resp, req)
		return
	case "GetUserTreatsSummary":
		s.serveGetUserTreatsSummary(ctx, resp, req)
		return
	case "GetTreatStats":
		s.serveGetTreatStats(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}
}

func (s *treatServiceServer) serveAwardTreat(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveAwardTreatJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveAwardTreatProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *treatServiceServer) serveAwardTreatJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "AwardTreat")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(AwardTreatRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.TreatService.AwardTreat
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *AwardTreatRequest) (*TreatResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*AwardTreatRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*AwardTreatRequest) when calling interceptor")
					}
					return s.TreatService.AwardTreat(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*TreatResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*TreatResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *TreatResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *TreatResponse and nil error while calling AwardTreat. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *treatServiceServer) serveAwardTreatProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "AwardTreat")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(AwardTreatRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.TreatService.AwardTreat
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *AwardTreatRequest) (*TreatResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*AwardTreatRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*AwardTreatRequest) when calling interceptor")
					}
					return s.TreatService.AwardTreat(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*TreatResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*TreatResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *TreatResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *TreatResponse and nil error while calling AwardTreat. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *treatServiceServer) serveGetTreat(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetTreatJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetTreatProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *treatServiceServer) serveGetTreatJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetTreat")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(GetTreatRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.TreatService.GetTreat
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetTreatRequest) (*TreatResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetTreatRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetTreatRequest) when calling interceptor")
					}
					return s.TreatService.GetTreat(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*TreatResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*TreatResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *TreatResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *TreatResponse and nil error while calling GetTreat. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *treatServiceServer) serveGetTreatProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetTreat")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(GetTreatRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.TreatService.GetTreat
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetTreatRequest) (*TreatResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetTreatRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetTreatRequest) when calling interceptor")
					}
					return s.TreatService.GetTreat(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*TreatResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*TreatResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *TreatResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *TreatResponse and nil error while calling GetTreat. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *treatServiceServer) serveUpdateTreat(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveUpdateTreatJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveUpdateTreatProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *treatServiceServer) serveUpdateTreatJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateTreat")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(UpdateTreatRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.TreatService.UpdateTreat
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UpdateTreatRequest) (*TreatResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UpdateTreatRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UpdateTreatRequest) when calling interceptor")
					}
					return s.TreatService.UpdateTreat(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*TreatResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*TreatResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *TreatResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *TreatResponse and nil error while calling UpdateTreat. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *treatServiceServer) serveUpdateTreatProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateTreat")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(UpdateTreatRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.TreatService.UpdateTreat
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UpdateTreatRequest) (*TreatResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UpdateTreatRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UpdateTreatRequest) when calling interceptor")
					}
					return s.TreatService.UpdateTreat(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*TreatResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*TreatResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *TreatResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *TreatResponse and nil error while calling UpdateTreat. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *treatServiceServer) serveDeleteTreat(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveDeleteTreatJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveDeleteTreatProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *treatServiceServer) serveDeleteTreatJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "DeleteTreat")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(DeleteTreatRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.TreatService.DeleteTreat
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *DeleteTreatRequest) (*ResponseStatus, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*DeleteTreatRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*DeleteTreatRequest) when calling interceptor")
					}
					return s.TreatService.DeleteTreat(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ResponseStatus)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ResponseStatus) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ResponseStatus
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ResponseStatus and nil error while calling DeleteTreat. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *treatServiceServer) serveDeleteTreatProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "DeleteTreat")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(DeleteTreatRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.TreatService.DeleteTreat
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *DeleteTreatRequest) (*ResponseStatus, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*DeleteTreatRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*DeleteTreatRequest) when calling interceptor")
					}
					return s.TreatService.DeleteTreat(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ResponseStatus)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ResponseStatus) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ResponseStatus
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ResponseStatus and nil error while calling DeleteTreat. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *treatServiceServer) serveListTreats(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveListTreatsJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveListTreatsProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *treatServiceServer) serveListTreatsJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ListTreats")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(ListTreatsRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.TreatService.ListTreats
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ListTreatsRequest) (*ListTreatsResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListTreatsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListTreatsRequest) when calling interceptor")
					}
					return s.TreatService.ListTreats(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListTreatsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListTreatsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ListTreatsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ListTreatsResponse and nil error while calling ListTreats. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *treatServiceServer) serveListTreatsProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ListTreats")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(ListTreatsRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.TreatService.ListTreats
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ListTreatsRequest) (*ListTreatsResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListTreatsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListTreatsRequest) when calling interceptor")
					}
					return s.TreatService.ListTreats(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListTreatsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListTreatsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ListTreatsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ListTreatsResponse and nil error while calling ListTreats. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *treatServiceServer) serveGetUserTreatsSummary(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetUserTreatsSummaryJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetUserTreatsSummaryProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *treatServiceServer) serveGetUserTreatsSummaryJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetUserTreatsSummary")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(GetUserTreatsSummaryRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.TreatService.GetUserTreatsSummary
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetUserTreatsSummaryRequest) (*TreatsSummaryResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetUserTreatsSummaryRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetUserTreatsSummaryRequest) when calling interceptor")
					}
					return s.TreatService.GetUserTreatsSummary(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*TreatsSummaryResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*TreatsSummaryResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *TreatsSummaryResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *TreatsSummaryResponse and nil error while calling GetUserTreatsSummary. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *treatServiceServer) serveGetUserTreatsSummaryProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetUserTreatsSummary")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(GetUserTreatsSummaryRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.TreatService.GetUserTreatsSummary
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetUserTreatsSummaryRequest) (*TreatsSummaryResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetUserTreatsSummaryRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetUserTreatsSummaryRequest) when calling interceptor")
					}
					return s.TreatService.GetUserTreatsSummary(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*TreatsSummaryResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*TreatsSummaryResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *TreatsSummaryResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *TreatsSummaryResponse and nil error while calling GetUserTreatsSummary. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *treatServiceServer) serveGetTreatStats(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetTreatStatsJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetTreatStatsProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *treatServiceServer) serveGetTreatStatsJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetTreatStats")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(GetTreatStatsRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.TreatService.GetTreatStats
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetTreatStatsRequest) (*TreatStatsResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetTreatStatsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetTreatStatsRequest) when calling interceptor")
					}
					return s.TreatService.GetTreatStats(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*TreatStatsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*TreatStatsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *TreatStatsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *TreatStatsResponse and nil error while calling GetTreatStats. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *treatServiceServer) serveGetTreatStatsProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetTreatStats")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(GetTreatStatsRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.TreatService.GetTreatStats
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetTreatStatsRequest) (*TreatStatsResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetTreatStatsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetTreatStatsRequest) when calling interceptor")
					}
					return s.TreatService.GetTreatStats(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*TreatStatsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*TreatStatsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *TreatStatsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *TreatStatsResponse and nil error while calling GetTreatStats. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *treatServiceServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor5, 0
}

func (s *treatServiceServer) ProtocGenTwirpVersion() string {
	return "v8.1.2"
}

// PathPrefix returns the base service path, in the form: "/<prefix>/<package>.<Service>/"
// that is everything in a Twirp route except for the <Method>. This can be used for routing,
// for example to identify the requests that are targeted to this service in a mux.
func (s *treatServiceServer) PathPrefix() string {
	return baseServicePath(s.pathPrefix, "treat", "TreatService")
}

var twirpFileDescriptor5 = []byte{
	// 1276 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x57, 0xdd, 0x6e, 0xe3, 0x44,
	0x14, 0x56, 0xe2, 0x38, 0x71, 0x8e, 0x93, 0x2e, 0x1d, 0x2d, 0x8b, 0x37, 0x05, 0x6d, 0x6b, 0x16,
	0x5a, 0x2e, 0x48, 0xb4, 0xad, 0x04, 0x0b, 0xac, 0x80, 0x66, 0xbb, 0xaa, 0x2a, 0x2d, 0x12, 0x72,
	0x5b, 0x09, 0x71, 0x13, 0x39, 0xf1, 0x34, 0x58, 0xf8, 0x6f, 0x3d, 0xe3, 0xb6, 0xde, 0x4b, 0x1e,
	0x04, 0xf1, 0x04, 0x3c, 0x00, 0xe2, 0x0d, 0x90, 0x78, 0x09, 0xee, 0x11, 0x8f, 0x80, 0xe6, 0xc7,
	0x8e, 0x53, 0xc7, 0x49, 0x49, 0xd1, 0x5e, 0xc5, 0x73, 0x7e, 0xec, 0x33, 0xdf, 0xf9, 0xce, 0x37,
	0x13, 0xd0, 0x69, 0x8c, 0x6d, 0xda, 0x8f, 0xe2, 0x90, 0x86, 0x48, 0xe5, 0x8b, 0x5e, 0x67, 0x12,
	0xfa, 0x7e, 0x18, 0x08, 0x63, 0xef, 0xd1, 0x34, 0x0c, 0xa7, 0x1e, 0x1e, 0xf0, 0xd5, 0x38, 0xb9,
	0x18, 0x50, 0xd7, 0xc7, 0x84, 0xda, 0x7e, 0x24, 0x02, 0xcc, 0xbf, 0x1a, 0xa0, 0x9e, 0xb1, 0x44,
	0xb4, 0x01, 0x75, 0xd7, 0x31, 0x6a, 0xdb, 0xb5, 0xbd, 0xb6, 0x55, 0x77, 0x1d, 0xf4, 0x0e, 0xb4,
	0x12, 0x82, 0xe3, 0x91, 0xeb, 0x18, 0x75, 0x6e, 0x6c, 0xb2, 0xe5, 0x89, 0x83, 0xde, 0x03, 0xe0,
	0x9f, 0x1a, 0xd1, 0x34, 0xc2, 0x86, 0xc2, 0x7d, 0x6d, 0x6e, 0x39, 0x4b, 0x23, 0x8c, 0xee, 0x83,
	0x4a, 0x5d, 0xea, 0x61, 0xa3, 0xc1, 0x3d, 0x62, 0x81, 0xb6, 0x41, 0x77, 0x30, 0x99, 0xc4, 0x6e,
	0x44, 0xdd, 0x30, 0x30, 0x54, 0xee, 0x2b, 0x9a, 0xd0, 0x03, 0x68, 0x46, 0xa1, 0x1b, 0x50, 0x62,
	0x34, 0xb7, 0x6b, 0x7b, 0xaa, 0x25, 0x57, 0x68, 0x0b, 0xda, 0xae, 0x6f, 0x4f, 0xf1, 0x28, 0x89,
	0x3d, 0xa3, 0xc5, 0xf3, 0x34, 0x6e, 0x38, 0x8f, 0x3d, 0x56, 0x8b, 0x7d, 0x65, 0xc7, 0x0e, 0x76,
	0x46, 0xe3, 0xd4, 0xd0, 0x44, 0x2d, 0xd2, 0x32, 0x4c, 0xd1, 0x07, 0xb0, 0x61, 0x47, 0x91, 0xe7,
	0x4e, 0x6c, 0xf6, 0x09, 0xb6, 0x95, 0x36, 0x0f, 0xe9, 0x16, 0xac, 0x27, 0x0e, 0xfa, 0x04, 0x34,
	0x1f, 0x53, 0xdb, 0xb1, 0xa9, 0x6d, 0xc0, 0xb6, 0xb2, 0xa7, 0xef, 0xf7, 0xfa, 0x02, 0x5a, 0x0e,
	0x4d, 0xff, 0x1b, 0xe9, 0x7c, 0x11, 0xd0, 0x38, 0xb5, 0xf2, 0x58, 0xf4, 0xd9, 0xec, 0xeb, 0x36,
	0x35, 0xf4, 0xed, 0x1a, 0xcf, 0x14, 0x90, 0xf7, 0x33, 0xc8, 0xfb, 0x67, 0x19, 0xe4, 0x79, 0x65,
	0x87, 0x94, 0xa5, 0xe2, 0xeb, 0xc8, 0x8d, 0x31, 0x61, 0xa9, 0x9d, 0xd5, 0xa9, 0x32, 0x5a, 0xa4,
	0x4e, 0x58, 0x59, 0xe2, 0xab, 0xdd, 0xd5, 0xa9, 0x32, 0x5a, 0xa4, 0x26, 0x91, 0x93, 0xa5, 0x6e,
	0xac, 0x4e, 0x95, 0xd1, 0x87, 0xb4, 0xf7, 0x05, 0x74, 0xe7, 0x60, 0x40, 0x6f, 0x81, 0xf2, 0x23,
	0x4e, 0x25, 0x61, 0xd8, 0x23, 0xeb, 0xfc, 0xa5, 0xed, 0x25, 0x58, 0xf2, 0x45, 0x2c, 0x3e, 0xaf,
	0x3f, 0xad, 0x99, 0xbf, 0x29, 0xb0, 0x79, 0xc8, 0xf6, 0xce, 0xf1, 0xb4, 0xf0, 0xab, 0x04, 0x13,
	0x5a, 0x64, 0x58, 0x6d, 0x09, 0xc3, 0xea, 0x95, 0x0c, 0x53, 0x96, 0x30, 0xac, 0xb1, 0x8c, 0x61,
	0x6a, 0x35, 0xc3, 0x9a, 0x4b, 0x19, 0xd6, 0x5a, 0xcd, 0x30, 0x6d, 0x11, 0xc3, 0x86, 0x05, 0x86,
	0xb5, 0x39, 0xc3, 0x3e, 0x94, 0x0c, 0x2b, 0xc1, 0xb2, 0x8c, 0x6d, 0x05, 0xca, 0xc0, 0x7f, 0xa0,
	0xcc, 0xdd, 0x9a, 0x37, 0x81, 0xae, 0xac, 0x8f, 0x44, 0x61, 0x40, 0x30, 0xea, 0x43, 0x93, 0x50,
	0x9b, 0x26, 0x84, 0xe7, 0xeb, 0xfb, 0x0f, 0xfa, 0x52, 0x73, 0xb2, 0x88, 0x53, 0xee, 0xb5, 0x64,
	0x14, 0x32, 0x41, 0x68, 0x13, 0x7f, 0xb5, 0xbe, 0xdf, 0x29, 0xce, 0x96, 0x25, 0x5c, 0xe6, 0x0e,
	0xdc, 0x3b, 0xc6, 0x74, 0x8e, 0x1e, 0x37, 0x04, 0xc9, 0xfc, 0xb3, 0x0e, 0xe8, 0x9c, 0xf3, 0x71,
	0x59, 0xd8, 0x8c, 0x1d, 0xf5, 0x25, 0xec, 0x50, 0x96, 0xb1, 0xa3, 0x51, 0xcd, 0x0e, 0xf5, 0x06,
	0x3b, 0x9e, 0x17, 0xfa, 0xda, 0xe4, 0x7d, 0xdd, 0x95, 0xbb, 0x2b, 0x57, 0x7a, 0xcb, 0xc6, 0xb6,
	0xde, 0x58, 0x63, 0x1f, 0x03, 0x3a, 0xc2, 0x1e, 0x5e, 0x8e, 0xa7, 0xf9, 0xab, 0x02, 0x9b, 0x2f,
	0x5d, 0x22, 0x7a, 0x43, 0xee, 0x3a, 0xbb, 0xe5, 0x79, 0x51, 0x16, 0xcd, 0xcb, 0xa7, 0xd0, 0xbe,
	0x88, 0x43, 0x7f, 0xc4, 0x30, 0xe4, 0xfd, 0x58, 0x8e, 0x88, 0xc6, 0x82, 0x8f, 0x6c, 0x8a, 0xd1,
	0x01, 0xb4, 0x68, 0x28, 0xd2, 0xd4, 0x95, 0x69, 0x4d, 0x1a, 0xf2, 0xa4, 0x5d, 0xb8, 0xe7, 0x06,
	0x13, 0x2f, 0x71, 0xf0, 0x48, 0x40, 0xeb, 0x70, 0x19, 0xd0, 0xac, 0x0d, 0x69, 0x7e, 0x21, 0xac,
	0x6c, 0x73, 0xbe, 0x1b, 0x8c, 0x24, 0x4f, 0x5a, 0x9c, 0x27, 0x6d, 0xdf, 0x0d, 0xbe, 0x15, 0x54,
	0x61, 0x6e, 0xfb, 0x3a, 0x73, 0x6b, 0xd2, 0x6d, 0x5f, 0x4b, 0x37, 0x82, 0x46, 0x64, 0x4f, 0x31,
	0x3f, 0x83, 0x54, 0x8b, 0x3f, 0x33, 0x76, 0xb1, 0xdf, 0x11, 0x71, 0x5f, 0x63, 0x3e, 0xd3, 0xaa,
	0xa5, 0x31, 0xc3, 0xa9, 0xfb, 0x1a, 0x33, 0x90, 0x49, 0x18, 0x53, 0x26, 0x3c, 0xba, 0x00, 0x99,
	0x2d, 0x87, 0x29, 0xcb, 0xe2, 0x0e, 0xc6, 0x5f, 0x7e, 0x78, 0x68, 0x96, 0xc6, 0x0c, 0x47, 0x98,
	0x4c, 0xcc, 0xdf, 0x6b, 0x80, 0x8a, 0x0d, 0x5b, 0x73, 0x6a, 0x1f, 0x43, 0x93, 0xb7, 0x8d, 0x18,
	0x75, 0x4e, 0xec, 0xf9, 0xb1, 0x95, 0x3e, 0xf4, 0x08, 0x74, 0x1a, 0x52, 0xdb, 0x1b, 0x4d, 0xc2,
	0x24, 0xa0, 0xbc, 0x99, 0xaa, 0x05, 0xdc, 0xf4, 0x9c, 0x59, 0xf2, 0x4d, 0x37, 0xaa, 0x36, 0xad,
	0xce, 0x6f, 0xda, 0xfc, 0xa3, 0x06, 0x5b, 0xc7, 0x98, 0x9e, 0x13, 0x1c, 0x8b, 0x1d, 0x9c, 0x26,
	0xbe, 0x6f, 0xc7, 0xe9, 0x4a, 0xe6, 0x95, 0xa9, 0x55, 0x5f, 0x49, 0x2d, 0x65, 0x3d, 0x6a, 0x35,
	0x6e, 0x4b, 0x2d, 0xf3, 0x67, 0x45, 0xaa, 0x67, 0xb6, 0x8d, 0xea, 0xfa, 0x77, 0xa0, 0x23, 0xa0,
	0xcc, 0x61, 0x67, 0xc0, 0x08, 0x78, 0xc5, 0x2b, 0x66, 0x21, 0x92, 0x62, 0x4a, 0x21, 0x44, 0x92,
	0xec, 0x25, 0x6c, 0x08, 0xe7, 0x68, 0x9c, 0x8a, 0x19, 0x6c, 0xcc, 0x9d, 0x37, 0x73, 0xc5, 0xf4,
	0x45, 0xd2, 0x30, 0x65, 0xb3, 0x29, 0x64, 0xa9, 0x13, 0x15, 0x4c, 0xe8, 0x09, 0x74, 0x63, 0x3c,
	0xc1, 0x01, 0xcd, 0x8a, 0x52, 0x17, 0x70, 0xa1, 0x23, 0x42, 0x64, 0x8d, 0x73, 0xf8, 0x36, 0xd7,
	0xc3, 0xb7, 0x75, 0x5b, 0x7c, 0x7b, 0x5f, 0xc1, 0x66, 0x69, 0x0f, 0xab, 0x44, 0x50, 0x2d, 0x8a,
	0xe0, 0x15, 0xbc, 0x7d, 0x83, 0x66, 0x6b, 0xce, 0x4b, 0x1f, 0x5a, 0x44, 0xbc, 0x42, 0x9e, 0x73,
	0xf7, 0x17, 0x21, 0x6e, 0x65, 0x41, 0xe6, 0x4f, 0x75, 0xb8, 0x9f, 0x1d, 0x79, 0xec, 0x55, 0xb9,
	0xb4, 0x96, 0x79, 0x5c, 0x5b, 0xc9, 0xe3, 0xfa, 0x7a, 0x38, 0x2b, 0xb7, 0x96, 0xc8, 0x87, 0xa0,
	0x4d, 0xe3, 0x30, 0x89, 0x98, 0x16, 0x89, 0xab, 0x55, 0x8b, 0xaf, 0x87, 0x29, 0x73, 0x49, 0x42,
	0x0b, 0x7a, 0xb4, 0xad, 0x96, 0x60, 0xb4, 0x50, 0x87, 0xfc, 0x30, 0x20, 0xfc, 0x84, 0x6c, 0x5b,
	0x90, 0x9f, 0x06, 0xc4, 0xfc, 0x45, 0x05, 0x98, 0x21, 0x80, 0x9e, 0x81, 0xce, 0x8e, 0xb2, 0x8c,
	0xde, 0x35, 0x4e, 0xb6, 0xad, 0x22, 0x8e, 0x3c, 0xae, 0x7f, 0x64, 0x53, 0x9b, 0xb7, 0xdd, 0x02,
	0x27, 0x7b, 0x24, 0xff, 0xd3, 0x00, 0xed, 0x40, 0x27, 0x09, 0xdc, 0x57, 0x09, 0x1e, 0xb1, 0x5d,
	0x64, 0xb7, 0x01, 0x5d, 0xd8, 0x98, 0x2a, 0x11, 0x74, 0x52, 0x9a, 0x31, 0x31, 0x16, 0xef, 0x97,
	0x2b, 0x5d, 0x35, 0x60, 0x6f, 0x76, 0x5a, 0xfe, 0xa9, 0x41, 0x3b, 0xc7, 0x8e, 0x0d, 0x85, 0x67,
	0x8f, 0xb1, 0x27, 0xf9, 0x25, 0x16, 0xcc, 0x2a, 0xb4, 0x5c, 0x8e, 0x0a, 0x5f, 0xdc, 0x06, 0xb8,
	0xd3, 0x0a, 0xe5, 0xf9, 0x78, 0x49, 0xff, 0x56, 0xe1, 0x73, 0xe7, 0xf9, 0xbe, 0xbb, 0x40, 0xf8,
	0x80, 0x8a, 0x33, 0xba, 0xa6, 0x3a, 0xec, 0x82, 0xca, 0x9e, 0x88, 0x9c, 0xd4, 0xcd, 0x12, 0x26,
	0x96, 0xf0, 0xef, 0xff, 0xad, 0x40, 0x47, 0x58, 0x71, 0x7c, 0xe9, 0x4e, 0x30, 0x7a, 0x06, 0x30,
	0xfb, 0x8f, 0x80, 0x8c, 0xaa, 0xbf, 0x0d, 0xbd, 0x39, 0xb9, 0xc9, 0xeb, 0x7c, 0x0a, 0x5a, 0x26,
	0x32, 0xe8, 0x81, 0x8c, 0xb8, 0x71, 0xd1, 0xae, 0xc8, 0xfc, 0x12, 0xf4, 0xc2, 0x1d, 0x16, 0x3d,
	0xac, 0xbc, 0xd7, 0x56, 0xe4, 0x7f, 0x0d, 0x7a, 0xe1, 0x76, 0x99, 0xe7, 0x97, 0x6f, 0x9c, 0xbd,
	0x0a, 0xec, 0xd0, 0x21, 0xc0, 0xec, 0x1e, 0x93, 0xef, 0xbc, 0x74, 0x17, 0xed, 0x3d, 0x5c, 0xe0,
	0x91, 0x45, 0x7c, 0xc7, 0x35, 0xb6, 0x74, 0x97, 0x40, 0xe6, 0x0c, 0x8a, 0xaa, 0x8b, 0x46, 0xef,
	0xdd, 0x85, 0xfa, 0x9d, 0xbd, 0xf9, 0x18, 0xba, 0x73, 0xea, 0x8d, 0xb6, 0x6e, 0xa0, 0x5b, 0xd4,
	0xf4, 0xbc, 0xc4, 0x32, 0x93, 0x86, 0x1f, 0x7d, 0xbf, 0x3b, 0x75, 0xe9, 0x0f, 0xc9, 0x98, 0xa1,
	0x30, 0xb8, 0x0a, 0xbd, 0x8b, 0xd4, 0xb7, 0x09, 0xc5, 0xf1, 0xe0, 0x2a, 0x0c, 0x2f, 0xae, 0x0f,
	0x06, 0xce, 0x78, 0x30, 0xc5, 0xc1, 0xe0, 0xf2, 0xc9, 0xb8, 0xc9, 0x47, 0xfb, 0xe0, 0xdf, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xaa, 0xd3, 0x0f, 0xa7, 0xf8, 0x11, 0x00, 0x00,
}
