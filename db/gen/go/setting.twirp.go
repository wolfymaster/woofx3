// Code generated by protoc-gen-twirp v8.1.2, DO NOT EDIT.
// source: setting.proto

package v1

import context "context"
import fmt "fmt"
import http "net/http"
import ioutil "io/ioutil"
import json "encoding/json"
import strconv "strconv"
import strings "strings"

import protojson "google.golang.org/protobuf/encoding/protojson"
import proto "google.golang.org/protobuf/proto"
import twirp "github.com/twitchtv/twirp"
import ctxsetters "github.com/twitchtv/twirp/ctxsetters"

// Version compatibility assertion.
// If the constant is not defined in the package, that likely means
// the package needs to be updated to work with this generated code.
// See https://twitchtv.github.io/twirp/docs/version_matrix.html
const _ = twirp.TwirpPackageMinVersion_8_1_0

// ========================
// SettingService Interface
// ========================

type SettingService interface {
	// Get a setting by key
	GetSetting(context.Context, *GetSettingRequest) (*SettingResponse, error)

	// Get multiple settings by keys
	GetSettings(context.Context, *GetSettingsRequest) (*GetSettingsResponse, error)

	// Set a setting value
	SetSetting(context.Context, *SetSettingRequest) (*SettingResponse, error)

	// Set multiple settings at once
	SetSettings(context.Context, *SetSettingsRequest) (*SetSettingsResponse, error)

	// Delete a setting
	DeleteSetting(context.Context, *DeleteSettingRequest) (*ResponseStatus, error)
}

// ==============================
// SettingService Protobuf Client
// ==============================

type settingServiceProtobufClient struct {
	client      HTTPClient
	urls        [5]string
	interceptor twirp.Interceptor
	opts        twirp.ClientOptions
}

// NewSettingServiceProtobufClient creates a Protobuf client that implements the SettingService interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewSettingServiceProtobufClient(baseURL string, client HTTPClient, opts ...twirp.ClientOption) SettingService {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	// Using ReadOpt allows backwards and forwads compatibility with new options in the future
	literalURLs := false
	_ = clientOpts.ReadOpt("literalURLs", &literalURLs)
	var pathPrefix string
	if ok := clientOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	// Build method URLs: <baseURL>[<prefix>]/<package>.<Service>/<Method>
	serviceURL := sanitizeBaseURL(baseURL)
	serviceURL += baseServicePath(pathPrefix, "setting", "SettingService")
	urls := [5]string{
		serviceURL + "GetSetting",
		serviceURL + "GetSettings",
		serviceURL + "SetSetting",
		serviceURL + "SetSettings",
		serviceURL + "DeleteSetting",
	}

	return &settingServiceProtobufClient{
		client:      client,
		urls:        urls,
		interceptor: twirp.ChainInterceptors(clientOpts.Interceptors...),
		opts:        clientOpts,
	}
}

func (c *settingServiceProtobufClient) GetSetting(ctx context.Context, in *GetSettingRequest) (*SettingResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "setting")
	ctx = ctxsetters.WithServiceName(ctx, "SettingService")
	ctx = ctxsetters.WithMethodName(ctx, "GetSetting")
	caller := c.callGetSetting
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetSettingRequest) (*SettingResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetSettingRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetSettingRequest) when calling interceptor")
					}
					return c.callGetSetting(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*SettingResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*SettingResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *settingServiceProtobufClient) callGetSetting(ctx context.Context, in *GetSettingRequest) (*SettingResponse, error) {
	out := new(SettingResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *settingServiceProtobufClient) GetSettings(ctx context.Context, in *GetSettingsRequest) (*GetSettingsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "setting")
	ctx = ctxsetters.WithServiceName(ctx, "SettingService")
	ctx = ctxsetters.WithMethodName(ctx, "GetSettings")
	caller := c.callGetSettings
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetSettingsRequest) (*GetSettingsResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetSettingsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetSettingsRequest) when calling interceptor")
					}
					return c.callGetSettings(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetSettingsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetSettingsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *settingServiceProtobufClient) callGetSettings(ctx context.Context, in *GetSettingsRequest) (*GetSettingsResponse, error) {
	out := new(GetSettingsResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[1], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *settingServiceProtobufClient) SetSetting(ctx context.Context, in *SetSettingRequest) (*SettingResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "setting")
	ctx = ctxsetters.WithServiceName(ctx, "SettingService")
	ctx = ctxsetters.WithMethodName(ctx, "SetSetting")
	caller := c.callSetSetting
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *SetSettingRequest) (*SettingResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*SetSettingRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*SetSettingRequest) when calling interceptor")
					}
					return c.callSetSetting(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*SettingResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*SettingResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *settingServiceProtobufClient) callSetSetting(ctx context.Context, in *SetSettingRequest) (*SettingResponse, error) {
	out := new(SettingResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[2], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *settingServiceProtobufClient) SetSettings(ctx context.Context, in *SetSettingsRequest) (*SetSettingsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "setting")
	ctx = ctxsetters.WithServiceName(ctx, "SettingService")
	ctx = ctxsetters.WithMethodName(ctx, "SetSettings")
	caller := c.callSetSettings
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *SetSettingsRequest) (*SetSettingsResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*SetSettingsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*SetSettingsRequest) when calling interceptor")
					}
					return c.callSetSettings(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*SetSettingsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*SetSettingsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *settingServiceProtobufClient) callSetSettings(ctx context.Context, in *SetSettingsRequest) (*SetSettingsResponse, error) {
	out := new(SetSettingsResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[3], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *settingServiceProtobufClient) DeleteSetting(ctx context.Context, in *DeleteSettingRequest) (*ResponseStatus, error) {
	ctx = ctxsetters.WithPackageName(ctx, "setting")
	ctx = ctxsetters.WithServiceName(ctx, "SettingService")
	ctx = ctxsetters.WithMethodName(ctx, "DeleteSetting")
	caller := c.callDeleteSetting
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *DeleteSettingRequest) (*ResponseStatus, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*DeleteSettingRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*DeleteSettingRequest) when calling interceptor")
					}
					return c.callDeleteSetting(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ResponseStatus)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ResponseStatus) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *settingServiceProtobufClient) callDeleteSetting(ctx context.Context, in *DeleteSettingRequest) (*ResponseStatus, error) {
	out := new(ResponseStatus)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[4], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// ==========================
// SettingService JSON Client
// ==========================

type settingServiceJSONClient struct {
	client      HTTPClient
	urls        [5]string
	interceptor twirp.Interceptor
	opts        twirp.ClientOptions
}

// NewSettingServiceJSONClient creates a JSON client that implements the SettingService interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewSettingServiceJSONClient(baseURL string, client HTTPClient, opts ...twirp.ClientOption) SettingService {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	// Using ReadOpt allows backwards and forwads compatibility with new options in the future
	literalURLs := false
	_ = clientOpts.ReadOpt("literalURLs", &literalURLs)
	var pathPrefix string
	if ok := clientOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	// Build method URLs: <baseURL>[<prefix>]/<package>.<Service>/<Method>
	serviceURL := sanitizeBaseURL(baseURL)
	serviceURL += baseServicePath(pathPrefix, "setting", "SettingService")
	urls := [5]string{
		serviceURL + "GetSetting",
		serviceURL + "GetSettings",
		serviceURL + "SetSetting",
		serviceURL + "SetSettings",
		serviceURL + "DeleteSetting",
	}

	return &settingServiceJSONClient{
		client:      client,
		urls:        urls,
		interceptor: twirp.ChainInterceptors(clientOpts.Interceptors...),
		opts:        clientOpts,
	}
}

func (c *settingServiceJSONClient) GetSetting(ctx context.Context, in *GetSettingRequest) (*SettingResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "setting")
	ctx = ctxsetters.WithServiceName(ctx, "SettingService")
	ctx = ctxsetters.WithMethodName(ctx, "GetSetting")
	caller := c.callGetSetting
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetSettingRequest) (*SettingResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetSettingRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetSettingRequest) when calling interceptor")
					}
					return c.callGetSetting(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*SettingResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*SettingResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *settingServiceJSONClient) callGetSetting(ctx context.Context, in *GetSettingRequest) (*SettingResponse, error) {
	out := new(SettingResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *settingServiceJSONClient) GetSettings(ctx context.Context, in *GetSettingsRequest) (*GetSettingsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "setting")
	ctx = ctxsetters.WithServiceName(ctx, "SettingService")
	ctx = ctxsetters.WithMethodName(ctx, "GetSettings")
	caller := c.callGetSettings
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetSettingsRequest) (*GetSettingsResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetSettingsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetSettingsRequest) when calling interceptor")
					}
					return c.callGetSettings(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetSettingsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetSettingsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *settingServiceJSONClient) callGetSettings(ctx context.Context, in *GetSettingsRequest) (*GetSettingsResponse, error) {
	out := new(GetSettingsResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[1], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *settingServiceJSONClient) SetSetting(ctx context.Context, in *SetSettingRequest) (*SettingResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "setting")
	ctx = ctxsetters.WithServiceName(ctx, "SettingService")
	ctx = ctxsetters.WithMethodName(ctx, "SetSetting")
	caller := c.callSetSetting
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *SetSettingRequest) (*SettingResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*SetSettingRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*SetSettingRequest) when calling interceptor")
					}
					return c.callSetSetting(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*SettingResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*SettingResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *settingServiceJSONClient) callSetSetting(ctx context.Context, in *SetSettingRequest) (*SettingResponse, error) {
	out := new(SettingResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[2], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *settingServiceJSONClient) SetSettings(ctx context.Context, in *SetSettingsRequest) (*SetSettingsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "setting")
	ctx = ctxsetters.WithServiceName(ctx, "SettingService")
	ctx = ctxsetters.WithMethodName(ctx, "SetSettings")
	caller := c.callSetSettings
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *SetSettingsRequest) (*SetSettingsResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*SetSettingsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*SetSettingsRequest) when calling interceptor")
					}
					return c.callSetSettings(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*SetSettingsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*SetSettingsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *settingServiceJSONClient) callSetSettings(ctx context.Context, in *SetSettingsRequest) (*SetSettingsResponse, error) {
	out := new(SetSettingsResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[3], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *settingServiceJSONClient) DeleteSetting(ctx context.Context, in *DeleteSettingRequest) (*ResponseStatus, error) {
	ctx = ctxsetters.WithPackageName(ctx, "setting")
	ctx = ctxsetters.WithServiceName(ctx, "SettingService")
	ctx = ctxsetters.WithMethodName(ctx, "DeleteSetting")
	caller := c.callDeleteSetting
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *DeleteSettingRequest) (*ResponseStatus, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*DeleteSettingRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*DeleteSettingRequest) when calling interceptor")
					}
					return c.callDeleteSetting(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ResponseStatus)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ResponseStatus) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *settingServiceJSONClient) callDeleteSetting(ctx context.Context, in *DeleteSettingRequest) (*ResponseStatus, error) {
	out := new(ResponseStatus)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[4], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// =============================
// SettingService Server Handler
// =============================

type settingServiceServer struct {
	SettingService
	interceptor      twirp.Interceptor
	hooks            *twirp.ServerHooks
	pathPrefix       string // prefix for routing
	jsonSkipDefaults bool   // do not include unpopulated fields (default values) in the response
	jsonCamelCase    bool   // JSON fields are serialized as lowerCamelCase rather than keeping the original proto names
}

// NewSettingServiceServer builds a TwirpServer that can be used as an http.Handler to handle
// HTTP requests that are routed to the right method in the provided svc implementation.
// The opts are twirp.ServerOption modifiers, for example twirp.WithServerHooks(hooks).
func NewSettingServiceServer(svc SettingService, opts ...interface{}) TwirpServer {
	serverOpts := newServerOpts(opts)

	// Using ReadOpt allows backwards and forwads compatibility with new options in the future
	jsonSkipDefaults := false
	_ = serverOpts.ReadOpt("jsonSkipDefaults", &jsonSkipDefaults)
	jsonCamelCase := false
	_ = serverOpts.ReadOpt("jsonCamelCase", &jsonCamelCase)
	var pathPrefix string
	if ok := serverOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	return &settingServiceServer{
		SettingService:   svc,
		hooks:            serverOpts.Hooks,
		interceptor:      twirp.ChainInterceptors(serverOpts.Interceptors...),
		pathPrefix:       pathPrefix,
		jsonSkipDefaults: jsonSkipDefaults,
		jsonCamelCase:    jsonCamelCase,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *settingServiceServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// handleRequestBodyError is used to handle error when the twirp server cannot read request
func (s *settingServiceServer) handleRequestBodyError(ctx context.Context, resp http.ResponseWriter, msg string, err error) {
	if context.Canceled == ctx.Err() {
		s.writeError(ctx, resp, twirp.NewError(twirp.Canceled, "failed to read request: context canceled"))
		return
	}
	if context.DeadlineExceeded == ctx.Err() {
		s.writeError(ctx, resp, twirp.NewError(twirp.DeadlineExceeded, "failed to read request: deadline exceeded"))
		return
	}
	s.writeError(ctx, resp, twirp.WrapError(malformedRequestError(msg), err))
}

// SettingServicePathPrefix is a convenience constant that may identify URL paths.
// Should be used with caution, it only matches routes generated by Twirp Go clients,
// with the default "/twirp" prefix and default CamelCase service and method names.
// More info: https://twitchtv.github.io/twirp/docs/routing.html
const SettingServicePathPrefix = "/twirp/setting.SettingService/"

func (s *settingServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "setting")
	ctx = ctxsetters.WithServiceName(ctx, "SettingService")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}

	// Verify path format: [<prefix>]/<package>.<Service>/<Method>
	prefix, pkgService, method := parseTwirpPath(req.URL.Path)
	if pkgService != "setting.SettingService" {
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}
	if prefix != s.pathPrefix {
		msg := fmt.Sprintf("invalid path prefix %q, expected %q, on path %q", prefix, s.pathPrefix, req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}

	switch method {
	case "GetSetting":
		s.serveGetSetting(ctx, resp, req)
		return
	case "GetSettings":
		s.serveGetSettings(ctx, resp, req)
		return
	case "SetSetting":
		s.serveSetSetting(ctx, resp, req)
		return
	case "SetSettings":
		s.serveSetSettings(ctx, resp, req)
		return
	case "DeleteSetting":
		s.serveDeleteSetting(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}
}

func (s *settingServiceServer) serveGetSetting(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetSettingJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetSettingProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *settingServiceServer) serveGetSettingJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetSetting")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(GetSettingRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.SettingService.GetSetting
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetSettingRequest) (*SettingResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetSettingRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetSettingRequest) when calling interceptor")
					}
					return s.SettingService.GetSetting(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*SettingResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*SettingResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *SettingResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *SettingResponse and nil error while calling GetSetting. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *settingServiceServer) serveGetSettingProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetSetting")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(GetSettingRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.SettingService.GetSetting
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetSettingRequest) (*SettingResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetSettingRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetSettingRequest) when calling interceptor")
					}
					return s.SettingService.GetSetting(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*SettingResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*SettingResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *SettingResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *SettingResponse and nil error while calling GetSetting. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *settingServiceServer) serveGetSettings(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetSettingsJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetSettingsProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *settingServiceServer) serveGetSettingsJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetSettings")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(GetSettingsRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.SettingService.GetSettings
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetSettingsRequest) (*GetSettingsResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetSettingsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetSettingsRequest) when calling interceptor")
					}
					return s.SettingService.GetSettings(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetSettingsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetSettingsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetSettingsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetSettingsResponse and nil error while calling GetSettings. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *settingServiceServer) serveGetSettingsProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetSettings")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(GetSettingsRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.SettingService.GetSettings
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetSettingsRequest) (*GetSettingsResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetSettingsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetSettingsRequest) when calling interceptor")
					}
					return s.SettingService.GetSettings(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetSettingsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetSettingsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetSettingsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetSettingsResponse and nil error while calling GetSettings. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *settingServiceServer) serveSetSetting(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveSetSettingJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveSetSettingProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *settingServiceServer) serveSetSettingJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "SetSetting")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(SetSettingRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.SettingService.SetSetting
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *SetSettingRequest) (*SettingResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*SetSettingRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*SetSettingRequest) when calling interceptor")
					}
					return s.SettingService.SetSetting(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*SettingResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*SettingResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *SettingResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *SettingResponse and nil error while calling SetSetting. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *settingServiceServer) serveSetSettingProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "SetSetting")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(SetSettingRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.SettingService.SetSetting
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *SetSettingRequest) (*SettingResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*SetSettingRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*SetSettingRequest) when calling interceptor")
					}
					return s.SettingService.SetSetting(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*SettingResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*SettingResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *SettingResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *SettingResponse and nil error while calling SetSetting. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *settingServiceServer) serveSetSettings(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveSetSettingsJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveSetSettingsProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *settingServiceServer) serveSetSettingsJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "SetSettings")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(SetSettingsRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.SettingService.SetSettings
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *SetSettingsRequest) (*SetSettingsResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*SetSettingsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*SetSettingsRequest) when calling interceptor")
					}
					return s.SettingService.SetSettings(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*SetSettingsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*SetSettingsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *SetSettingsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *SetSettingsResponse and nil error while calling SetSettings. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *settingServiceServer) serveSetSettingsProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "SetSettings")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(SetSettingsRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.SettingService.SetSettings
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *SetSettingsRequest) (*SetSettingsResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*SetSettingsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*SetSettingsRequest) when calling interceptor")
					}
					return s.SettingService.SetSettings(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*SetSettingsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*SetSettingsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *SetSettingsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *SetSettingsResponse and nil error while calling SetSettings. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *settingServiceServer) serveDeleteSetting(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveDeleteSettingJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveDeleteSettingProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *settingServiceServer) serveDeleteSettingJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "DeleteSetting")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(DeleteSettingRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.SettingService.DeleteSetting
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *DeleteSettingRequest) (*ResponseStatus, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*DeleteSettingRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*DeleteSettingRequest) when calling interceptor")
					}
					return s.SettingService.DeleteSetting(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ResponseStatus)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ResponseStatus) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ResponseStatus
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ResponseStatus and nil error while calling DeleteSetting. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *settingServiceServer) serveDeleteSettingProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "DeleteSetting")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(DeleteSettingRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.SettingService.DeleteSetting
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *DeleteSettingRequest) (*ResponseStatus, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*DeleteSettingRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*DeleteSettingRequest) when calling interceptor")
					}
					return s.SettingService.DeleteSetting(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ResponseStatus)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ResponseStatus) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ResponseStatus
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ResponseStatus and nil error while calling DeleteSetting. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *settingServiceServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor3, 0
}

func (s *settingServiceServer) ProtocGenTwirpVersion() string {
	return "v8.1.2"
}

// PathPrefix returns the base service path, in the form: "/<prefix>/<package>.<Service>/"
// that is everything in a Twirp route except for the <Method>. This can be used for routing,
// for example to identify the requests that are targeted to this service in a mux.
func (s *settingServiceServer) PathPrefix() string {
	return baseServicePath(s.pathPrefix, "setting", "SettingService")
}

var twirpFileDescriptor3 = []byte{
	// 556 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x53, 0xdb, 0x6e, 0xd3, 0x40,
	0x10, 0x95, 0x9d, 0x5e, 0xc8, 0x84, 0xa4, 0xed, 0x82, 0x90, 0x65, 0x5a, 0x11, 0x45, 0x42, 0xa4,
	0xa8, 0xb2, 0x45, 0xfa, 0xc4, 0x63, 0x23, 0xae, 0x12, 0x52, 0x24, 0xbb, 0xf0, 0xc0, 0x4b, 0xe4,
	0xc4, 0x93, 0x60, 0x35, 0xce, 0x9a, 0xec, 0x38, 0x25, 0xfc, 0x07, 0x5f, 0xc6, 0xaf, 0xf0, 0x01,
	0xc8, 0x9b, 0x5d, 0x27, 0xa9, 0x0d, 0x84, 0x8b, 0x78, 0x5b, 0xef, 0x9c, 0x3d, 0x73, 0xce, 0xcc,
	0x31, 0xd4, 0x05, 0x12, 0x45, 0xd3, 0xb1, 0x93, 0xcc, 0x38, 0x71, 0xb6, 0xaf, 0x3e, 0xed, 0xdb,
	0x43, 0x1e, 0xc7, 0x7c, 0xba, 0xbc, 0xb6, 0x1f, 0x8c, 0x39, 0x1f, 0x4f, 0xd0, 0x95, 0x5f, 0x83,
	0x74, 0xe4, 0x52, 0x14, 0xa3, 0xa0, 0x20, 0x4e, 0x14, 0xe0, 0xf8, 0x26, 0x40, 0xd0, 0x2c, 0x1d,
	0xd2, 0xb2, 0xda, 0xfa, 0x62, 0xc2, 0xbe, 0xbf, 0x24, 0x66, 0x0d, 0x30, 0xa3, 0xd0, 0x32, 0x9a,
	0x46, 0xbb, 0xea, 0x99, 0x51, 0xc8, 0x0e, 0xa1, 0x72, 0x85, 0x0b, 0xcb, 0x94, 0x17, 0xd9, 0x91,
	0x9d, 0xc1, 0xee, 0x3c, 0x98, 0xa4, 0x68, 0x55, 0x9a, 0x46, 0xbb, 0xd6, 0xb9, 0xe7, 0x2c, 0xb9,
	0x1d, 0xcd, 0xed, 0xbc, 0xcb, 0xaa, 0xde, 0x12, 0xc4, 0x4e, 0x00, 0xe4, 0xa1, 0x4f, 0x8b, 0x04,
	0xad, 0x1d, 0x49, 0x53, 0x95, 0x37, 0x97, 0x8b, 0x04, 0xd9, 0x43, 0x68, 0x04, 0x49, 0x32, 0x89,
	0x86, 0x01, 0x45, 0x7c, 0xda, 0x8f, 0x42, 0x6b, 0x57, 0x42, 0xea, 0x6b, 0xb7, 0xaf, 0x43, 0xf6,
	0x14, 0x60, 0x38, 0xc3, 0x80, 0x30, 0xec, 0x07, 0x64, 0x35, 0x64, 0x63, 0xbb, 0xd0, 0xf8, 0x52,
	0xbb, 0xf6, 0xaa, 0x0a, 0x7d, 0x41, 0xd9, 0xd3, 0x34, 0x09, 0xf5, 0xd3, 0x83, 0x5f, 0x3f, 0x55,
	0xe8, 0x0b, 0x6a, 0xbd, 0x81, 0xa3, 0x97, 0x48, 0x6a, 0x32, 0x1e, 0x7e, 0x4c, 0x51, 0x90, 0x1e,
	0x88, 0xb1, 0x1a, 0x48, 0xd1, 0x83, 0x59, 0xe2, 0xa1, 0x15, 0xc3, 0x41, 0x4e, 0x25, 0x12, 0x3e,
	0x15, 0xc8, 0x1c, 0xd8, 0x13, 0x14, 0x50, 0x2a, 0x24, 0x5d, 0x36, 0x4b, 0xb5, 0x56, 0x8d, 0xf0,
	0x65, 0xd5, 0x53, 0x28, 0xf6, 0x18, 0x74, 0x00, 0x64, 0x8b, 0x5a, 0xe7, 0xd0, 0xd1, 0xf9, 0xd0,
	0xd4, 0x1a, 0xd0, 0xea, 0x01, 0x5b, 0x89, 0x17, 0x5a, 0x3d, 0x83, 0x9d, 0x2b, 0x5c, 0x64, 0xfd,
	0x2a, 0xed, 0xaa, 0x27, 0xcf, 0xdb, 0xea, 0x17, 0x70, 0x67, 0x83, 0xf0, 0x0f, 0x3d, 0x9c, 0xc1,
	0x2d, 0x25, 0x51, 0x58, 0x66, 0xb3, 0x52, 0x6a, 0x22, 0x47, 0xb4, 0x3e, 0xc3, 0x91, 0xbf, 0xc5,
	0x0a, 0xf2, 0x4c, 0x9a, 0xdb, 0x64, 0xb2, 0x68, 0x78, 0xa7, 0xcc, 0xf0, 0x57, 0x03, 0x98, 0x5f,
	0x1c, 0xe1, 0xf3, 0x35, 0x03, 0x86, 0x34, 0x70, 0xba, 0x6e, 0xe0, 0x06, 0x5c, 0x7b, 0x7a, 0x2b,
	0x53, 0xb5, 0x72, 0xb6, 0xe5, 0xd4, 0xed, 0x1e, 0xd4, 0x37, 0x18, 0xfe, 0xd6, 0x7c, 0xb6, 0x46,
	0xff, 0xbf, 0xaf, 0xb1, 0x07, 0x77, 0x9f, 0xe1, 0x04, 0x09, 0xff, 0xd1, 0xcf, 0xd4, 0xf9, 0x66,
	0x42, 0x43, 0x71, 0xf9, 0x38, 0x9b, 0x47, 0x43, 0x64, 0x5d, 0x80, 0x55, 0x3e, 0x99, 0x9d, 0xab,
	0x29, 0xfc, 0xc2, 0xb6, 0x55, 0x50, 0xaa, 0xa7, 0xf0, 0x0a, 0x6a, 0x6b, 0x19, 0x67, 0xf7, 0x4b,
	0x48, 0xf4, 0x62, 0xed, 0xe3, 0xf2, 0xa2, 0x62, 0xea, 0x02, 0xf8, 0x65, 0x6a, 0xfc, 0xdf, 0x53,
	0xe3, 0x97, 0xaa, 0xf1, 0x7f, 0xa6, 0xa6, 0x6c, 0xbb, 0x2f, 0xa0, 0xbe, 0x31, 0x7f, 0x76, 0x92,
	0xc3, 0xcb, 0xf6, 0x62, 0xff, 0x60, 0xfb, 0xdd, 0xd3, 0xf7, 0x8f, 0xc6, 0x11, 0x7d, 0x48, 0x07,
	0x59, 0xdd, 0xbd, 0xe6, 0x93, 0xd1, 0x22, 0x0e, 0x04, 0xe1, 0xcc, 0xbd, 0xe6, 0x7c, 0xf4, 0xe9,
	0xdc, 0x0d, 0x07, 0xee, 0x18, 0xa7, 0xee, 0xfc, 0xc9, 0x60, 0x4f, 0xc6, 0xef, 0xfc, 0x7b, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xc5, 0xcb, 0x7b, 0x88, 0xc2, 0x06, 0x00, 0x00,
}
