// Code generated by protoc-gen-twirp v8.1.2, DO NOT EDIT.
// source: workflow.proto

package v1

import context "context"
import fmt "fmt"
import http "net/http"
import ioutil "io/ioutil"
import json "encoding/json"
import strconv "strconv"
import strings "strings"

import protojson "google.golang.org/protobuf/encoding/protojson"
import proto "google.golang.org/protobuf/proto"
import twirp "github.com/twitchtv/twirp"
import ctxsetters "github.com/twitchtv/twirp/ctxsetters"

// Version compatibility assertion.
// If the constant is not defined in the package, that likely means
// the package needs to be updated to work with this generated code.
// See https://twitchtv.github.io/twirp/docs/version_matrix.html
const _ = twirp.TwirpPackageMinVersion_8_1_0

// =========================
// WorkflowService Interface
// =========================

type WorkflowService interface {
	// Create a new workflow definition
	CreateWorkflow(context.Context, *CreateWorkflowRequest) (*WorkflowResponse, error)

	// Get a workflow by ID
	GetWorkflow(context.Context, *GetWorkflowRequest) (*WorkflowResponse, error)

	// Update an existing workflow
	UpdateWorkflow(context.Context, *UpdateWorkflowRequest) (*WorkflowResponse, error)

	// Delete a workflow
	DeleteWorkflow(context.Context, *DeleteWorkflowRequest) (*ResponseStatus, error)

	// List workflows with optional filtering
	ListWorkflows(context.Context, *ListWorkflowsRequest) (*ListWorkflowsResponse, error)

	// Execute a workflow
	ExecuteWorkflow(context.Context, *ExecuteWorkflowRequest) (*ExecuteWorkflowResponse, error)

	// Get workflow execution status
	GetWorkflowExecution(context.Context, *GetWorkflowExecutionRequest) (*WorkflowExecutionResponse, error)

	// List workflow executions
	ListWorkflowExecutions(context.Context, *ListWorkflowExecutionsRequest) (*ListWorkflowExecutionsResponse, error)

	// Cancel a running workflow execution
	CancelWorkflowExecution(context.Context, *CancelWorkflowExecutionRequest) (*ResponseStatus, error)
}

// ===============================
// WorkflowService Protobuf Client
// ===============================

type workflowServiceProtobufClient struct {
	client      HTTPClient
	urls        [9]string
	interceptor twirp.Interceptor
	opts        twirp.ClientOptions
}

// NewWorkflowServiceProtobufClient creates a Protobuf client that implements the WorkflowService interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewWorkflowServiceProtobufClient(baseURL string, client HTTPClient, opts ...twirp.ClientOption) WorkflowService {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	// Using ReadOpt allows backwards and forwads compatibility with new options in the future
	literalURLs := false
	_ = clientOpts.ReadOpt("literalURLs", &literalURLs)
	var pathPrefix string
	if ok := clientOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	// Build method URLs: <baseURL>[<prefix>]/<package>.<Service>/<Method>
	serviceURL := sanitizeBaseURL(baseURL)
	serviceURL += baseServicePath(pathPrefix, "workflow", "WorkflowService")
	urls := [9]string{
		serviceURL + "CreateWorkflow",
		serviceURL + "GetWorkflow",
		serviceURL + "UpdateWorkflow",
		serviceURL + "DeleteWorkflow",
		serviceURL + "ListWorkflows",
		serviceURL + "ExecuteWorkflow",
		serviceURL + "GetWorkflowExecution",
		serviceURL + "ListWorkflowExecutions",
		serviceURL + "CancelWorkflowExecution",
	}

	return &workflowServiceProtobufClient{
		client:      client,
		urls:        urls,
		interceptor: twirp.ChainInterceptors(clientOpts.Interceptors...),
		opts:        clientOpts,
	}
}

func (c *workflowServiceProtobufClient) CreateWorkflow(ctx context.Context, in *CreateWorkflowRequest) (*WorkflowResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "workflow")
	ctx = ctxsetters.WithServiceName(ctx, "WorkflowService")
	ctx = ctxsetters.WithMethodName(ctx, "CreateWorkflow")
	caller := c.callCreateWorkflow
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *CreateWorkflowRequest) (*WorkflowResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CreateWorkflowRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CreateWorkflowRequest) when calling interceptor")
					}
					return c.callCreateWorkflow(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*WorkflowResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*WorkflowResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *workflowServiceProtobufClient) callCreateWorkflow(ctx context.Context, in *CreateWorkflowRequest) (*WorkflowResponse, error) {
	out := new(WorkflowResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *workflowServiceProtobufClient) GetWorkflow(ctx context.Context, in *GetWorkflowRequest) (*WorkflowResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "workflow")
	ctx = ctxsetters.WithServiceName(ctx, "WorkflowService")
	ctx = ctxsetters.WithMethodName(ctx, "GetWorkflow")
	caller := c.callGetWorkflow
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetWorkflowRequest) (*WorkflowResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetWorkflowRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetWorkflowRequest) when calling interceptor")
					}
					return c.callGetWorkflow(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*WorkflowResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*WorkflowResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *workflowServiceProtobufClient) callGetWorkflow(ctx context.Context, in *GetWorkflowRequest) (*WorkflowResponse, error) {
	out := new(WorkflowResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[1], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *workflowServiceProtobufClient) UpdateWorkflow(ctx context.Context, in *UpdateWorkflowRequest) (*WorkflowResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "workflow")
	ctx = ctxsetters.WithServiceName(ctx, "WorkflowService")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateWorkflow")
	caller := c.callUpdateWorkflow
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UpdateWorkflowRequest) (*WorkflowResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UpdateWorkflowRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UpdateWorkflowRequest) when calling interceptor")
					}
					return c.callUpdateWorkflow(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*WorkflowResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*WorkflowResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *workflowServiceProtobufClient) callUpdateWorkflow(ctx context.Context, in *UpdateWorkflowRequest) (*WorkflowResponse, error) {
	out := new(WorkflowResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[2], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *workflowServiceProtobufClient) DeleteWorkflow(ctx context.Context, in *DeleteWorkflowRequest) (*ResponseStatus, error) {
	ctx = ctxsetters.WithPackageName(ctx, "workflow")
	ctx = ctxsetters.WithServiceName(ctx, "WorkflowService")
	ctx = ctxsetters.WithMethodName(ctx, "DeleteWorkflow")
	caller := c.callDeleteWorkflow
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *DeleteWorkflowRequest) (*ResponseStatus, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*DeleteWorkflowRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*DeleteWorkflowRequest) when calling interceptor")
					}
					return c.callDeleteWorkflow(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ResponseStatus)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ResponseStatus) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *workflowServiceProtobufClient) callDeleteWorkflow(ctx context.Context, in *DeleteWorkflowRequest) (*ResponseStatus, error) {
	out := new(ResponseStatus)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[3], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *workflowServiceProtobufClient) ListWorkflows(ctx context.Context, in *ListWorkflowsRequest) (*ListWorkflowsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "workflow")
	ctx = ctxsetters.WithServiceName(ctx, "WorkflowService")
	ctx = ctxsetters.WithMethodName(ctx, "ListWorkflows")
	caller := c.callListWorkflows
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ListWorkflowsRequest) (*ListWorkflowsResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListWorkflowsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListWorkflowsRequest) when calling interceptor")
					}
					return c.callListWorkflows(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListWorkflowsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListWorkflowsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *workflowServiceProtobufClient) callListWorkflows(ctx context.Context, in *ListWorkflowsRequest) (*ListWorkflowsResponse, error) {
	out := new(ListWorkflowsResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[4], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *workflowServiceProtobufClient) ExecuteWorkflow(ctx context.Context, in *ExecuteWorkflowRequest) (*ExecuteWorkflowResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "workflow")
	ctx = ctxsetters.WithServiceName(ctx, "WorkflowService")
	ctx = ctxsetters.WithMethodName(ctx, "ExecuteWorkflow")
	caller := c.callExecuteWorkflow
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ExecuteWorkflowRequest) (*ExecuteWorkflowResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ExecuteWorkflowRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ExecuteWorkflowRequest) when calling interceptor")
					}
					return c.callExecuteWorkflow(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ExecuteWorkflowResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ExecuteWorkflowResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *workflowServiceProtobufClient) callExecuteWorkflow(ctx context.Context, in *ExecuteWorkflowRequest) (*ExecuteWorkflowResponse, error) {
	out := new(ExecuteWorkflowResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[5], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *workflowServiceProtobufClient) GetWorkflowExecution(ctx context.Context, in *GetWorkflowExecutionRequest) (*WorkflowExecutionResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "workflow")
	ctx = ctxsetters.WithServiceName(ctx, "WorkflowService")
	ctx = ctxsetters.WithMethodName(ctx, "GetWorkflowExecution")
	caller := c.callGetWorkflowExecution
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetWorkflowExecutionRequest) (*WorkflowExecutionResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetWorkflowExecutionRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetWorkflowExecutionRequest) when calling interceptor")
					}
					return c.callGetWorkflowExecution(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*WorkflowExecutionResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*WorkflowExecutionResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *workflowServiceProtobufClient) callGetWorkflowExecution(ctx context.Context, in *GetWorkflowExecutionRequest) (*WorkflowExecutionResponse, error) {
	out := new(WorkflowExecutionResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[6], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *workflowServiceProtobufClient) ListWorkflowExecutions(ctx context.Context, in *ListWorkflowExecutionsRequest) (*ListWorkflowExecutionsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "workflow")
	ctx = ctxsetters.WithServiceName(ctx, "WorkflowService")
	ctx = ctxsetters.WithMethodName(ctx, "ListWorkflowExecutions")
	caller := c.callListWorkflowExecutions
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ListWorkflowExecutionsRequest) (*ListWorkflowExecutionsResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListWorkflowExecutionsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListWorkflowExecutionsRequest) when calling interceptor")
					}
					return c.callListWorkflowExecutions(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListWorkflowExecutionsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListWorkflowExecutionsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *workflowServiceProtobufClient) callListWorkflowExecutions(ctx context.Context, in *ListWorkflowExecutionsRequest) (*ListWorkflowExecutionsResponse, error) {
	out := new(ListWorkflowExecutionsResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[7], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *workflowServiceProtobufClient) CancelWorkflowExecution(ctx context.Context, in *CancelWorkflowExecutionRequest) (*ResponseStatus, error) {
	ctx = ctxsetters.WithPackageName(ctx, "workflow")
	ctx = ctxsetters.WithServiceName(ctx, "WorkflowService")
	ctx = ctxsetters.WithMethodName(ctx, "CancelWorkflowExecution")
	caller := c.callCancelWorkflowExecution
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *CancelWorkflowExecutionRequest) (*ResponseStatus, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CancelWorkflowExecutionRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CancelWorkflowExecutionRequest) when calling interceptor")
					}
					return c.callCancelWorkflowExecution(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ResponseStatus)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ResponseStatus) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *workflowServiceProtobufClient) callCancelWorkflowExecution(ctx context.Context, in *CancelWorkflowExecutionRequest) (*ResponseStatus, error) {
	out := new(ResponseStatus)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[8], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// ===========================
// WorkflowService JSON Client
// ===========================

type workflowServiceJSONClient struct {
	client      HTTPClient
	urls        [9]string
	interceptor twirp.Interceptor
	opts        twirp.ClientOptions
}

// NewWorkflowServiceJSONClient creates a JSON client that implements the WorkflowService interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewWorkflowServiceJSONClient(baseURL string, client HTTPClient, opts ...twirp.ClientOption) WorkflowService {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	// Using ReadOpt allows backwards and forwads compatibility with new options in the future
	literalURLs := false
	_ = clientOpts.ReadOpt("literalURLs", &literalURLs)
	var pathPrefix string
	if ok := clientOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	// Build method URLs: <baseURL>[<prefix>]/<package>.<Service>/<Method>
	serviceURL := sanitizeBaseURL(baseURL)
	serviceURL += baseServicePath(pathPrefix, "workflow", "WorkflowService")
	urls := [9]string{
		serviceURL + "CreateWorkflow",
		serviceURL + "GetWorkflow",
		serviceURL + "UpdateWorkflow",
		serviceURL + "DeleteWorkflow",
		serviceURL + "ListWorkflows",
		serviceURL + "ExecuteWorkflow",
		serviceURL + "GetWorkflowExecution",
		serviceURL + "ListWorkflowExecutions",
		serviceURL + "CancelWorkflowExecution",
	}

	return &workflowServiceJSONClient{
		client:      client,
		urls:        urls,
		interceptor: twirp.ChainInterceptors(clientOpts.Interceptors...),
		opts:        clientOpts,
	}
}

func (c *workflowServiceJSONClient) CreateWorkflow(ctx context.Context, in *CreateWorkflowRequest) (*WorkflowResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "workflow")
	ctx = ctxsetters.WithServiceName(ctx, "WorkflowService")
	ctx = ctxsetters.WithMethodName(ctx, "CreateWorkflow")
	caller := c.callCreateWorkflow
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *CreateWorkflowRequest) (*WorkflowResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CreateWorkflowRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CreateWorkflowRequest) when calling interceptor")
					}
					return c.callCreateWorkflow(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*WorkflowResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*WorkflowResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *workflowServiceJSONClient) callCreateWorkflow(ctx context.Context, in *CreateWorkflowRequest) (*WorkflowResponse, error) {
	out := new(WorkflowResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *workflowServiceJSONClient) GetWorkflow(ctx context.Context, in *GetWorkflowRequest) (*WorkflowResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "workflow")
	ctx = ctxsetters.WithServiceName(ctx, "WorkflowService")
	ctx = ctxsetters.WithMethodName(ctx, "GetWorkflow")
	caller := c.callGetWorkflow
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetWorkflowRequest) (*WorkflowResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetWorkflowRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetWorkflowRequest) when calling interceptor")
					}
					return c.callGetWorkflow(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*WorkflowResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*WorkflowResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *workflowServiceJSONClient) callGetWorkflow(ctx context.Context, in *GetWorkflowRequest) (*WorkflowResponse, error) {
	out := new(WorkflowResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[1], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *workflowServiceJSONClient) UpdateWorkflow(ctx context.Context, in *UpdateWorkflowRequest) (*WorkflowResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "workflow")
	ctx = ctxsetters.WithServiceName(ctx, "WorkflowService")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateWorkflow")
	caller := c.callUpdateWorkflow
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UpdateWorkflowRequest) (*WorkflowResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UpdateWorkflowRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UpdateWorkflowRequest) when calling interceptor")
					}
					return c.callUpdateWorkflow(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*WorkflowResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*WorkflowResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *workflowServiceJSONClient) callUpdateWorkflow(ctx context.Context, in *UpdateWorkflowRequest) (*WorkflowResponse, error) {
	out := new(WorkflowResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[2], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *workflowServiceJSONClient) DeleteWorkflow(ctx context.Context, in *DeleteWorkflowRequest) (*ResponseStatus, error) {
	ctx = ctxsetters.WithPackageName(ctx, "workflow")
	ctx = ctxsetters.WithServiceName(ctx, "WorkflowService")
	ctx = ctxsetters.WithMethodName(ctx, "DeleteWorkflow")
	caller := c.callDeleteWorkflow
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *DeleteWorkflowRequest) (*ResponseStatus, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*DeleteWorkflowRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*DeleteWorkflowRequest) when calling interceptor")
					}
					return c.callDeleteWorkflow(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ResponseStatus)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ResponseStatus) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *workflowServiceJSONClient) callDeleteWorkflow(ctx context.Context, in *DeleteWorkflowRequest) (*ResponseStatus, error) {
	out := new(ResponseStatus)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[3], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *workflowServiceJSONClient) ListWorkflows(ctx context.Context, in *ListWorkflowsRequest) (*ListWorkflowsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "workflow")
	ctx = ctxsetters.WithServiceName(ctx, "WorkflowService")
	ctx = ctxsetters.WithMethodName(ctx, "ListWorkflows")
	caller := c.callListWorkflows
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ListWorkflowsRequest) (*ListWorkflowsResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListWorkflowsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListWorkflowsRequest) when calling interceptor")
					}
					return c.callListWorkflows(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListWorkflowsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListWorkflowsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *workflowServiceJSONClient) callListWorkflows(ctx context.Context, in *ListWorkflowsRequest) (*ListWorkflowsResponse, error) {
	out := new(ListWorkflowsResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[4], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *workflowServiceJSONClient) ExecuteWorkflow(ctx context.Context, in *ExecuteWorkflowRequest) (*ExecuteWorkflowResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "workflow")
	ctx = ctxsetters.WithServiceName(ctx, "WorkflowService")
	ctx = ctxsetters.WithMethodName(ctx, "ExecuteWorkflow")
	caller := c.callExecuteWorkflow
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ExecuteWorkflowRequest) (*ExecuteWorkflowResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ExecuteWorkflowRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ExecuteWorkflowRequest) when calling interceptor")
					}
					return c.callExecuteWorkflow(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ExecuteWorkflowResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ExecuteWorkflowResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *workflowServiceJSONClient) callExecuteWorkflow(ctx context.Context, in *ExecuteWorkflowRequest) (*ExecuteWorkflowResponse, error) {
	out := new(ExecuteWorkflowResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[5], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *workflowServiceJSONClient) GetWorkflowExecution(ctx context.Context, in *GetWorkflowExecutionRequest) (*WorkflowExecutionResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "workflow")
	ctx = ctxsetters.WithServiceName(ctx, "WorkflowService")
	ctx = ctxsetters.WithMethodName(ctx, "GetWorkflowExecution")
	caller := c.callGetWorkflowExecution
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetWorkflowExecutionRequest) (*WorkflowExecutionResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetWorkflowExecutionRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetWorkflowExecutionRequest) when calling interceptor")
					}
					return c.callGetWorkflowExecution(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*WorkflowExecutionResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*WorkflowExecutionResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *workflowServiceJSONClient) callGetWorkflowExecution(ctx context.Context, in *GetWorkflowExecutionRequest) (*WorkflowExecutionResponse, error) {
	out := new(WorkflowExecutionResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[6], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *workflowServiceJSONClient) ListWorkflowExecutions(ctx context.Context, in *ListWorkflowExecutionsRequest) (*ListWorkflowExecutionsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "workflow")
	ctx = ctxsetters.WithServiceName(ctx, "WorkflowService")
	ctx = ctxsetters.WithMethodName(ctx, "ListWorkflowExecutions")
	caller := c.callListWorkflowExecutions
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ListWorkflowExecutionsRequest) (*ListWorkflowExecutionsResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListWorkflowExecutionsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListWorkflowExecutionsRequest) when calling interceptor")
					}
					return c.callListWorkflowExecutions(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListWorkflowExecutionsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListWorkflowExecutionsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *workflowServiceJSONClient) callListWorkflowExecutions(ctx context.Context, in *ListWorkflowExecutionsRequest) (*ListWorkflowExecutionsResponse, error) {
	out := new(ListWorkflowExecutionsResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[7], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *workflowServiceJSONClient) CancelWorkflowExecution(ctx context.Context, in *CancelWorkflowExecutionRequest) (*ResponseStatus, error) {
	ctx = ctxsetters.WithPackageName(ctx, "workflow")
	ctx = ctxsetters.WithServiceName(ctx, "WorkflowService")
	ctx = ctxsetters.WithMethodName(ctx, "CancelWorkflowExecution")
	caller := c.callCancelWorkflowExecution
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *CancelWorkflowExecutionRequest) (*ResponseStatus, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CancelWorkflowExecutionRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CancelWorkflowExecutionRequest) when calling interceptor")
					}
					return c.callCancelWorkflowExecution(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ResponseStatus)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ResponseStatus) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *workflowServiceJSONClient) callCancelWorkflowExecution(ctx context.Context, in *CancelWorkflowExecutionRequest) (*ResponseStatus, error) {
	out := new(ResponseStatus)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[8], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// ==============================
// WorkflowService Server Handler
// ==============================

type workflowServiceServer struct {
	WorkflowService
	interceptor      twirp.Interceptor
	hooks            *twirp.ServerHooks
	pathPrefix       string // prefix for routing
	jsonSkipDefaults bool   // do not include unpopulated fields (default values) in the response
	jsonCamelCase    bool   // JSON fields are serialized as lowerCamelCase rather than keeping the original proto names
}

// NewWorkflowServiceServer builds a TwirpServer that can be used as an http.Handler to handle
// HTTP requests that are routed to the right method in the provided svc implementation.
// The opts are twirp.ServerOption modifiers, for example twirp.WithServerHooks(hooks).
func NewWorkflowServiceServer(svc WorkflowService, opts ...interface{}) TwirpServer {
	serverOpts := newServerOpts(opts)

	// Using ReadOpt allows backwards and forwads compatibility with new options in the future
	jsonSkipDefaults := false
	_ = serverOpts.ReadOpt("jsonSkipDefaults", &jsonSkipDefaults)
	jsonCamelCase := false
	_ = serverOpts.ReadOpt("jsonCamelCase", &jsonCamelCase)
	var pathPrefix string
	if ok := serverOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	return &workflowServiceServer{
		WorkflowService:  svc,
		hooks:            serverOpts.Hooks,
		interceptor:      twirp.ChainInterceptors(serverOpts.Interceptors...),
		pathPrefix:       pathPrefix,
		jsonSkipDefaults: jsonSkipDefaults,
		jsonCamelCase:    jsonCamelCase,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *workflowServiceServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// handleRequestBodyError is used to handle error when the twirp server cannot read request
func (s *workflowServiceServer) handleRequestBodyError(ctx context.Context, resp http.ResponseWriter, msg string, err error) {
	if context.Canceled == ctx.Err() {
		s.writeError(ctx, resp, twirp.NewError(twirp.Canceled, "failed to read request: context canceled"))
		return
	}
	if context.DeadlineExceeded == ctx.Err() {
		s.writeError(ctx, resp, twirp.NewError(twirp.DeadlineExceeded, "failed to read request: deadline exceeded"))
		return
	}
	s.writeError(ctx, resp, twirp.WrapError(malformedRequestError(msg), err))
}

// WorkflowServicePathPrefix is a convenience constant that may identify URL paths.
// Should be used with caution, it only matches routes generated by Twirp Go clients,
// with the default "/twirp" prefix and default CamelCase service and method names.
// More info: https://twitchtv.github.io/twirp/docs/routing.html
const WorkflowServicePathPrefix = "/twirp/workflow.WorkflowService/"

func (s *workflowServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "workflow")
	ctx = ctxsetters.WithServiceName(ctx, "WorkflowService")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}

	// Verify path format: [<prefix>]/<package>.<Service>/<Method>
	prefix, pkgService, method := parseTwirpPath(req.URL.Path)
	if pkgService != "workflow.WorkflowService" {
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}
	if prefix != s.pathPrefix {
		msg := fmt.Sprintf("invalid path prefix %q, expected %q, on path %q", prefix, s.pathPrefix, req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}

	switch method {
	case "CreateWorkflow":
		s.serveCreateWorkflow(ctx, resp, req)
		return
	case "GetWorkflow":
		s.serveGetWorkflow(ctx, resp, req)
		return
	case "UpdateWorkflow":
		s.serveUpdateWorkflow(ctx, resp, req)
		return
	case "DeleteWorkflow":
		s.serveDeleteWorkflow(ctx, resp, req)
		return
	case "ListWorkflows":
		s.serveListWorkflows(ctx, resp, req)
		return
	case "ExecuteWorkflow":
		s.serveExecuteWorkflow(ctx, resp, req)
		return
	case "GetWorkflowExecution":
		s.serveGetWorkflowExecution(ctx, resp, req)
		return
	case "ListWorkflowExecutions":
		s.serveListWorkflowExecutions(ctx, resp, req)
		return
	case "CancelWorkflowExecution":
		s.serveCancelWorkflowExecution(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}
}

func (s *workflowServiceServer) serveCreateWorkflow(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveCreateWorkflowJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveCreateWorkflowProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *workflowServiceServer) serveCreateWorkflowJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreateWorkflow")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(CreateWorkflowRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.WorkflowService.CreateWorkflow
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *CreateWorkflowRequest) (*WorkflowResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CreateWorkflowRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CreateWorkflowRequest) when calling interceptor")
					}
					return s.WorkflowService.CreateWorkflow(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*WorkflowResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*WorkflowResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *WorkflowResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *WorkflowResponse and nil error while calling CreateWorkflow. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *workflowServiceServer) serveCreateWorkflowProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreateWorkflow")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(CreateWorkflowRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.WorkflowService.CreateWorkflow
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *CreateWorkflowRequest) (*WorkflowResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CreateWorkflowRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CreateWorkflowRequest) when calling interceptor")
					}
					return s.WorkflowService.CreateWorkflow(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*WorkflowResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*WorkflowResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *WorkflowResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *WorkflowResponse and nil error while calling CreateWorkflow. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *workflowServiceServer) serveGetWorkflow(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetWorkflowJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetWorkflowProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *workflowServiceServer) serveGetWorkflowJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetWorkflow")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(GetWorkflowRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.WorkflowService.GetWorkflow
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetWorkflowRequest) (*WorkflowResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetWorkflowRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetWorkflowRequest) when calling interceptor")
					}
					return s.WorkflowService.GetWorkflow(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*WorkflowResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*WorkflowResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *WorkflowResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *WorkflowResponse and nil error while calling GetWorkflow. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *workflowServiceServer) serveGetWorkflowProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetWorkflow")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(GetWorkflowRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.WorkflowService.GetWorkflow
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetWorkflowRequest) (*WorkflowResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetWorkflowRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetWorkflowRequest) when calling interceptor")
					}
					return s.WorkflowService.GetWorkflow(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*WorkflowResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*WorkflowResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *WorkflowResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *WorkflowResponse and nil error while calling GetWorkflow. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *workflowServiceServer) serveUpdateWorkflow(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveUpdateWorkflowJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveUpdateWorkflowProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *workflowServiceServer) serveUpdateWorkflowJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateWorkflow")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(UpdateWorkflowRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.WorkflowService.UpdateWorkflow
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UpdateWorkflowRequest) (*WorkflowResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UpdateWorkflowRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UpdateWorkflowRequest) when calling interceptor")
					}
					return s.WorkflowService.UpdateWorkflow(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*WorkflowResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*WorkflowResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *WorkflowResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *WorkflowResponse and nil error while calling UpdateWorkflow. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *workflowServiceServer) serveUpdateWorkflowProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateWorkflow")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(UpdateWorkflowRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.WorkflowService.UpdateWorkflow
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UpdateWorkflowRequest) (*WorkflowResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UpdateWorkflowRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UpdateWorkflowRequest) when calling interceptor")
					}
					return s.WorkflowService.UpdateWorkflow(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*WorkflowResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*WorkflowResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *WorkflowResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *WorkflowResponse and nil error while calling UpdateWorkflow. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *workflowServiceServer) serveDeleteWorkflow(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveDeleteWorkflowJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveDeleteWorkflowProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *workflowServiceServer) serveDeleteWorkflowJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "DeleteWorkflow")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(DeleteWorkflowRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.WorkflowService.DeleteWorkflow
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *DeleteWorkflowRequest) (*ResponseStatus, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*DeleteWorkflowRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*DeleteWorkflowRequest) when calling interceptor")
					}
					return s.WorkflowService.DeleteWorkflow(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ResponseStatus)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ResponseStatus) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ResponseStatus
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ResponseStatus and nil error while calling DeleteWorkflow. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *workflowServiceServer) serveDeleteWorkflowProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "DeleteWorkflow")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(DeleteWorkflowRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.WorkflowService.DeleteWorkflow
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *DeleteWorkflowRequest) (*ResponseStatus, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*DeleteWorkflowRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*DeleteWorkflowRequest) when calling interceptor")
					}
					return s.WorkflowService.DeleteWorkflow(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ResponseStatus)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ResponseStatus) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ResponseStatus
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ResponseStatus and nil error while calling DeleteWorkflow. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *workflowServiceServer) serveListWorkflows(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveListWorkflowsJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveListWorkflowsProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *workflowServiceServer) serveListWorkflowsJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ListWorkflows")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(ListWorkflowsRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.WorkflowService.ListWorkflows
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ListWorkflowsRequest) (*ListWorkflowsResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListWorkflowsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListWorkflowsRequest) when calling interceptor")
					}
					return s.WorkflowService.ListWorkflows(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListWorkflowsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListWorkflowsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ListWorkflowsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ListWorkflowsResponse and nil error while calling ListWorkflows. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *workflowServiceServer) serveListWorkflowsProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ListWorkflows")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(ListWorkflowsRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.WorkflowService.ListWorkflows
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ListWorkflowsRequest) (*ListWorkflowsResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListWorkflowsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListWorkflowsRequest) when calling interceptor")
					}
					return s.WorkflowService.ListWorkflows(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListWorkflowsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListWorkflowsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ListWorkflowsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ListWorkflowsResponse and nil error while calling ListWorkflows. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *workflowServiceServer) serveExecuteWorkflow(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveExecuteWorkflowJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveExecuteWorkflowProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *workflowServiceServer) serveExecuteWorkflowJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ExecuteWorkflow")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(ExecuteWorkflowRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.WorkflowService.ExecuteWorkflow
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ExecuteWorkflowRequest) (*ExecuteWorkflowResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ExecuteWorkflowRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ExecuteWorkflowRequest) when calling interceptor")
					}
					return s.WorkflowService.ExecuteWorkflow(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ExecuteWorkflowResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ExecuteWorkflowResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ExecuteWorkflowResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ExecuteWorkflowResponse and nil error while calling ExecuteWorkflow. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *workflowServiceServer) serveExecuteWorkflowProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ExecuteWorkflow")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(ExecuteWorkflowRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.WorkflowService.ExecuteWorkflow
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ExecuteWorkflowRequest) (*ExecuteWorkflowResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ExecuteWorkflowRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ExecuteWorkflowRequest) when calling interceptor")
					}
					return s.WorkflowService.ExecuteWorkflow(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ExecuteWorkflowResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ExecuteWorkflowResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ExecuteWorkflowResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ExecuteWorkflowResponse and nil error while calling ExecuteWorkflow. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *workflowServiceServer) serveGetWorkflowExecution(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetWorkflowExecutionJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetWorkflowExecutionProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *workflowServiceServer) serveGetWorkflowExecutionJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetWorkflowExecution")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(GetWorkflowExecutionRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.WorkflowService.GetWorkflowExecution
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetWorkflowExecutionRequest) (*WorkflowExecutionResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetWorkflowExecutionRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetWorkflowExecutionRequest) when calling interceptor")
					}
					return s.WorkflowService.GetWorkflowExecution(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*WorkflowExecutionResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*WorkflowExecutionResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *WorkflowExecutionResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *WorkflowExecutionResponse and nil error while calling GetWorkflowExecution. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *workflowServiceServer) serveGetWorkflowExecutionProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetWorkflowExecution")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(GetWorkflowExecutionRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.WorkflowService.GetWorkflowExecution
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetWorkflowExecutionRequest) (*WorkflowExecutionResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetWorkflowExecutionRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetWorkflowExecutionRequest) when calling interceptor")
					}
					return s.WorkflowService.GetWorkflowExecution(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*WorkflowExecutionResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*WorkflowExecutionResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *WorkflowExecutionResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *WorkflowExecutionResponse and nil error while calling GetWorkflowExecution. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *workflowServiceServer) serveListWorkflowExecutions(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveListWorkflowExecutionsJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveListWorkflowExecutionsProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *workflowServiceServer) serveListWorkflowExecutionsJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ListWorkflowExecutions")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(ListWorkflowExecutionsRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.WorkflowService.ListWorkflowExecutions
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ListWorkflowExecutionsRequest) (*ListWorkflowExecutionsResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListWorkflowExecutionsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListWorkflowExecutionsRequest) when calling interceptor")
					}
					return s.WorkflowService.ListWorkflowExecutions(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListWorkflowExecutionsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListWorkflowExecutionsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ListWorkflowExecutionsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ListWorkflowExecutionsResponse and nil error while calling ListWorkflowExecutions. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *workflowServiceServer) serveListWorkflowExecutionsProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ListWorkflowExecutions")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(ListWorkflowExecutionsRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.WorkflowService.ListWorkflowExecutions
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ListWorkflowExecutionsRequest) (*ListWorkflowExecutionsResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListWorkflowExecutionsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListWorkflowExecutionsRequest) when calling interceptor")
					}
					return s.WorkflowService.ListWorkflowExecutions(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListWorkflowExecutionsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListWorkflowExecutionsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ListWorkflowExecutionsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ListWorkflowExecutionsResponse and nil error while calling ListWorkflowExecutions. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *workflowServiceServer) serveCancelWorkflowExecution(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveCancelWorkflowExecutionJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveCancelWorkflowExecutionProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *workflowServiceServer) serveCancelWorkflowExecutionJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CancelWorkflowExecution")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(CancelWorkflowExecutionRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.WorkflowService.CancelWorkflowExecution
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *CancelWorkflowExecutionRequest) (*ResponseStatus, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CancelWorkflowExecutionRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CancelWorkflowExecutionRequest) when calling interceptor")
					}
					return s.WorkflowService.CancelWorkflowExecution(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ResponseStatus)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ResponseStatus) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ResponseStatus
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ResponseStatus and nil error while calling CancelWorkflowExecution. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *workflowServiceServer) serveCancelWorkflowExecutionProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CancelWorkflowExecution")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(CancelWorkflowExecutionRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.WorkflowService.CancelWorkflowExecution
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *CancelWorkflowExecutionRequest) (*ResponseStatus, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CancelWorkflowExecutionRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CancelWorkflowExecutionRequest) when calling interceptor")
					}
					return s.WorkflowService.CancelWorkflowExecution(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ResponseStatus)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ResponseStatus) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ResponseStatus
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ResponseStatus and nil error while calling CancelWorkflowExecution. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *workflowServiceServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor7, 0
}

func (s *workflowServiceServer) ProtocGenTwirpVersion() string {
	return "v8.1.2"
}

// PathPrefix returns the base service path, in the form: "/<prefix>/<package>.<Service>/"
// that is everything in a Twirp route except for the <Method>. This can be used for routing,
// for example to identify the requests that are targeted to this service in a mux.
func (s *workflowServiceServer) PathPrefix() string {
	return baseServicePath(s.pathPrefix, "workflow", "WorkflowService")
}

var twirpFileDescriptor7 = []byte{
	// 1573 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x57, 0xcd, 0x72, 0xdb, 0x54,
	0x14, 0x1e, 0xd9, 0x96, 0x7f, 0x8e, 0x12, 0xa7, 0xdc, 0x69, 0x12, 0xa1, 0xd2, 0x26, 0x75, 0x1b,
	0xe2, 0x32, 0xad, 0x0d, 0xe9, 0x86, 0xb6, 0x94, 0x4e, 0xd2, 0xf4, 0xc7, 0x33, 0xed, 0xd0, 0x51,
	0x68, 0x99, 0x81, 0x85, 0x47, 0x96, 0x6e, 0x82, 0xa6, 0xb2, 0x24, 0x74, 0xaf, 0x92, 0xb8, 0x0f,
	0xc0, 0x92, 0x0d, 0x4b, 0x1e, 0x80, 0x67, 0x60, 0xc1, 0x13, 0xb0, 0x60, 0xc1, 0x92, 0x05, 0xc3,
	0x13, 0xf0, 0x0a, 0xcc, 0xbd, 0xfa, 0xb5, 0x2c, 0xd9, 0x8e, 0xd3, 0xc2, 0x2a, 0xbe, 0x47, 0xe7,
	0xdc, 0xdc, 0x7b, 0xce, 0x77, 0xbe, 0xf3, 0x5d, 0x68, 0x9e, 0x38, 0xde, 0xeb, 0x43, 0xcb, 0x39,
	0xe9, 0xb8, 0x9e, 0x43, 0x1d, 0x54, 0x8f, 0xd6, 0xca, 0x92, 0xee, 0x0c, 0x87, 0x8e, 0x1d, 0xd8,
	0x95, 0x8d, 0x23, 0xc7, 0x39, 0xb2, 0x70, 0x97, 0xaf, 0x06, 0xfe, 0x61, 0x97, 0x9a, 0x43, 0x4c,
	0xa8, 0x36, 0x74, 0x03, 0x87, 0xd6, 0x9f, 0x15, 0xa8, 0x7f, 0x15, 0xc6, 0xa2, 0x26, 0x94, 0x4c,
	0x43, 0x16, 0x36, 0x85, 0x76, 0x43, 0x2d, 0x99, 0x06, 0x42, 0x50, 0xb1, 0xb5, 0x21, 0x96, 0x4b,
	0xdc, 0xc2, 0x7f, 0xa3, 0x4d, 0x90, 0x0c, 0x4c, 0x74, 0xcf, 0x74, 0xa9, 0xe9, 0xd8, 0x72, 0x99,
	0x7f, 0x4a, 0x9b, 0xd0, 0x16, 0x34, 0x35, 0xd7, 0xb5, 0x4c, 0x5d, 0x63, 0xcb, 0xbe, 0x69, 0xc8,
	0x15, 0xee, 0xb4, 0x9c, 0xb2, 0xf6, 0x0c, 0x74, 0x19, 0x40, 0xf7, 0xb0, 0x46, 0xb1, 0xd1, 0x1f,
	0x8c, 0x64, 0x91, 0xbb, 0x34, 0x42, 0xcb, 0xde, 0x08, 0xc9, 0x50, 0xc3, 0xb6, 0x36, 0xb0, 0xb0,
	0x21, 0x57, 0x37, 0x85, 0x76, 0x5d, 0x8d, 0x96, 0xe8, 0x26, 0x88, 0x84, 0x62, 0x97, 0xc8, 0xb5,
	0xcd, 0x72, 0x5b, 0xda, 0x59, 0xeb, 0xc4, 0xb9, 0x88, 0x2e, 0x72, 0x40, 0xb1, 0xab, 0x06, 0x4e,
	0xe8, 0x01, 0x34, 0x8e, 0x35, 0xcf, 0x64, 0xa1, 0x44, 0xae, 0xf3, 0x88, 0xab, 0x93, 0x11, 0x9d,
	0x57, 0x91, 0xcf, 0x23, 0x9b, 0x7a, 0x23, 0x35, 0x89, 0x61, 0xe7, 0x74, 0xec, 0x3e, 0xf1, 0x75,
	0x1d, 0x13, 0x22, 0x37, 0x82, 0x73, 0x3a, 0xf6, 0x41, 0x60, 0x08, 0x3f, 0x1f, 0x6a, 0xa6, 0xe5,
	0x7b, 0x58, 0x86, 0xe8, 0xf3, 0xe3, 0xc0, 0x80, 0x36, 0x40, 0x1a, 0x6a, 0xa7, 0x7d, 0x0f, 0x53,
	0xcf, 0xc4, 0x44, 0x96, 0x36, 0x85, 0xb6, 0xa8, 0xc2, 0x50, 0x3b, 0x55, 0x03, 0x0b, 0xda, 0x86,
	0x15, 0x56, 0x13, 0xc7, 0xa7, 0x7d, 0x82, 0x75, 0xc7, 0x36, 0x88, 0xbc, 0xc4, 0x9d, 0x9a, 0xa1,
	0xf9, 0x20, 0xb0, 0xa2, 0x3b, 0x49, 0xbe, 0x34, 0x2a, 0x2f, 0x6f, 0x0a, 0x6d, 0x69, 0x47, 0xe9,
	0x04, 0xf5, 0xed, 0x44, 0xf5, 0xed, 0x7c, 0x19, 0xd5, 0x37, 0xce, 0xe5, 0x2e, 0x65, 0xa1, 0xbe,
	0x6b, 0x44, 0xa1, 0xcd, 0xd9, 0xa1, 0xa1, 0xf7, 0x2e, 0x55, 0x3e, 0x83, 0xe6, 0x78, 0x6a, 0xd0,
	0x05, 0x28, 0xbf, 0xc6, 0xa3, 0x10, 0x25, 0xec, 0x27, 0xba, 0x08, 0xe2, 0xb1, 0x66, 0xf9, 0x11,
	0x4e, 0x82, 0xc5, 0xdd, 0xd2, 0xa7, 0x42, 0xeb, 0x87, 0x0a, 0x2c, 0xa5, 0x8b, 0xf2, 0x96, 0x10,
	0x86, 0xa0, 0x42, 0x47, 0x2e, 0x0e, 0x71, 0xc5, 0x7f, 0xa3, 0xc7, 0x00, 0xae, 0xe6, 0x69, 0x43,
	0x4c, 0xb1, 0x47, 0x64, 0x91, 0x17, 0xfa, 0xc3, 0x7c, 0x68, 0x74, 0x5e, 0xc4, 0x8e, 0x41, 0xb5,
	0x53, 0x91, 0x99, 0x72, 0x57, 0xa7, 0x97, 0xbb, 0x96, 0x2d, 0x77, 0x4e, 0x35, 0xeb, 0xb9, 0xd5,
	0xdc, 0x82, 0x26, 0xc3, 0xc4, 0xa8, 0xaf, 0x51, 0x8a, 0x87, 0x2e, 0x0d, 0x90, 0x25, 0xaa, 0xcb,
	0xdc, 0xba, 0x1b, 0x1a, 0x59, 0x6a, 0x35, 0x32, 0xb2, 0x75, 0x0e, 0xac, 0xba, 0x1a, 0x2c, 0xd0,
	0x7d, 0xa8, 0x39, 0x3e, 0x75, 0x7d, 0xca, 0x00, 0xc5, 0x2e, 0x7a, 0xad, 0xe0, 0xa2, 0x5f, 0x04,
	0x5e, 0xc1, 0x2d, 0xa3, 0x18, 0xe5, 0x3e, 0xac, 0x64, 0x32, 0x70, 0x96, 0xa2, 0x2a, 0x77, 0x61,
	0x29, 0xbd, 0xef, 0x99, 0x00, 0xf1, 0x87, 0x08, 0xef, 0x45, 0x27, 0x7c, 0x74, 0x8a, 0x75, 0x9f,
	0xd7, 0x33, 0x8b, 0x8a, 0x0d, 0x90, 0xa2, 0xfb, 0x30, 0xfa, 0x08, 0x76, 0x81, 0xc8, 0xd4, 0x33,
	0xd0, 0x1a, 0x54, 0x09, 0xd5, 0xa8, 0x4f, 0x42, 0x74, 0x84, 0x2b, 0x56, 0x1d, 0x42, 0x35, 0x2f,
	0xe4, 0x94, 0x00, 0x1e, 0x8d, 0xd0, 0xb2, 0x37, 0xca, 0x61, 0x26, 0x31, 0x8f, 0x99, 0x1e, 0x40,
	0xd5, 0xb4, 0x79, 0x76, 0xab, 0x3c, 0xbb, 0xdb, 0x93, 0xd9, 0x8d, 0xcf, 0xde, 0xe9, 0xd9, 0x49,
	0x86, 0xc3, 0x30, 0xb4, 0x97, 0xd4, 0x27, 0xe0, 0xa8, 0xf6, 0xb4, 0x1d, 0x72, 0x8b, 0xc4, 0x72,
	0x88, 0x3d, 0xcf, 0xf1, 0x38, 0x7e, 0x1a, 0x6a, 0xb0, 0x60, 0x9d, 0x1c, 0x5d, 0x50, 0xa3, 0x1c,
	0x32, 0x33, 0x3a, 0x39, 0xf4, 0xde, 0xa5, 0xe8, 0x3e, 0xb0, 0xd1, 0xe0, 0x5a, 0x38, 0x0c, 0x86,
	0x99, 0xc1, 0x52, 0xec, 0x1f, 0x70, 0x48, 0x8a, 0x7e, 0xa4, 0xc5, 0xe9, 0x67, 0xe9, 0x0c, 0xf4,
	0x83, 0x6e, 0x45, 0x5c, 0xbf, 0xcc, 0xf3, 0xb8, 0x9e, 0xe4, 0x31, 0xce, 0x5f, 0x8a, 0xec, 0x95,
	0x3b, 0x20, 0xa5, 0xea, 0xf1, 0x9f, 0xa1, 0xfa, 0xc7, 0x0a, 0x2c, 0x8f, 0x9d, 0x07, 0xad, 0x43,
	0x8d, 0x9d, 0xa8, 0x1f, 0xc3, 0xba, 0xca, 0x96, 0xbd, 0x7c, 0xc2, 0x2b, 0x42, 0xb3, 0x0c, 0xb5,
	0x90, 0x1d, 0x38, 0x94, 0x45, 0x35, 0x5a, 0x26, 0xe0, 0x10, 0xd3, 0xe0, 0xb8, 0x97, 0xc1, 0xed,
	0xb5, 0x82, 0x6c, 0xe5, 0x62, 0xf6, 0xf3, 0x2c, 0x66, 0xaf, 0x17, 0x45, 0xe7, 0xe3, 0x75, 0x1c,
	0x99, 0xf5, 0xf3, 0x20, 0xb3, 0x71, 0x36, 0x64, 0x6e, 0x80, 0x64, 0xf8, 0x5e, 0xd0, 0xd2, 0x43,
	0xc2, 0x71, 0x5d, 0x56, 0x21, 0x32, 0x3d, 0xff, 0xdf, 0x50, 0xf1, 0x4f, 0x19, 0x56, 0x1f, 0xf2,
	0x26, 0x88, 0x7a, 0x5e, 0xc5, 0xdf, 0xf9, 0x98, 0xd0, 0x18, 0x04, 0x42, 0xf1, 0xd4, 0x2b, 0xcd,
	0xa3, 0xab, 0xca, 0xb3, 0x75, 0x55, 0x65, 0x8a, 0xae, 0x12, 0x0b, 0x74, 0x55, 0x75, 0x1e, 0x5d,
	0xf5, 0x2c, 0xad, 0xab, 0x02, 0xc4, 0x74, 0x92, 0x88, 0xdc, 0x7b, 0xcf, 0x2d, 0xb2, 0xea, 0xd3,
	0xa7, 0x6e, 0x63, 0x86, 0xc8, 0x82, 0x79, 0x44, 0x96, 0x94, 0x37, 0x96, 0xcf, 0x29, 0x77, 0xae,
	0x03, 0x7a, 0x82, 0x69, 0xb6, 0xda, 0x99, 0xe9, 0xd6, 0xf2, 0xe0, 0x42, 0xe2, 0x42, 0x5c, 0xc7,
	0x26, 0x18, 0x75, 0x62, 0x0a, 0x10, 0x38, 0xf8, 0xd7, 0x3a, 0xa1, 0x8c, 0x8f, 0x3c, 0x0e, 0xf8,
	0xd7, 0x98, 0x1a, 0x3a, 0x10, 0x2b, 0x7e, 0x7e, 0x0c, 0x69, 0x07, 0x4d, 0x96, 0x4b, 0x8d, 0x7d,
	0x5a, 0xbf, 0x94, 0x61, 0xf5, 0x25, 0x67, 0xd5, 0x19, 0xa7, 0x5b, 0x50, 0x91, 0xa5, 0x50, 0x55,
	0x29, 0x40, 0x95, 0x78, 0x66, 0x54, 0x55, 0xb3, 0xa8, 0xca, 0xbd, 0xc1, 0xdc, 0xa8, 0xaa, 0x4d,
	0x47, 0x55, 0x7d, 0x06, 0xaa, 0x1a, 0xf3, 0xa0, 0x0a, 0xde, 0x01, 0xaa, 0xb6, 0x61, 0x75, 0x1f,
	0x33, 0xb2, 0x9b, 0x05, 0xac, 0xdf, 0x05, 0xb8, 0xf8, 0xcc, 0x24, 0x31, 0x00, 0x49, 0xe4, 0x38,
	0xc9, 0x1c, 0x42, 0x1e, 0x73, 0xdc, 0x80, 0x0b, 0xa6, 0xad, 0x5b, 0xbe, 0x81, 0xfb, 0x86, 0x49,
	0x82, 0x6a, 0x96, 0x78, 0x35, 0x57, 0x42, 0xfb, 0x7e, 0x68, 0x66, 0x28, 0x71, 0xb5, 0x23, 0xcc,
	0xa1, 0x20, 0xaa, 0xfc, 0x37, 0xba, 0x04, 0x0d, 0xf6, 0xb7, 0x4f, 0xcc, 0x37, 0x38, 0x1c, 0x58,
	0x75, 0x66, 0x38, 0x30, 0xdf, 0x60, 0x3e, 0x10, 0x1d, 0x8f, 0x26, 0x4f, 0xbd, 0x2a, 0x5b, 0xee,
	0x8d, 0x58, 0x14, 0xff, 0xc0, 0xd0, 0x14, 0xbe, 0xf4, 0xea, 0xcc, 0xb0, 0x8f, 0x89, 0xde, 0xfa,
	0x4d, 0x80, 0xd5, 0xcc, 0x8d, 0x16, 0x6c, 0x98, 0x8f, 0xa1, 0x11, 0xc1, 0x88, 0xc8, 0x25, 0x0e,
	0xac, 0xbc, 0x8e, 0x49, 0x9c, 0x58, 0xf9, 0xa9, 0x43, 0x35, 0xab, 0xaf, 0x3b, 0xbe, 0x4d, 0xc3,
	0x9b, 0x02, 0x37, 0x3d, 0x64, 0x96, 0x38, 0x07, 0x95, 0xa2, 0x1c, 0x88, 0xe3, 0x39, 0x68, 0xfd,
	0x5a, 0x82, 0xb5, 0x60, 0x94, 0x4e, 0x94, 0x32, 0xa3, 0x78, 0x85, 0x09, 0xc5, 0x3b, 0x59, 0xc2,
	0x52, 0x01, 0xf9, 0xa7, 0x04, 0x70, 0x39, 0x2b, 0x80, 0xf7, 0x63, 0x85, 0x50, 0xe1, 0x29, 0xb8,
	0x99, 0x9d, 0xf1, 0x13, 0xcd, 0x95, 0x27, 0x15, 0xe2, 0x47, 0x89, 0x98, 0x7e, 0x94, 0x6c, 0x41,
	0x53, 0x77, 0x3c, 0x0f, 0x5b, 0xf1, 0x09, 0x83, 0xc7, 0xd3, 0x72, 0xca, 0xda, 0x33, 0xce, 0x31,
	0x8c, 0x5b, 0x3f, 0x97, 0x60, 0x7d, 0xe2, 0x98, 0x0b, 0xe2, 0xe1, 0x2a, 0x2c, 0xe1, 0x48, 0xd5,
	0x24, 0xd9, 0x94, 0x62, 0x5b, 0xcf, 0x48, 0xae, 0x59, 0x4e, 0x5f, 0x33, 0xc8, 0x30, 0xf5, 0x49,
	0xdf, 0xf7, 0xac, 0xd4, 0x13, 0x83, 0xfa, 0xe4, 0xa5, 0x67, 0xa1, 0xa7, 0x89, 0x8c, 0x12, 0xb3,
	0xf4, 0x55, 0x70, 0xf6, 0x82, 0x57, 0xda, 0x79, 0xa4, 0xc7, 0x2d, 0xb8, 0x94, 0x1a, 0x44, 0xb1,
	0x7c, 0x2b, 0x22, 0x8e, 0xef, 0x05, 0x78, 0x3f, 0xc7, 0x79, 0xc1, 0xd4, 0xde, 0x81, 0x46, 0x9c,
	0xc6, 0x70, 0x38, 0x5d, 0x9a, 0xf2, 0xfe, 0x51, 0x13, 0xef, 0xd6, 0xdf, 0x25, 0xb8, 0x9c, 0xee,
	0xf7, 0xd8, 0x89, 0xbc, 0xed, 0x46, 0x59, 0xf0, 0x05, 0xd9, 0x81, 0xca, 0xa1, 0xe7, 0x0c, 0x39,
	0xf2, 0xa7, 0x4b, 0x54, 0xee, 0x87, 0x3e, 0x82, 0x12, 0x75, 0x78, 0x23, 0x4c, 0xf7, 0x2e, 0x51,
	0x27, 0xe6, 0x93, 0x5a, 0x11, 0x9f, 0xd4, 0x8b, 0x39, 0xb5, 0x51, 0xcc, 0xa9, 0x90, 0xe1, 0xd4,
	0xbf, 0x04, 0xb8, 0x52, 0x94, 0xe3, 0x05, 0x2b, 0x7e, 0x0f, 0x20, 0xae, 0x61, 0xc4, 0xae, 0x53,
	0x4b, 0x9e, 0x72, 0x7f, 0x07, 0x3c, 0xfb, 0x14, 0xae, 0x3c, 0xd4, 0x6c, 0x1d, 0x5b, 0xf3, 0x36,
	0x00, 0x43, 0x83, 0x87, 0x35, 0x12, 0xeb, 0xee, 0x70, 0xb5, 0xf3, 0x53, 0x15, 0x56, 0x62, 0x99,
	0x82, 0xbd, 0x63, 0x53, 0xc7, 0xe8, 0x39, 0x34, 0xc7, 0xd5, 0x2d, 0xda, 0x98, 0xa1, 0x7b, 0x15,
	0x25, 0x67, 0xd2, 0x44, 0xb9, 0x7e, 0x02, 0x52, 0xaa, 0x55, 0xd1, 0x07, 0x89, 0xeb, 0xa4, 0x94,
	0x9c, 0xba, 0xd1, 0x73, 0x68, 0x8e, 0xeb, 0xa3, 0xf4, 0xb9, 0x72, 0x95, 0xd3, 0xd4, 0xed, 0x7a,
	0xd0, 0x1c, 0x57, 0x1d, 0xe9, 0xed, 0x72, 0xf5, 0x88, 0x52, 0x00, 0x13, 0xf4, 0x02, 0x96, 0xc7,
	0x86, 0x38, 0xba, 0x92, 0xec, 0x94, 0xa7, 0x57, 0x94, 0x8d, 0xc2, 0xef, 0xe1, 0xe1, 0x5e, 0xc1,
	0x4a, 0x86, 0x4c, 0xd1, 0xe6, 0xac, 0x51, 0xa6, 0x5c, 0x9d, 0xc9, 0xc4, 0x68, 0x00, 0x17, 0xf3,
	0x78, 0x13, 0x6d, 0xe5, 0x56, 0x25, 0x0b, 0x2b, 0xe5, 0xda, 0x34, 0xcc, 0x47, 0xff, 0xe3, 0x35,
	0xac, 0xe5, 0xb7, 0x1f, 0xda, 0xce, 0xbf, 0xf6, 0x04, 0x09, 0x2a, 0xed, 0xd9, 0x8e, 0xe1, 0x3f,
	0xfb, 0x06, 0xd6, 0x0b, 0x5a, 0x01, 0xa5, 0x36, 0x99, 0xde, 0x2d, 0x45, 0x75, 0xdd, 0xbb, 0xf1,
	0xf5, 0xf6, 0x91, 0x49, 0xbf, 0xf5, 0x07, 0xec, 0x7b, 0xf7, 0xc4, 0xb1, 0x0e, 0x47, 0x43, 0x8d,
	0x50, 0xec, 0x75, 0x4f, 0x1c, 0xe7, 0xf0, 0xf4, 0x76, 0xd7, 0x18, 0x74, 0x8f, 0xb0, 0xdd, 0x3d,
	0xfe, 0x64, 0x50, 0xe5, 0x9c, 0x77, 0xfb, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x06, 0x2f, 0x75,
	0xb9, 0xb8, 0x18, 0x00, 0x00,
}
