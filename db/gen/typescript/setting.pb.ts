// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: setting.proto
/* eslint-disable */

import type { ByteSource, PartialDeep } from "protoscript";
import * as protoscript from "protoscript";
import { JSONrequest, PBrequest } from "twirpscript";
// This is the minimum version supported by the current runtime.
// If this line fails typechecking, breaking changes have been introduced and this
// file needs to be regenerated by running `npx twirpscript`.
export { MIN_SUPPORTED_VERSION_0_0_56 } from "twirpscript";
import type { ClientConfiguration } from "twirpscript";
import * as common from "./common.pb";

//========================================//
//                 Types                  //
//========================================//

/**
 * Setting represents a configuration setting
 */
export interface Setting {
  id: string;
  key: string;
  value: protoscript.Value;
  valueType: string;
  applicationId: string;
  createdAt: protoscript.Timestamp;
  updatedAt: protoscript.Timestamp;
}

/**
 * Request to get a setting by key
 */
export interface GetSettingRequest {
  key: string;
  applicationId: string;
}

/**
 * Response containing a single setting
 */
export interface SettingResponse {
  status: common.ResponseStatus;
  setting: Setting;
}

/**
 * Request to get multiple settings by keys
 */
export interface GetSettingsRequest {
  keys: string[];
  applicationId: string;
}

/**
 * Response containing multiple settings
 */
export interface GetSettingsResponse {
  status: common.ResponseStatus;
  settings: Setting[];
}

/**
 * Request to set a setting value
 */
export interface SetSettingRequest {
  key: string;
  value: protoscript.Value;
  applicationId: string;
}

/**
 * Request to set multiple settings at once
 */
export interface SetSettingsRequest {
  settings: SetSettingsRequest.SettingUpdate[];
  applicationId: string;
}

export declare namespace SetSettingsRequest {
  export interface SettingUpdate {
    key: string;
    value: protoscript.Value;
  }
}

/**
 * Response from setting multiple settings
 */
export interface SetSettingsResponse {
  status: common.ResponseStatus;
  settings: Setting[];
}

/**
 * Request to delete a setting
 */
export interface DeleteSettingRequest {
  key: string;
  applicationId: string;
}

//========================================//
//     SettingService Protobuf Client     //
//========================================//

/**
 * Get a setting by key
 */
export async function GetSetting(
  getSettingRequest: GetSettingRequest,
  config?: ClientConfiguration,
): Promise<SettingResponse> {
  const response = await PBrequest(
    "/setting.SettingService/GetSetting",
    GetSettingRequest.encode(getSettingRequest),
    config,
  );
  return SettingResponse.decode(response);
}

/**
 * Get multiple settings by keys
 */
export async function GetSettings(
  getSettingsRequest: GetSettingsRequest,
  config?: ClientConfiguration,
): Promise<GetSettingsResponse> {
  const response = await PBrequest(
    "/setting.SettingService/GetSettings",
    GetSettingsRequest.encode(getSettingsRequest),
    config,
  );
  return GetSettingsResponse.decode(response);
}

/**
 * Set a setting value
 */
export async function SetSetting(
  setSettingRequest: SetSettingRequest,
  config?: ClientConfiguration,
): Promise<SettingResponse> {
  const response = await PBrequest(
    "/setting.SettingService/SetSetting",
    SetSettingRequest.encode(setSettingRequest),
    config,
  );
  return SettingResponse.decode(response);
}

/**
 * Set multiple settings at once
 */
export async function SetSettings(
  setSettingsRequest: SetSettingsRequest,
  config?: ClientConfiguration,
): Promise<SetSettingsResponse> {
  const response = await PBrequest(
    "/setting.SettingService/SetSettings",
    SetSettingsRequest.encode(setSettingsRequest),
    config,
  );
  return SetSettingsResponse.decode(response);
}

/**
 * Delete a setting
 */
export async function DeleteSetting(
  deleteSettingRequest: DeleteSettingRequest,
  config?: ClientConfiguration,
): Promise<common.ResponseStatus> {
  const response = await PBrequest(
    "/setting.SettingService/DeleteSetting",
    DeleteSettingRequest.encode(deleteSettingRequest),
    config,
  );
  return common.ResponseStatus.decode(response);
}

//========================================//
//       SettingService JSON Client       //
//========================================//

/**
 * Get a setting by key
 */
export async function GetSettingJSON(
  getSettingRequest: GetSettingRequest,
  config?: ClientConfiguration,
): Promise<SettingResponse> {
  const response = await JSONrequest(
    "/setting.SettingService/GetSetting",
    GetSettingRequestJSON.encode(getSettingRequest),
    config,
  );
  return SettingResponseJSON.decode(response);
}

/**
 * Get multiple settings by keys
 */
export async function GetSettingsJSON(
  getSettingsRequest: GetSettingsRequest,
  config?: ClientConfiguration,
): Promise<GetSettingsResponse> {
  const response = await JSONrequest(
    "/setting.SettingService/GetSettings",
    GetSettingsRequestJSON.encode(getSettingsRequest),
    config,
  );
  return GetSettingsResponseJSON.decode(response);
}

/**
 * Set a setting value
 */
export async function SetSettingJSON(
  setSettingRequest: SetSettingRequest,
  config?: ClientConfiguration,
): Promise<SettingResponse> {
  const response = await JSONrequest(
    "/setting.SettingService/SetSetting",
    SetSettingRequestJSON.encode(setSettingRequest),
    config,
  );
  return SettingResponseJSON.decode(response);
}

/**
 * Set multiple settings at once
 */
export async function SetSettingsJSON(
  setSettingsRequest: SetSettingsRequest,
  config?: ClientConfiguration,
): Promise<SetSettingsResponse> {
  const response = await JSONrequest(
    "/setting.SettingService/SetSettings",
    SetSettingsRequestJSON.encode(setSettingsRequest),
    config,
  );
  return SetSettingsResponseJSON.decode(response);
}

/**
 * Delete a setting
 */
export async function DeleteSettingJSON(
  deleteSettingRequest: DeleteSettingRequest,
  config?: ClientConfiguration,
): Promise<common.ResponseStatus> {
  const response = await JSONrequest(
    "/setting.SettingService/DeleteSetting",
    DeleteSettingRequestJSON.encode(deleteSettingRequest),
    config,
  );
  return common.ResponseStatusJSON.decode(response);
}

//========================================//
//             SettingService             //
//========================================//

export interface SettingService<Context = unknown> {
  /**
   * Get a setting by key
   */
  GetSetting: (
    getSettingRequest: GetSettingRequest,
    context: Context,
  ) => Promise<SettingResponse> | SettingResponse;
  /**
   * Get multiple settings by keys
   */
  GetSettings: (
    getSettingsRequest: GetSettingsRequest,
    context: Context,
  ) => Promise<GetSettingsResponse> | GetSettingsResponse;
  /**
   * Set a setting value
   */
  SetSetting: (
    setSettingRequest: SetSettingRequest,
    context: Context,
  ) => Promise<SettingResponse> | SettingResponse;
  /**
   * Set multiple settings at once
   */
  SetSettings: (
    setSettingsRequest: SetSettingsRequest,
    context: Context,
  ) => Promise<SetSettingsResponse> | SetSettingsResponse;
  /**
   * Delete a setting
   */
  DeleteSetting: (
    deleteSettingRequest: DeleteSettingRequest,
    context: Context,
  ) => Promise<common.ResponseStatus> | common.ResponseStatus;
}

export function createSettingService<Context>(
  service: SettingService<Context>,
) {
  return {
    name: "setting.SettingService",
    methods: {
      GetSetting: {
        name: "GetSetting",
        handler: service.GetSetting,
        input: { protobuf: GetSettingRequest, json: GetSettingRequestJSON },
        output: { protobuf: SettingResponse, json: SettingResponseJSON },
      },
      GetSettings: {
        name: "GetSettings",
        handler: service.GetSettings,
        input: { protobuf: GetSettingsRequest, json: GetSettingsRequestJSON },
        output: {
          protobuf: GetSettingsResponse,
          json: GetSettingsResponseJSON,
        },
      },
      SetSetting: {
        name: "SetSetting",
        handler: service.SetSetting,
        input: { protobuf: SetSettingRequest, json: SetSettingRequestJSON },
        output: { protobuf: SettingResponse, json: SettingResponseJSON },
      },
      SetSettings: {
        name: "SetSettings",
        handler: service.SetSettings,
        input: { protobuf: SetSettingsRequest, json: SetSettingsRequestJSON },
        output: {
          protobuf: SetSettingsResponse,
          json: SetSettingsResponseJSON,
        },
      },
      DeleteSetting: {
        name: "DeleteSetting",
        handler: service.DeleteSetting,
        input: {
          protobuf: DeleteSettingRequest,
          json: DeleteSettingRequestJSON,
        },
        output: {
          protobuf: common.ResponseStatus,
          json: common.ResponseStatusJSON,
        },
      },
    },
  } as const;
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const Setting = {
  /**
   * Serializes Setting to protobuf.
   */
  encode: function (msg: PartialDeep<Setting>): Uint8Array {
    return Setting._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes Setting from protobuf.
   */
  decode: function (bytes: ByteSource): Setting {
    return Setting._readMessage(
      Setting.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes Setting with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Setting>): Setting {
    return {
      id: "",
      key: "",
      value: protoscript.Value.initialize(),
      valueType: "",
      applicationId: "",
      createdAt: protoscript.Timestamp.initialize(),
      updatedAt: protoscript.Timestamp.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<Setting>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.id) {
      writer.writeString(1, msg.id);
    }
    if (msg.key) {
      writer.writeString(2, msg.key);
    }
    if (msg.value) {
      writer.writeMessage(3, msg.value, protoscript.Value._writeMessage);
    }
    if (msg.valueType) {
      writer.writeString(4, msg.valueType);
    }
    if (msg.applicationId) {
      writer.writeString(5, msg.applicationId);
    }
    if (msg.createdAt) {
      writer.writeMessage(
        14,
        msg.createdAt,
        protoscript.Timestamp._writeMessage,
      );
    }
    if (msg.updatedAt) {
      writer.writeMessage(
        15,
        msg.updatedAt,
        protoscript.Timestamp._writeMessage,
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Setting,
    reader: protoscript.BinaryReader,
  ): Setting {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readString();
          break;
        }
        case 2: {
          msg.key = reader.readString();
          break;
        }
        case 3: {
          reader.readMessage(msg.value, protoscript.Value._readMessage);
          break;
        }
        case 4: {
          msg.valueType = reader.readString();
          break;
        }
        case 5: {
          msg.applicationId = reader.readString();
          break;
        }
        case 14: {
          reader.readMessage(msg.createdAt, protoscript.Timestamp._readMessage);
          break;
        }
        case 15: {
          reader.readMessage(msg.updatedAt, protoscript.Timestamp._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const GetSettingRequest = {
  /**
   * Serializes GetSettingRequest to protobuf.
   */
  encode: function (msg: PartialDeep<GetSettingRequest>): Uint8Array {
    return GetSettingRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes GetSettingRequest from protobuf.
   */
  decode: function (bytes: ByteSource): GetSettingRequest {
    return GetSettingRequest._readMessage(
      GetSettingRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes GetSettingRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<GetSettingRequest>): GetSettingRequest {
    return {
      key: "",
      applicationId: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetSettingRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.key) {
      writer.writeString(1, msg.key);
    }
    if (msg.applicationId) {
      writer.writeString(2, msg.applicationId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetSettingRequest,
    reader: protoscript.BinaryReader,
  ): GetSettingRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.key = reader.readString();
          break;
        }
        case 2: {
          msg.applicationId = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const SettingResponse = {
  /**
   * Serializes SettingResponse to protobuf.
   */
  encode: function (msg: PartialDeep<SettingResponse>): Uint8Array {
    return SettingResponse._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes SettingResponse from protobuf.
   */
  decode: function (bytes: ByteSource): SettingResponse {
    return SettingResponse._readMessage(
      SettingResponse.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes SettingResponse with all fields set to their default value.
   */
  initialize: function (msg?: Partial<SettingResponse>): SettingResponse {
    return {
      status: common.ResponseStatus.initialize(),
      setting: Setting.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<SettingResponse>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.status) {
      writer.writeMessage(1, msg.status, common.ResponseStatus._writeMessage);
    }
    if (msg.setting) {
      writer.writeMessage(2, msg.setting, Setting._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: SettingResponse,
    reader: protoscript.BinaryReader,
  ): SettingResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.status, common.ResponseStatus._readMessage);
          break;
        }
        case 2: {
          reader.readMessage(msg.setting, Setting._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const GetSettingsRequest = {
  /**
   * Serializes GetSettingsRequest to protobuf.
   */
  encode: function (msg: PartialDeep<GetSettingsRequest>): Uint8Array {
    return GetSettingsRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes GetSettingsRequest from protobuf.
   */
  decode: function (bytes: ByteSource): GetSettingsRequest {
    return GetSettingsRequest._readMessage(
      GetSettingsRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes GetSettingsRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<GetSettingsRequest>): GetSettingsRequest {
    return {
      keys: [],
      applicationId: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetSettingsRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.keys?.length) {
      writer.writeRepeatedString(1, msg.keys);
    }
    if (msg.applicationId) {
      writer.writeString(2, msg.applicationId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetSettingsRequest,
    reader: protoscript.BinaryReader,
  ): GetSettingsRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.keys.push(reader.readString());
          break;
        }
        case 2: {
          msg.applicationId = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const GetSettingsResponse = {
  /**
   * Serializes GetSettingsResponse to protobuf.
   */
  encode: function (msg: PartialDeep<GetSettingsResponse>): Uint8Array {
    return GetSettingsResponse._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes GetSettingsResponse from protobuf.
   */
  decode: function (bytes: ByteSource): GetSettingsResponse {
    return GetSettingsResponse._readMessage(
      GetSettingsResponse.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes GetSettingsResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<GetSettingsResponse>,
  ): GetSettingsResponse {
    return {
      status: common.ResponseStatus.initialize(),
      settings: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetSettingsResponse>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.status) {
      writer.writeMessage(1, msg.status, common.ResponseStatus._writeMessage);
    }
    if (msg.settings?.length) {
      writer.writeRepeatedMessage(
        2,
        msg.settings as any,
        Setting._writeMessage,
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetSettingsResponse,
    reader: protoscript.BinaryReader,
  ): GetSettingsResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.status, common.ResponseStatus._readMessage);
          break;
        }
        case 2: {
          const m = Setting.initialize();
          reader.readMessage(m, Setting._readMessage);
          msg.settings.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const SetSettingRequest = {
  /**
   * Serializes SetSettingRequest to protobuf.
   */
  encode: function (msg: PartialDeep<SetSettingRequest>): Uint8Array {
    return SetSettingRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes SetSettingRequest from protobuf.
   */
  decode: function (bytes: ByteSource): SetSettingRequest {
    return SetSettingRequest._readMessage(
      SetSettingRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes SetSettingRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<SetSettingRequest>): SetSettingRequest {
    return {
      key: "",
      value: protoscript.Value.initialize(),
      applicationId: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<SetSettingRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.key) {
      writer.writeString(1, msg.key);
    }
    if (msg.value) {
      writer.writeMessage(2, msg.value, protoscript.Value._writeMessage);
    }
    if (msg.applicationId) {
      writer.writeString(4, msg.applicationId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: SetSettingRequest,
    reader: protoscript.BinaryReader,
  ): SetSettingRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.key = reader.readString();
          break;
        }
        case 2: {
          reader.readMessage(msg.value, protoscript.Value._readMessage);
          break;
        }
        case 4: {
          msg.applicationId = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const SetSettingsRequest = {
  /**
   * Serializes SetSettingsRequest to protobuf.
   */
  encode: function (msg: PartialDeep<SetSettingsRequest>): Uint8Array {
    return SetSettingsRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes SetSettingsRequest from protobuf.
   */
  decode: function (bytes: ByteSource): SetSettingsRequest {
    return SetSettingsRequest._readMessage(
      SetSettingsRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes SetSettingsRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<SetSettingsRequest>): SetSettingsRequest {
    return {
      settings: [],
      applicationId: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<SetSettingsRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.settings?.length) {
      writer.writeRepeatedMessage(
        1,
        msg.settings as any,
        SetSettingsRequest.SettingUpdate._writeMessage,
      );
    }
    if (msg.applicationId) {
      writer.writeString(2, msg.applicationId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: SetSettingsRequest,
    reader: protoscript.BinaryReader,
  ): SetSettingsRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = SetSettingsRequest.SettingUpdate.initialize();
          reader.readMessage(m, SetSettingsRequest.SettingUpdate._readMessage);
          msg.settings.push(m);
          break;
        }
        case 2: {
          msg.applicationId = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },

  SettingUpdate: {
    /**
     * Serializes SetSettingsRequest.SettingUpdate to protobuf.
     */
    encode: function (
      msg: PartialDeep<SetSettingsRequest.SettingUpdate>,
    ): Uint8Array {
      return SetSettingsRequest.SettingUpdate._writeMessage(
        msg,
        new protoscript.BinaryWriter(),
      ).getResultBuffer();
    },

    /**
     * Deserializes SetSettingsRequest.SettingUpdate from protobuf.
     */
    decode: function (bytes: ByteSource): SetSettingsRequest.SettingUpdate {
      return SetSettingsRequest.SettingUpdate._readMessage(
        SetSettingsRequest.SettingUpdate.initialize(),
        new protoscript.BinaryReader(bytes),
      );
    },

    /**
     * Initializes SetSettingsRequest.SettingUpdate with all fields set to their default value.
     */
    initialize: function (
      msg?: Partial<SetSettingsRequest.SettingUpdate>,
    ): SetSettingsRequest.SettingUpdate {
      return {
        key: "",
        value: protoscript.Value.initialize(),
        ...msg,
      };
    },

    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<SetSettingsRequest.SettingUpdate>,
      writer: protoscript.BinaryWriter,
    ): protoscript.BinaryWriter {
      if (msg.key) {
        writer.writeString(1, msg.key);
      }
      if (msg.value) {
        writer.writeMessage(2, msg.value, protoscript.Value._writeMessage);
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: SetSettingsRequest.SettingUpdate,
      reader: protoscript.BinaryReader,
    ): SetSettingsRequest.SettingUpdate {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.key = reader.readString();
            break;
          }
          case 2: {
            reader.readMessage(msg.value, protoscript.Value._readMessage);
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },
};

export const SetSettingsResponse = {
  /**
   * Serializes SetSettingsResponse to protobuf.
   */
  encode: function (msg: PartialDeep<SetSettingsResponse>): Uint8Array {
    return SetSettingsResponse._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes SetSettingsResponse from protobuf.
   */
  decode: function (bytes: ByteSource): SetSettingsResponse {
    return SetSettingsResponse._readMessage(
      SetSettingsResponse.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes SetSettingsResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<SetSettingsResponse>,
  ): SetSettingsResponse {
    return {
      status: common.ResponseStatus.initialize(),
      settings: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<SetSettingsResponse>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.status) {
      writer.writeMessage(1, msg.status, common.ResponseStatus._writeMessage);
    }
    if (msg.settings?.length) {
      writer.writeRepeatedMessage(
        2,
        msg.settings as any,
        Setting._writeMessage,
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: SetSettingsResponse,
    reader: protoscript.BinaryReader,
  ): SetSettingsResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.status, common.ResponseStatus._readMessage);
          break;
        }
        case 2: {
          const m = Setting.initialize();
          reader.readMessage(m, Setting._readMessage);
          msg.settings.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const DeleteSettingRequest = {
  /**
   * Serializes DeleteSettingRequest to protobuf.
   */
  encode: function (msg: PartialDeep<DeleteSettingRequest>): Uint8Array {
    return DeleteSettingRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes DeleteSettingRequest from protobuf.
   */
  decode: function (bytes: ByteSource): DeleteSettingRequest {
    return DeleteSettingRequest._readMessage(
      DeleteSettingRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes DeleteSettingRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<DeleteSettingRequest>,
  ): DeleteSettingRequest {
    return {
      key: "",
      applicationId: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<DeleteSettingRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.key) {
      writer.writeString(1, msg.key);
    }
    if (msg.applicationId) {
      writer.writeString(2, msg.applicationId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: DeleteSettingRequest,
    reader: protoscript.BinaryReader,
  ): DeleteSettingRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.key = reader.readString();
          break;
        }
        case 2: {
          msg.applicationId = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const SettingJSON = {
  /**
   * Serializes Setting to JSON.
   */
  encode: function (msg: PartialDeep<Setting>): string {
    return JSON.stringify(SettingJSON._writeMessage(msg));
  },

  /**
   * Deserializes Setting from JSON.
   */
  decode: function (json: string): Setting {
    return SettingJSON._readMessage(SettingJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes Setting with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Setting>): Setting {
    return {
      id: "",
      key: "",
      value: protoscript.ValueJSON.initialize(),
      valueType: "",
      applicationId: "",
      createdAt: protoscript.TimestampJSON.initialize(),
      updatedAt: protoscript.TimestampJSON.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: PartialDeep<Setting>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json["id"] = msg.id;
    }
    if (msg.key) {
      json["key"] = msg.key;
    }
    if (msg.value) {
      const _value_ = protoscript.ValueJSON._writeMessage(msg.value);
      if (Object.keys(_value_).length > 0) {
        json["value"] = _value_;
      }
    }
    if (msg.valueType) {
      json["valueType"] = msg.valueType;
    }
    if (msg.applicationId) {
      json["applicationId"] = msg.applicationId;
    }
    if (msg.createdAt && (msg.createdAt.seconds || msg.createdAt.nanos)) {
      json["createdAt"] = protoscript.serializeTimestamp(msg.createdAt);
    }
    if (msg.updatedAt && (msg.updatedAt.seconds || msg.updatedAt.nanos)) {
      json["updatedAt"] = protoscript.serializeTimestamp(msg.updatedAt);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Setting, json: any): Setting {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = _id_;
    }
    const _key_ = json["key"];
    if (_key_) {
      msg.key = _key_;
    }
    const _value_ = json["value"];
    if (_value_) {
      protoscript.ValueJSON._readMessage(msg.value, _value_);
    }
    const _valueType_ = json["valueType"] ?? json["value_type"];
    if (_valueType_) {
      msg.valueType = _valueType_;
    }
    const _applicationId_ = json["applicationId"] ?? json["application_id"];
    if (_applicationId_) {
      msg.applicationId = _applicationId_;
    }
    const _createdAt_ = json["createdAt"] ?? json["created_at"];
    if (_createdAt_) {
      msg.createdAt = protoscript.parseTimestamp(_createdAt_);
    }
    const _updatedAt_ = json["updatedAt"] ?? json["updated_at"];
    if (_updatedAt_) {
      msg.updatedAt = protoscript.parseTimestamp(_updatedAt_);
    }
    return msg;
  },
};

export const GetSettingRequestJSON = {
  /**
   * Serializes GetSettingRequest to JSON.
   */
  encode: function (msg: PartialDeep<GetSettingRequest>): string {
    return JSON.stringify(GetSettingRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes GetSettingRequest from JSON.
   */
  decode: function (json: string): GetSettingRequest {
    return GetSettingRequestJSON._readMessage(
      GetSettingRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes GetSettingRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<GetSettingRequest>): GetSettingRequest {
    return {
      key: "",
      applicationId: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetSettingRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.key) {
      json["key"] = msg.key;
    }
    if (msg.applicationId) {
      json["applicationId"] = msg.applicationId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetSettingRequest,
    json: any,
  ): GetSettingRequest {
    const _key_ = json["key"];
    if (_key_) {
      msg.key = _key_;
    }
    const _applicationId_ = json["applicationId"] ?? json["application_id"];
    if (_applicationId_) {
      msg.applicationId = _applicationId_;
    }
    return msg;
  },
};

export const SettingResponseJSON = {
  /**
   * Serializes SettingResponse to JSON.
   */
  encode: function (msg: PartialDeep<SettingResponse>): string {
    return JSON.stringify(SettingResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes SettingResponse from JSON.
   */
  decode: function (json: string): SettingResponse {
    return SettingResponseJSON._readMessage(
      SettingResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes SettingResponse with all fields set to their default value.
   */
  initialize: function (msg?: Partial<SettingResponse>): SettingResponse {
    return {
      status: common.ResponseStatusJSON.initialize(),
      setting: SettingJSON.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<SettingResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.status) {
      const _status_ = common.ResponseStatusJSON._writeMessage(msg.status);
      if (Object.keys(_status_).length > 0) {
        json["status"] = _status_;
      }
    }
    if (msg.setting) {
      const _setting_ = SettingJSON._writeMessage(msg.setting);
      if (Object.keys(_setting_).length > 0) {
        json["setting"] = _setting_;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: SettingResponse, json: any): SettingResponse {
    const _status_ = json["status"];
    if (_status_) {
      common.ResponseStatusJSON._readMessage(msg.status, _status_);
    }
    const _setting_ = json["setting"];
    if (_setting_) {
      SettingJSON._readMessage(msg.setting, _setting_);
    }
    return msg;
  },
};

export const GetSettingsRequestJSON = {
  /**
   * Serializes GetSettingsRequest to JSON.
   */
  encode: function (msg: PartialDeep<GetSettingsRequest>): string {
    return JSON.stringify(GetSettingsRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes GetSettingsRequest from JSON.
   */
  decode: function (json: string): GetSettingsRequest {
    return GetSettingsRequestJSON._readMessage(
      GetSettingsRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes GetSettingsRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<GetSettingsRequest>): GetSettingsRequest {
    return {
      keys: [],
      applicationId: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetSettingsRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.keys?.length) {
      json["keys"] = msg.keys;
    }
    if (msg.applicationId) {
      json["applicationId"] = msg.applicationId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetSettingsRequest,
    json: any,
  ): GetSettingsRequest {
    const _keys_ = json["keys"];
    if (_keys_) {
      msg.keys = _keys_;
    }
    const _applicationId_ = json["applicationId"] ?? json["application_id"];
    if (_applicationId_) {
      msg.applicationId = _applicationId_;
    }
    return msg;
  },
};

export const GetSettingsResponseJSON = {
  /**
   * Serializes GetSettingsResponse to JSON.
   */
  encode: function (msg: PartialDeep<GetSettingsResponse>): string {
    return JSON.stringify(GetSettingsResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes GetSettingsResponse from JSON.
   */
  decode: function (json: string): GetSettingsResponse {
    return GetSettingsResponseJSON._readMessage(
      GetSettingsResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes GetSettingsResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<GetSettingsResponse>,
  ): GetSettingsResponse {
    return {
      status: common.ResponseStatusJSON.initialize(),
      settings: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetSettingsResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.status) {
      const _status_ = common.ResponseStatusJSON._writeMessage(msg.status);
      if (Object.keys(_status_).length > 0) {
        json["status"] = _status_;
      }
    }
    if (msg.settings?.length) {
      json["settings"] = msg.settings.map(SettingJSON._writeMessage);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetSettingsResponse,
    json: any,
  ): GetSettingsResponse {
    const _status_ = json["status"];
    if (_status_) {
      common.ResponseStatusJSON._readMessage(msg.status, _status_);
    }
    const _settings_ = json["settings"];
    if (_settings_) {
      for (const item of _settings_) {
        const m = SettingJSON.initialize();
        SettingJSON._readMessage(m, item);
        msg.settings.push(m);
      }
    }
    return msg;
  },
};

export const SetSettingRequestJSON = {
  /**
   * Serializes SetSettingRequest to JSON.
   */
  encode: function (msg: PartialDeep<SetSettingRequest>): string {
    return JSON.stringify(SetSettingRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes SetSettingRequest from JSON.
   */
  decode: function (json: string): SetSettingRequest {
    return SetSettingRequestJSON._readMessage(
      SetSettingRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes SetSettingRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<SetSettingRequest>): SetSettingRequest {
    return {
      key: "",
      value: protoscript.ValueJSON.initialize(),
      applicationId: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<SetSettingRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.key) {
      json["key"] = msg.key;
    }
    if (msg.value) {
      const _value_ = protoscript.ValueJSON._writeMessage(msg.value);
      if (Object.keys(_value_).length > 0) {
        json["value"] = _value_;
      }
    }
    if (msg.applicationId) {
      json["applicationId"] = msg.applicationId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: SetSettingRequest,
    json: any,
  ): SetSettingRequest {
    const _key_ = json["key"];
    if (_key_) {
      msg.key = _key_;
    }
    const _value_ = json["value"];
    if (_value_) {
      protoscript.ValueJSON._readMessage(msg.value, _value_);
    }
    const _applicationId_ = json["applicationId"] ?? json["application_id"];
    if (_applicationId_) {
      msg.applicationId = _applicationId_;
    }
    return msg;
  },
};

export const SetSettingsRequestJSON = {
  /**
   * Serializes SetSettingsRequest to JSON.
   */
  encode: function (msg: PartialDeep<SetSettingsRequest>): string {
    return JSON.stringify(SetSettingsRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes SetSettingsRequest from JSON.
   */
  decode: function (json: string): SetSettingsRequest {
    return SetSettingsRequestJSON._readMessage(
      SetSettingsRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes SetSettingsRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<SetSettingsRequest>): SetSettingsRequest {
    return {
      settings: [],
      applicationId: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<SetSettingsRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.settings?.length) {
      json["settings"] = msg.settings.map(
        SetSettingsRequestJSON.SettingUpdate._writeMessage,
      );
    }
    if (msg.applicationId) {
      json["applicationId"] = msg.applicationId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: SetSettingsRequest,
    json: any,
  ): SetSettingsRequest {
    const _settings_ = json["settings"];
    if (_settings_) {
      for (const item of _settings_) {
        const m = SetSettingsRequestJSON.SettingUpdate.initialize();
        SetSettingsRequestJSON.SettingUpdate._readMessage(m, item);
        msg.settings.push(m);
      }
    }
    const _applicationId_ = json["applicationId"] ?? json["application_id"];
    if (_applicationId_) {
      msg.applicationId = _applicationId_;
    }
    return msg;
  },

  SettingUpdate: {
    /**
     * Serializes SetSettingsRequest.SettingUpdate to JSON.
     */
    encode: function (
      msg: PartialDeep<SetSettingsRequest.SettingUpdate>,
    ): string {
      return JSON.stringify(
        SetSettingsRequestJSON.SettingUpdate._writeMessage(msg),
      );
    },

    /**
     * Deserializes SetSettingsRequest.SettingUpdate from JSON.
     */
    decode: function (json: string): SetSettingsRequest.SettingUpdate {
      return SetSettingsRequestJSON.SettingUpdate._readMessage(
        SetSettingsRequestJSON.SettingUpdate.initialize(),
        JSON.parse(json),
      );
    },

    /**
     * Initializes SetSettingsRequest.SettingUpdate with all fields set to their default value.
     */
    initialize: function (
      msg?: Partial<SetSettingsRequest.SettingUpdate>,
    ): SetSettingsRequest.SettingUpdate {
      return {
        key: "",
        value: protoscript.ValueJSON.initialize(),
        ...msg,
      };
    },

    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<SetSettingsRequest.SettingUpdate>,
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.key) {
        json["key"] = msg.key;
      }
      if (msg.value) {
        const _value_ = protoscript.ValueJSON._writeMessage(msg.value);
        if (Object.keys(_value_).length > 0) {
          json["value"] = _value_;
        }
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: SetSettingsRequest.SettingUpdate,
      json: any,
    ): SetSettingsRequest.SettingUpdate {
      const _key_ = json["key"];
      if (_key_) {
        msg.key = _key_;
      }
      const _value_ = json["value"];
      if (_value_) {
        protoscript.ValueJSON._readMessage(msg.value, _value_);
      }
      return msg;
    },
  },
};

export const SetSettingsResponseJSON = {
  /**
   * Serializes SetSettingsResponse to JSON.
   */
  encode: function (msg: PartialDeep<SetSettingsResponse>): string {
    return JSON.stringify(SetSettingsResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes SetSettingsResponse from JSON.
   */
  decode: function (json: string): SetSettingsResponse {
    return SetSettingsResponseJSON._readMessage(
      SetSettingsResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes SetSettingsResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<SetSettingsResponse>,
  ): SetSettingsResponse {
    return {
      status: common.ResponseStatusJSON.initialize(),
      settings: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<SetSettingsResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.status) {
      const _status_ = common.ResponseStatusJSON._writeMessage(msg.status);
      if (Object.keys(_status_).length > 0) {
        json["status"] = _status_;
      }
    }
    if (msg.settings?.length) {
      json["settings"] = msg.settings.map(SettingJSON._writeMessage);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: SetSettingsResponse,
    json: any,
  ): SetSettingsResponse {
    const _status_ = json["status"];
    if (_status_) {
      common.ResponseStatusJSON._readMessage(msg.status, _status_);
    }
    const _settings_ = json["settings"];
    if (_settings_) {
      for (const item of _settings_) {
        const m = SettingJSON.initialize();
        SettingJSON._readMessage(m, item);
        msg.settings.push(m);
      }
    }
    return msg;
  },
};

export const DeleteSettingRequestJSON = {
  /**
   * Serializes DeleteSettingRequest to JSON.
   */
  encode: function (msg: PartialDeep<DeleteSettingRequest>): string {
    return JSON.stringify(DeleteSettingRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes DeleteSettingRequest from JSON.
   */
  decode: function (json: string): DeleteSettingRequest {
    return DeleteSettingRequestJSON._readMessage(
      DeleteSettingRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes DeleteSettingRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<DeleteSettingRequest>,
  ): DeleteSettingRequest {
    return {
      key: "",
      applicationId: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<DeleteSettingRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.key) {
      json["key"] = msg.key;
    }
    if (msg.applicationId) {
      json["applicationId"] = msg.applicationId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: DeleteSettingRequest,
    json: any,
  ): DeleteSettingRequest {
    const _key_ = json["key"];
    if (_key_) {
      msg.key = _key_;
    }
    const _applicationId_ = json["applicationId"] ?? json["application_id"];
    if (_applicationId_) {
      msg.applicationId = _applicationId_;
    }
    return msg;
  },
};
