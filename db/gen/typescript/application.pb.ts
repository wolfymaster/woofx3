// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: application.proto
/* eslint-disable */

import type { ByteSource, PartialDeep } from "protoscript";
import * as protoscript from "protoscript";
import { JSONrequest, PBrequest } from "twirpscript";
// This is the minimum version supported by the current runtime.
// If this line fails typechecking, breaking changes have been introduced and this
// file needs to be regenerated by running `npx twirpscript`.
export { MIN_SUPPORTED_VERSION_0_0_56 } from "twirpscript";
import type { ClientConfiguration } from "twirpscript";
import * as common from "./common.pb";

//========================================//
//                 Types                  //
//========================================//

export interface Application {
  id: string;
  name: string;
  ownerId: string;
  clients: Client[];
  enabled: boolean;
  createdAt: protoscript.Timestamp;
}

export interface Client {
  clientId: string;
  clientSecret: string;
}

/**
 * Create a new application
 */
export interface CreateApplicationRequest {
  name: string;
  ownerId: string;
}

/**
 * Get an application by ID or client ID
 */
export interface GetApplicationRequest {
  id: string;
}

/**
 * Update an existing application
 */
export interface UpdateApplicationRequest {
  id: string;
  name: string;
  enabled: boolean;
}

/**
 * Delete an application
 */
export interface DeleteApplicationRequest {
  id: string;
}

/**
 * List applications with optional filtering
 */
export interface ListApplicationsRequest {
  ownerId: string;
  includeInactive: boolean;
  query: string;
}

/**
 * Response containing a single application
 */
export interface ApplicationResponse {
  status: common.ResponseStatus;
  application: Application;
}

/**
 * Response containing a list of applications
 */
export interface ListApplicationsResponse {
  status: common.ResponseStatus;
  applications: Application[];
}

//========================================//
//   ApplicationService Protobuf Client   //
//========================================//

/**
 * Create a new application
 */
export async function CreateApplication(
  createApplicationRequest: CreateApplicationRequest,
  config?: ClientConfiguration,
): Promise<ApplicationResponse> {
  const response = await PBrequest(
    "/application.ApplicationService/CreateApplication",
    CreateApplicationRequest.encode(createApplicationRequest),
    config,
  );
  return ApplicationResponse.decode(response);
}

/**
 * Get an application by ID
 */
export async function GetApplication(
  getApplicationRequest: GetApplicationRequest,
  config?: ClientConfiguration,
): Promise<ApplicationResponse> {
  const response = await PBrequest(
    "/application.ApplicationService/GetApplication",
    GetApplicationRequest.encode(getApplicationRequest),
    config,
  );
  return ApplicationResponse.decode(response);
}

/**
 * Update an existing application
 */
export async function UpdateApplication(
  updateApplicationRequest: UpdateApplicationRequest,
  config?: ClientConfiguration,
): Promise<ApplicationResponse> {
  const response = await PBrequest(
    "/application.ApplicationService/UpdateApplication",
    UpdateApplicationRequest.encode(updateApplicationRequest),
    config,
  );
  return ApplicationResponse.decode(response);
}

/**
 * Delete an application
 */
export async function DeleteApplication(
  deleteApplicationRequest: DeleteApplicationRequest,
  config?: ClientConfiguration,
): Promise<common.ResponseStatus> {
  const response = await PBrequest(
    "/application.ApplicationService/DeleteApplication",
    DeleteApplicationRequest.encode(deleteApplicationRequest),
    config,
  );
  return common.ResponseStatus.decode(response);
}

/**
 * List applications with optional filtering
 */
export async function ListApplications(
  listApplicationsRequest: ListApplicationsRequest,
  config?: ClientConfiguration,
): Promise<ListApplicationsResponse> {
  const response = await PBrequest(
    "/application.ApplicationService/ListApplications",
    ListApplicationsRequest.encode(listApplicationsRequest),
    config,
  );
  return ListApplicationsResponse.decode(response);
}

//========================================//
//     ApplicationService JSON Client     //
//========================================//

/**
 * Create a new application
 */
export async function CreateApplicationJSON(
  createApplicationRequest: CreateApplicationRequest,
  config?: ClientConfiguration,
): Promise<ApplicationResponse> {
  const response = await JSONrequest(
    "/application.ApplicationService/CreateApplication",
    CreateApplicationRequestJSON.encode(createApplicationRequest),
    config,
  );
  return ApplicationResponseJSON.decode(response);
}

/**
 * Get an application by ID
 */
export async function GetApplicationJSON(
  getApplicationRequest: GetApplicationRequest,
  config?: ClientConfiguration,
): Promise<ApplicationResponse> {
  const response = await JSONrequest(
    "/application.ApplicationService/GetApplication",
    GetApplicationRequestJSON.encode(getApplicationRequest),
    config,
  );
  return ApplicationResponseJSON.decode(response);
}

/**
 * Update an existing application
 */
export async function UpdateApplicationJSON(
  updateApplicationRequest: UpdateApplicationRequest,
  config?: ClientConfiguration,
): Promise<ApplicationResponse> {
  const response = await JSONrequest(
    "/application.ApplicationService/UpdateApplication",
    UpdateApplicationRequestJSON.encode(updateApplicationRequest),
    config,
  );
  return ApplicationResponseJSON.decode(response);
}

/**
 * Delete an application
 */
export async function DeleteApplicationJSON(
  deleteApplicationRequest: DeleteApplicationRequest,
  config?: ClientConfiguration,
): Promise<common.ResponseStatus> {
  const response = await JSONrequest(
    "/application.ApplicationService/DeleteApplication",
    DeleteApplicationRequestJSON.encode(deleteApplicationRequest),
    config,
  );
  return common.ResponseStatusJSON.decode(response);
}

/**
 * List applications with optional filtering
 */
export async function ListApplicationsJSON(
  listApplicationsRequest: ListApplicationsRequest,
  config?: ClientConfiguration,
): Promise<ListApplicationsResponse> {
  const response = await JSONrequest(
    "/application.ApplicationService/ListApplications",
    ListApplicationsRequestJSON.encode(listApplicationsRequest),
    config,
  );
  return ListApplicationsResponseJSON.decode(response);
}

//========================================//
//           ApplicationService           //
//========================================//

export interface ApplicationService<Context = unknown> {
  /**
   * Create a new application
   */
  CreateApplication: (
    createApplicationRequest: CreateApplicationRequest,
    context: Context,
  ) => Promise<ApplicationResponse> | ApplicationResponse;
  /**
   * Get an application by ID
   */
  GetApplication: (
    getApplicationRequest: GetApplicationRequest,
    context: Context,
  ) => Promise<ApplicationResponse> | ApplicationResponse;
  /**
   * Update an existing application
   */
  UpdateApplication: (
    updateApplicationRequest: UpdateApplicationRequest,
    context: Context,
  ) => Promise<ApplicationResponse> | ApplicationResponse;
  /**
   * Delete an application
   */
  DeleteApplication: (
    deleteApplicationRequest: DeleteApplicationRequest,
    context: Context,
  ) => Promise<common.ResponseStatus> | common.ResponseStatus;
  /**
   * List applications with optional filtering
   */
  ListApplications: (
    listApplicationsRequest: ListApplicationsRequest,
    context: Context,
  ) => Promise<ListApplicationsResponse> | ListApplicationsResponse;
}

export function createApplicationService<Context>(
  service: ApplicationService<Context>,
) {
  return {
    name: "application.ApplicationService",
    methods: {
      CreateApplication: {
        name: "CreateApplication",
        handler: service.CreateApplication,
        input: {
          protobuf: CreateApplicationRequest,
          json: CreateApplicationRequestJSON,
        },
        output: {
          protobuf: ApplicationResponse,
          json: ApplicationResponseJSON,
        },
      },
      GetApplication: {
        name: "GetApplication",
        handler: service.GetApplication,
        input: {
          protobuf: GetApplicationRequest,
          json: GetApplicationRequestJSON,
        },
        output: {
          protobuf: ApplicationResponse,
          json: ApplicationResponseJSON,
        },
      },
      UpdateApplication: {
        name: "UpdateApplication",
        handler: service.UpdateApplication,
        input: {
          protobuf: UpdateApplicationRequest,
          json: UpdateApplicationRequestJSON,
        },
        output: {
          protobuf: ApplicationResponse,
          json: ApplicationResponseJSON,
        },
      },
      DeleteApplication: {
        name: "DeleteApplication",
        handler: service.DeleteApplication,
        input: {
          protobuf: DeleteApplicationRequest,
          json: DeleteApplicationRequestJSON,
        },
        output: {
          protobuf: common.ResponseStatus,
          json: common.ResponseStatusJSON,
        },
      },
      ListApplications: {
        name: "ListApplications",
        handler: service.ListApplications,
        input: {
          protobuf: ListApplicationsRequest,
          json: ListApplicationsRequestJSON,
        },
        output: {
          protobuf: ListApplicationsResponse,
          json: ListApplicationsResponseJSON,
        },
      },
    },
  } as const;
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const Application = {
  /**
   * Serializes Application to protobuf.
   */
  encode: function (msg: PartialDeep<Application>): Uint8Array {
    return Application._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes Application from protobuf.
   */
  decode: function (bytes: ByteSource): Application {
    return Application._readMessage(
      Application.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes Application with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Application>): Application {
    return {
      id: "",
      name: "",
      ownerId: "",
      clients: [],
      enabled: false,
      createdAt: protoscript.Timestamp.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<Application>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.id) {
      writer.writeString(1, msg.id);
    }
    if (msg.name) {
      writer.writeString(2, msg.name);
    }
    if (msg.ownerId) {
      writer.writeString(4, msg.ownerId);
    }
    if (msg.clients?.length) {
      writer.writeRepeatedMessage(5, msg.clients as any, Client._writeMessage);
    }
    if (msg.enabled) {
      writer.writeBool(6, msg.enabled);
    }
    if (msg.createdAt) {
      writer.writeMessage(
        15,
        msg.createdAt,
        protoscript.Timestamp._writeMessage,
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Application,
    reader: protoscript.BinaryReader,
  ): Application {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readString();
          break;
        }
        case 2: {
          msg.name = reader.readString();
          break;
        }
        case 4: {
          msg.ownerId = reader.readString();
          break;
        }
        case 5: {
          const m = Client.initialize();
          reader.readMessage(m, Client._readMessage);
          msg.clients.push(m);
          break;
        }
        case 6: {
          msg.enabled = reader.readBool();
          break;
        }
        case 15: {
          reader.readMessage(msg.createdAt, protoscript.Timestamp._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Client = {
  /**
   * Serializes Client to protobuf.
   */
  encode: function (msg: PartialDeep<Client>): Uint8Array {
    return Client._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes Client from protobuf.
   */
  decode: function (bytes: ByteSource): Client {
    return Client._readMessage(
      Client.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes Client with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Client>): Client {
    return {
      clientId: "",
      clientSecret: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<Client>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.clientId) {
      writer.writeString(1, msg.clientId);
    }
    if (msg.clientSecret) {
      writer.writeString(2, msg.clientSecret);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Client,
    reader: protoscript.BinaryReader,
  ): Client {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.clientId = reader.readString();
          break;
        }
        case 2: {
          msg.clientSecret = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const CreateApplicationRequest = {
  /**
   * Serializes CreateApplicationRequest to protobuf.
   */
  encode: function (msg: PartialDeep<CreateApplicationRequest>): Uint8Array {
    return CreateApplicationRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes CreateApplicationRequest from protobuf.
   */
  decode: function (bytes: ByteSource): CreateApplicationRequest {
    return CreateApplicationRequest._readMessage(
      CreateApplicationRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes CreateApplicationRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<CreateApplicationRequest>,
  ): CreateApplicationRequest {
    return {
      name: "",
      ownerId: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CreateApplicationRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.name) {
      writer.writeString(1, msg.name);
    }
    if (msg.ownerId) {
      writer.writeString(2, msg.ownerId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: CreateApplicationRequest,
    reader: protoscript.BinaryReader,
  ): CreateApplicationRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.name = reader.readString();
          break;
        }
        case 2: {
          msg.ownerId = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const GetApplicationRequest = {
  /**
   * Serializes GetApplicationRequest to protobuf.
   */
  encode: function (msg: PartialDeep<GetApplicationRequest>): Uint8Array {
    return GetApplicationRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes GetApplicationRequest from protobuf.
   */
  decode: function (bytes: ByteSource): GetApplicationRequest {
    return GetApplicationRequest._readMessage(
      GetApplicationRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes GetApplicationRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<GetApplicationRequest>,
  ): GetApplicationRequest {
    return {
      id: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetApplicationRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.id) {
      writer.writeString(1, msg.id);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetApplicationRequest,
    reader: protoscript.BinaryReader,
  ): GetApplicationRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const UpdateApplicationRequest = {
  /**
   * Serializes UpdateApplicationRequest to protobuf.
   */
  encode: function (msg: PartialDeep<UpdateApplicationRequest>): Uint8Array {
    return UpdateApplicationRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes UpdateApplicationRequest from protobuf.
   */
  decode: function (bytes: ByteSource): UpdateApplicationRequest {
    return UpdateApplicationRequest._readMessage(
      UpdateApplicationRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes UpdateApplicationRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<UpdateApplicationRequest>,
  ): UpdateApplicationRequest {
    return {
      id: "",
      name: "",
      enabled: false,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<UpdateApplicationRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.id) {
      writer.writeString(1, msg.id);
    }
    if (msg.name) {
      writer.writeString(2, msg.name);
    }
    if (msg.enabled) {
      writer.writeBool(3, msg.enabled);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: UpdateApplicationRequest,
    reader: protoscript.BinaryReader,
  ): UpdateApplicationRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readString();
          break;
        }
        case 2: {
          msg.name = reader.readString();
          break;
        }
        case 3: {
          msg.enabled = reader.readBool();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const DeleteApplicationRequest = {
  /**
   * Serializes DeleteApplicationRequest to protobuf.
   */
  encode: function (msg: PartialDeep<DeleteApplicationRequest>): Uint8Array {
    return DeleteApplicationRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes DeleteApplicationRequest from protobuf.
   */
  decode: function (bytes: ByteSource): DeleteApplicationRequest {
    return DeleteApplicationRequest._readMessage(
      DeleteApplicationRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes DeleteApplicationRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<DeleteApplicationRequest>,
  ): DeleteApplicationRequest {
    return {
      id: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<DeleteApplicationRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.id) {
      writer.writeString(1, msg.id);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: DeleteApplicationRequest,
    reader: protoscript.BinaryReader,
  ): DeleteApplicationRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const ListApplicationsRequest = {
  /**
   * Serializes ListApplicationsRequest to protobuf.
   */
  encode: function (msg: PartialDeep<ListApplicationsRequest>): Uint8Array {
    return ListApplicationsRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes ListApplicationsRequest from protobuf.
   */
  decode: function (bytes: ByteSource): ListApplicationsRequest {
    return ListApplicationsRequest._readMessage(
      ListApplicationsRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes ListApplicationsRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<ListApplicationsRequest>,
  ): ListApplicationsRequest {
    return {
      ownerId: "",
      includeInactive: false,
      query: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListApplicationsRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.ownerId) {
      writer.writeString(1, msg.ownerId);
    }
    if (msg.includeInactive) {
      writer.writeBool(2, msg.includeInactive);
    }
    if (msg.query) {
      writer.writeString(3, msg.query);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListApplicationsRequest,
    reader: protoscript.BinaryReader,
  ): ListApplicationsRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.ownerId = reader.readString();
          break;
        }
        case 2: {
          msg.includeInactive = reader.readBool();
          break;
        }
        case 3: {
          msg.query = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const ApplicationResponse = {
  /**
   * Serializes ApplicationResponse to protobuf.
   */
  encode: function (msg: PartialDeep<ApplicationResponse>): Uint8Array {
    return ApplicationResponse._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes ApplicationResponse from protobuf.
   */
  decode: function (bytes: ByteSource): ApplicationResponse {
    return ApplicationResponse._readMessage(
      ApplicationResponse.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes ApplicationResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<ApplicationResponse>,
  ): ApplicationResponse {
    return {
      status: common.ResponseStatus.initialize(),
      application: Application.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ApplicationResponse>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.status) {
      writer.writeMessage(1, msg.status, common.ResponseStatus._writeMessage);
    }
    if (msg.application) {
      writer.writeMessage(2, msg.application, Application._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ApplicationResponse,
    reader: protoscript.BinaryReader,
  ): ApplicationResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.status, common.ResponseStatus._readMessage);
          break;
        }
        case 2: {
          reader.readMessage(msg.application, Application._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const ListApplicationsResponse = {
  /**
   * Serializes ListApplicationsResponse to protobuf.
   */
  encode: function (msg: PartialDeep<ListApplicationsResponse>): Uint8Array {
    return ListApplicationsResponse._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes ListApplicationsResponse from protobuf.
   */
  decode: function (bytes: ByteSource): ListApplicationsResponse {
    return ListApplicationsResponse._readMessage(
      ListApplicationsResponse.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes ListApplicationsResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<ListApplicationsResponse>,
  ): ListApplicationsResponse {
    return {
      status: common.ResponseStatus.initialize(),
      applications: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListApplicationsResponse>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.status) {
      writer.writeMessage(1, msg.status, common.ResponseStatus._writeMessage);
    }
    if (msg.applications?.length) {
      writer.writeRepeatedMessage(
        2,
        msg.applications as any,
        Application._writeMessage,
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListApplicationsResponse,
    reader: protoscript.BinaryReader,
  ): ListApplicationsResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.status, common.ResponseStatus._readMessage);
          break;
        }
        case 2: {
          const m = Application.initialize();
          reader.readMessage(m, Application._readMessage);
          msg.applications.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const ApplicationJSON = {
  /**
   * Serializes Application to JSON.
   */
  encode: function (msg: PartialDeep<Application>): string {
    return JSON.stringify(ApplicationJSON._writeMessage(msg));
  },

  /**
   * Deserializes Application from JSON.
   */
  decode: function (json: string): Application {
    return ApplicationJSON._readMessage(
      ApplicationJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes Application with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Application>): Application {
    return {
      id: "",
      name: "",
      ownerId: "",
      clients: [],
      enabled: false,
      createdAt: protoscript.TimestampJSON.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<Application>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json["id"] = msg.id;
    }
    if (msg.name) {
      json["name"] = msg.name;
    }
    if (msg.ownerId) {
      json["ownerId"] = msg.ownerId;
    }
    if (msg.clients?.length) {
      json["clients"] = msg.clients.map(ClientJSON._writeMessage);
    }
    if (msg.enabled) {
      json["enabled"] = msg.enabled;
    }
    if (msg.createdAt && (msg.createdAt.seconds || msg.createdAt.nanos)) {
      json["createdAt"] = protoscript.serializeTimestamp(msg.createdAt);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Application, json: any): Application {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = _id_;
    }
    const _name_ = json["name"];
    if (_name_) {
      msg.name = _name_;
    }
    const _ownerId_ = json["ownerId"] ?? json["owner_id"];
    if (_ownerId_) {
      msg.ownerId = _ownerId_;
    }
    const _clients_ = json["clients"];
    if (_clients_) {
      for (const item of _clients_) {
        const m = ClientJSON.initialize();
        ClientJSON._readMessage(m, item);
        msg.clients.push(m);
      }
    }
    const _enabled_ = json["enabled"];
    if (_enabled_) {
      msg.enabled = _enabled_;
    }
    const _createdAt_ = json["createdAt"] ?? json["created_at"];
    if (_createdAt_) {
      msg.createdAt = protoscript.parseTimestamp(_createdAt_);
    }
    return msg;
  },
};

export const ClientJSON = {
  /**
   * Serializes Client to JSON.
   */
  encode: function (msg: PartialDeep<Client>): string {
    return JSON.stringify(ClientJSON._writeMessage(msg));
  },

  /**
   * Deserializes Client from JSON.
   */
  decode: function (json: string): Client {
    return ClientJSON._readMessage(ClientJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes Client with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Client>): Client {
    return {
      clientId: "",
      clientSecret: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: PartialDeep<Client>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.clientId) {
      json["clientId"] = msg.clientId;
    }
    if (msg.clientSecret) {
      json["clientSecret"] = msg.clientSecret;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Client, json: any): Client {
    const _clientId_ = json["clientId"] ?? json["client_id"];
    if (_clientId_) {
      msg.clientId = _clientId_;
    }
    const _clientSecret_ = json["clientSecret"] ?? json["client_secret"];
    if (_clientSecret_) {
      msg.clientSecret = _clientSecret_;
    }
    return msg;
  },
};

export const CreateApplicationRequestJSON = {
  /**
   * Serializes CreateApplicationRequest to JSON.
   */
  encode: function (msg: PartialDeep<CreateApplicationRequest>): string {
    return JSON.stringify(CreateApplicationRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes CreateApplicationRequest from JSON.
   */
  decode: function (json: string): CreateApplicationRequest {
    return CreateApplicationRequestJSON._readMessage(
      CreateApplicationRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes CreateApplicationRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<CreateApplicationRequest>,
  ): CreateApplicationRequest {
    return {
      name: "",
      ownerId: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CreateApplicationRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.name) {
      json["name"] = msg.name;
    }
    if (msg.ownerId) {
      json["ownerId"] = msg.ownerId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: CreateApplicationRequest,
    json: any,
  ): CreateApplicationRequest {
    const _name_ = json["name"];
    if (_name_) {
      msg.name = _name_;
    }
    const _ownerId_ = json["ownerId"] ?? json["owner_id"];
    if (_ownerId_) {
      msg.ownerId = _ownerId_;
    }
    return msg;
  },
};

export const GetApplicationRequestJSON = {
  /**
   * Serializes GetApplicationRequest to JSON.
   */
  encode: function (msg: PartialDeep<GetApplicationRequest>): string {
    return JSON.stringify(GetApplicationRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes GetApplicationRequest from JSON.
   */
  decode: function (json: string): GetApplicationRequest {
    return GetApplicationRequestJSON._readMessage(
      GetApplicationRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes GetApplicationRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<GetApplicationRequest>,
  ): GetApplicationRequest {
    return {
      id: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetApplicationRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json["id"] = msg.id;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetApplicationRequest,
    json: any,
  ): GetApplicationRequest {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = _id_;
    }
    return msg;
  },
};

export const UpdateApplicationRequestJSON = {
  /**
   * Serializes UpdateApplicationRequest to JSON.
   */
  encode: function (msg: PartialDeep<UpdateApplicationRequest>): string {
    return JSON.stringify(UpdateApplicationRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes UpdateApplicationRequest from JSON.
   */
  decode: function (json: string): UpdateApplicationRequest {
    return UpdateApplicationRequestJSON._readMessage(
      UpdateApplicationRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes UpdateApplicationRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<UpdateApplicationRequest>,
  ): UpdateApplicationRequest {
    return {
      id: "",
      name: "",
      enabled: false,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<UpdateApplicationRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json["id"] = msg.id;
    }
    if (msg.name) {
      json["name"] = msg.name;
    }
    if (msg.enabled) {
      json["enabled"] = msg.enabled;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: UpdateApplicationRequest,
    json: any,
  ): UpdateApplicationRequest {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = _id_;
    }
    const _name_ = json["name"];
    if (_name_) {
      msg.name = _name_;
    }
    const _enabled_ = json["enabled"];
    if (_enabled_) {
      msg.enabled = _enabled_;
    }
    return msg;
  },
};

export const DeleteApplicationRequestJSON = {
  /**
   * Serializes DeleteApplicationRequest to JSON.
   */
  encode: function (msg: PartialDeep<DeleteApplicationRequest>): string {
    return JSON.stringify(DeleteApplicationRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes DeleteApplicationRequest from JSON.
   */
  decode: function (json: string): DeleteApplicationRequest {
    return DeleteApplicationRequestJSON._readMessage(
      DeleteApplicationRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes DeleteApplicationRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<DeleteApplicationRequest>,
  ): DeleteApplicationRequest {
    return {
      id: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<DeleteApplicationRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json["id"] = msg.id;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: DeleteApplicationRequest,
    json: any,
  ): DeleteApplicationRequest {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = _id_;
    }
    return msg;
  },
};

export const ListApplicationsRequestJSON = {
  /**
   * Serializes ListApplicationsRequest to JSON.
   */
  encode: function (msg: PartialDeep<ListApplicationsRequest>): string {
    return JSON.stringify(ListApplicationsRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes ListApplicationsRequest from JSON.
   */
  decode: function (json: string): ListApplicationsRequest {
    return ListApplicationsRequestJSON._readMessage(
      ListApplicationsRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes ListApplicationsRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<ListApplicationsRequest>,
  ): ListApplicationsRequest {
    return {
      ownerId: "",
      includeInactive: false,
      query: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListApplicationsRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.ownerId) {
      json["ownerId"] = msg.ownerId;
    }
    if (msg.includeInactive) {
      json["includeInactive"] = msg.includeInactive;
    }
    if (msg.query) {
      json["query"] = msg.query;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListApplicationsRequest,
    json: any,
  ): ListApplicationsRequest {
    const _ownerId_ = json["ownerId"] ?? json["owner_id"];
    if (_ownerId_) {
      msg.ownerId = _ownerId_;
    }
    const _includeInactive_ =
      json["includeInactive"] ?? json["include_inactive"];
    if (_includeInactive_) {
      msg.includeInactive = _includeInactive_;
    }
    const _query_ = json["query"];
    if (_query_) {
      msg.query = _query_;
    }
    return msg;
  },
};

export const ApplicationResponseJSON = {
  /**
   * Serializes ApplicationResponse to JSON.
   */
  encode: function (msg: PartialDeep<ApplicationResponse>): string {
    return JSON.stringify(ApplicationResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes ApplicationResponse from JSON.
   */
  decode: function (json: string): ApplicationResponse {
    return ApplicationResponseJSON._readMessage(
      ApplicationResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes ApplicationResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<ApplicationResponse>,
  ): ApplicationResponse {
    return {
      status: common.ResponseStatusJSON.initialize(),
      application: ApplicationJSON.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ApplicationResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.status) {
      const _status_ = common.ResponseStatusJSON._writeMessage(msg.status);
      if (Object.keys(_status_).length > 0) {
        json["status"] = _status_;
      }
    }
    if (msg.application) {
      const _application_ = ApplicationJSON._writeMessage(msg.application);
      if (Object.keys(_application_).length > 0) {
        json["application"] = _application_;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ApplicationResponse,
    json: any,
  ): ApplicationResponse {
    const _status_ = json["status"];
    if (_status_) {
      common.ResponseStatusJSON._readMessage(msg.status, _status_);
    }
    const _application_ = json["application"];
    if (_application_) {
      ApplicationJSON._readMessage(msg.application, _application_);
    }
    return msg;
  },
};

export const ListApplicationsResponseJSON = {
  /**
   * Serializes ListApplicationsResponse to JSON.
   */
  encode: function (msg: PartialDeep<ListApplicationsResponse>): string {
    return JSON.stringify(ListApplicationsResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes ListApplicationsResponse from JSON.
   */
  decode: function (json: string): ListApplicationsResponse {
    return ListApplicationsResponseJSON._readMessage(
      ListApplicationsResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes ListApplicationsResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<ListApplicationsResponse>,
  ): ListApplicationsResponse {
    return {
      status: common.ResponseStatusJSON.initialize(),
      applications: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListApplicationsResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.status) {
      const _status_ = common.ResponseStatusJSON._writeMessage(msg.status);
      if (Object.keys(_status_).length > 0) {
        json["status"] = _status_;
      }
    }
    if (msg.applications?.length) {
      json["applications"] = msg.applications.map(
        ApplicationJSON._writeMessage,
      );
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListApplicationsResponse,
    json: any,
  ): ListApplicationsResponse {
    const _status_ = json["status"];
    if (_status_) {
      common.ResponseStatusJSON._readMessage(msg.status, _status_);
    }
    const _applications_ = json["applications"];
    if (_applications_) {
      for (const item of _applications_) {
        const m = ApplicationJSON.initialize();
        ApplicationJSON._readMessage(m, item);
        msg.applications.push(m);
      }
    }
    return msg;
  },
};
