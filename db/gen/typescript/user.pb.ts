// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: user.proto
/* eslint-disable */

import type { ByteSource, PartialDeep } from "protoscript";
import * as protoscript from "protoscript";
import { JSONrequest, PBrequest } from "twirpscript";
// This is the minimum version supported by the current runtime.
// If this line fails typechecking, breaking changes have been introduced and this
// file needs to be regenerated by running `npx twirpscript`.
export { MIN_SUPPORTED_VERSION_0_0_56 } from "twirpscript";
import type { ClientConfiguration } from "twirpscript";
import * as common from "./common.pb";

//========================================//
//                 Types                  //
//========================================//

export interface User {
  id: string;
  username: string;
  userId: string;
  platform: string;
  createdAt: protoscript.Timestamp;
  updatedAt: protoscript.Timestamp;
}

/**
 * Requests and Responses
 */
export interface CreateUserRequest {
  username: string;
  userId: string;
  platform: string;
}

export interface GetUserRequest {
  id: string;
}

export interface UpdateUserRequest {
  id: string;
  username: string;
  platform: string;
}

export interface DeleteUserRequest {
  id: string;
}

export interface UserResponse {
  status: common.ResponseStatus;
  user: User;
}

export interface GetUserTokenRequest {
  userId: string;
  clientId: string;
}

export interface GetUserTokenResponse {
  status: common.ResponseStatus;
  token: string;
  refreshToken: string;
  expiresIn: bigint;
  tokenType: string;
}

export interface GetBroadcasterTokenRequest {
  broadcasterId: string;
}

export interface GetBroadcasterTokenResponse {
  status: common.ResponseStatus;
  token: string;
  expiresIn: bigint;
  tokenType: string;
}

//========================================//
//      UserService Protobuf Client       //
//========================================//

export async function CreateUser(
  createUserRequest: CreateUserRequest,
  config?: ClientConfiguration,
): Promise<UserResponse> {
  const response = await PBrequest(
    "/user.UserService/CreateUser",
    CreateUserRequest.encode(createUserRequest),
    config,
  );
  return UserResponse.decode(response);
}

export async function GetUser(
  getUserRequest: GetUserRequest,
  config?: ClientConfiguration,
): Promise<UserResponse> {
  const response = await PBrequest(
    "/user.UserService/GetUser",
    GetUserRequest.encode(getUserRequest),
    config,
  );
  return UserResponse.decode(response);
}

export async function UpdateUser(
  updateUserRequest: UpdateUserRequest,
  config?: ClientConfiguration,
): Promise<UserResponse> {
  const response = await PBrequest(
    "/user.UserService/UpdateUser",
    UpdateUserRequest.encode(updateUserRequest),
    config,
  );
  return UserResponse.decode(response);
}

export async function DeleteUser(
  deleteUserRequest: DeleteUserRequest,
  config?: ClientConfiguration,
): Promise<common.ResponseStatus> {
  const response = await PBrequest(
    "/user.UserService/DeleteUser",
    DeleteUserRequest.encode(deleteUserRequest),
    config,
  );
  return common.ResponseStatus.decode(response);
}

//========================================//
//        UserService JSON Client         //
//========================================//

export async function CreateUserJSON(
  createUserRequest: CreateUserRequest,
  config?: ClientConfiguration,
): Promise<UserResponse> {
  const response = await JSONrequest(
    "/user.UserService/CreateUser",
    CreateUserRequestJSON.encode(createUserRequest),
    config,
  );
  return UserResponseJSON.decode(response);
}

export async function GetUserJSON(
  getUserRequest: GetUserRequest,
  config?: ClientConfiguration,
): Promise<UserResponse> {
  const response = await JSONrequest(
    "/user.UserService/GetUser",
    GetUserRequestJSON.encode(getUserRequest),
    config,
  );
  return UserResponseJSON.decode(response);
}

export async function UpdateUserJSON(
  updateUserRequest: UpdateUserRequest,
  config?: ClientConfiguration,
): Promise<UserResponse> {
  const response = await JSONrequest(
    "/user.UserService/UpdateUser",
    UpdateUserRequestJSON.encode(updateUserRequest),
    config,
  );
  return UserResponseJSON.decode(response);
}

export async function DeleteUserJSON(
  deleteUserRequest: DeleteUserRequest,
  config?: ClientConfiguration,
): Promise<common.ResponseStatus> {
  const response = await JSONrequest(
    "/user.UserService/DeleteUser",
    DeleteUserRequestJSON.encode(deleteUserRequest),
    config,
  );
  return common.ResponseStatusJSON.decode(response);
}

//========================================//
//              UserService               //
//========================================//

export interface UserService<Context = unknown> {
  CreateUser: (
    createUserRequest: CreateUserRequest,
    context: Context,
  ) => Promise<UserResponse> | UserResponse;
  GetUser: (
    getUserRequest: GetUserRequest,
    context: Context,
  ) => Promise<UserResponse> | UserResponse;
  UpdateUser: (
    updateUserRequest: UpdateUserRequest,
    context: Context,
  ) => Promise<UserResponse> | UserResponse;
  DeleteUser: (
    deleteUserRequest: DeleteUserRequest,
    context: Context,
  ) => Promise<common.ResponseStatus> | common.ResponseStatus;
}

export function createUserService<Context>(service: UserService<Context>) {
  return {
    name: "user.UserService",
    methods: {
      CreateUser: {
        name: "CreateUser",
        handler: service.CreateUser,
        input: { protobuf: CreateUserRequest, json: CreateUserRequestJSON },
        output: { protobuf: UserResponse, json: UserResponseJSON },
      },
      GetUser: {
        name: "GetUser",
        handler: service.GetUser,
        input: { protobuf: GetUserRequest, json: GetUserRequestJSON },
        output: { protobuf: UserResponse, json: UserResponseJSON },
      },
      UpdateUser: {
        name: "UpdateUser",
        handler: service.UpdateUser,
        input: { protobuf: UpdateUserRequest, json: UpdateUserRequestJSON },
        output: { protobuf: UserResponse, json: UserResponseJSON },
      },
      DeleteUser: {
        name: "DeleteUser",
        handler: service.DeleteUser,
        input: { protobuf: DeleteUserRequest, json: DeleteUserRequestJSON },
        output: {
          protobuf: common.ResponseStatus,
          json: common.ResponseStatusJSON,
        },
      },
    },
  } as const;
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const User = {
  /**
   * Serializes User to protobuf.
   */
  encode: function (msg: PartialDeep<User>): Uint8Array {
    return User._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes User from protobuf.
   */
  decode: function (bytes: ByteSource): User {
    return User._readMessage(
      User.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes User with all fields set to their default value.
   */
  initialize: function (msg?: Partial<User>): User {
    return {
      id: "",
      username: "",
      userId: "",
      platform: "",
      createdAt: protoscript.Timestamp.initialize(),
      updatedAt: protoscript.Timestamp.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<User>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.id) {
      writer.writeString(1, msg.id);
    }
    if (msg.username) {
      writer.writeString(2, msg.username);
    }
    if (msg.userId) {
      writer.writeString(3, msg.userId);
    }
    if (msg.platform) {
      writer.writeString(4, msg.platform);
    }
    if (msg.createdAt) {
      writer.writeMessage(
        5,
        msg.createdAt,
        protoscript.Timestamp._writeMessage,
      );
    }
    if (msg.updatedAt) {
      writer.writeMessage(
        6,
        msg.updatedAt,
        protoscript.Timestamp._writeMessage,
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: User, reader: protoscript.BinaryReader): User {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readString();
          break;
        }
        case 2: {
          msg.username = reader.readString();
          break;
        }
        case 3: {
          msg.userId = reader.readString();
          break;
        }
        case 4: {
          msg.platform = reader.readString();
          break;
        }
        case 5: {
          reader.readMessage(msg.createdAt, protoscript.Timestamp._readMessage);
          break;
        }
        case 6: {
          reader.readMessage(msg.updatedAt, protoscript.Timestamp._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const CreateUserRequest = {
  /**
   * Serializes CreateUserRequest to protobuf.
   */
  encode: function (msg: PartialDeep<CreateUserRequest>): Uint8Array {
    return CreateUserRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes CreateUserRequest from protobuf.
   */
  decode: function (bytes: ByteSource): CreateUserRequest {
    return CreateUserRequest._readMessage(
      CreateUserRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes CreateUserRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<CreateUserRequest>): CreateUserRequest {
    return {
      username: "",
      userId: "",
      platform: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CreateUserRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.username) {
      writer.writeString(1, msg.username);
    }
    if (msg.userId) {
      writer.writeString(2, msg.userId);
    }
    if (msg.platform) {
      writer.writeString(3, msg.platform);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: CreateUserRequest,
    reader: protoscript.BinaryReader,
  ): CreateUserRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.username = reader.readString();
          break;
        }
        case 2: {
          msg.userId = reader.readString();
          break;
        }
        case 3: {
          msg.platform = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const GetUserRequest = {
  /**
   * Serializes GetUserRequest to protobuf.
   */
  encode: function (msg: PartialDeep<GetUserRequest>): Uint8Array {
    return GetUserRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes GetUserRequest from protobuf.
   */
  decode: function (bytes: ByteSource): GetUserRequest {
    return GetUserRequest._readMessage(
      GetUserRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes GetUserRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<GetUserRequest>): GetUserRequest {
    return {
      id: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetUserRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.id) {
      writer.writeString(1, msg.id);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetUserRequest,
    reader: protoscript.BinaryReader,
  ): GetUserRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const UpdateUserRequest = {
  /**
   * Serializes UpdateUserRequest to protobuf.
   */
  encode: function (msg: PartialDeep<UpdateUserRequest>): Uint8Array {
    return UpdateUserRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes UpdateUserRequest from protobuf.
   */
  decode: function (bytes: ByteSource): UpdateUserRequest {
    return UpdateUserRequest._readMessage(
      UpdateUserRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes UpdateUserRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<UpdateUserRequest>): UpdateUserRequest {
    return {
      id: "",
      username: "",
      platform: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<UpdateUserRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.id) {
      writer.writeString(1, msg.id);
    }
    if (msg.username) {
      writer.writeString(2, msg.username);
    }
    if (msg.platform) {
      writer.writeString(3, msg.platform);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: UpdateUserRequest,
    reader: protoscript.BinaryReader,
  ): UpdateUserRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readString();
          break;
        }
        case 2: {
          msg.username = reader.readString();
          break;
        }
        case 3: {
          msg.platform = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const DeleteUserRequest = {
  /**
   * Serializes DeleteUserRequest to protobuf.
   */
  encode: function (msg: PartialDeep<DeleteUserRequest>): Uint8Array {
    return DeleteUserRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes DeleteUserRequest from protobuf.
   */
  decode: function (bytes: ByteSource): DeleteUserRequest {
    return DeleteUserRequest._readMessage(
      DeleteUserRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes DeleteUserRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<DeleteUserRequest>): DeleteUserRequest {
    return {
      id: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<DeleteUserRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.id) {
      writer.writeString(1, msg.id);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: DeleteUserRequest,
    reader: protoscript.BinaryReader,
  ): DeleteUserRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const UserResponse = {
  /**
   * Serializes UserResponse to protobuf.
   */
  encode: function (msg: PartialDeep<UserResponse>): Uint8Array {
    return UserResponse._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes UserResponse from protobuf.
   */
  decode: function (bytes: ByteSource): UserResponse {
    return UserResponse._readMessage(
      UserResponse.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes UserResponse with all fields set to their default value.
   */
  initialize: function (msg?: Partial<UserResponse>): UserResponse {
    return {
      status: common.ResponseStatus.initialize(),
      user: User.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<UserResponse>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.status) {
      writer.writeMessage(1, msg.status, common.ResponseStatus._writeMessage);
    }
    if (msg.user) {
      writer.writeMessage(2, msg.user, User._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: UserResponse,
    reader: protoscript.BinaryReader,
  ): UserResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.status, common.ResponseStatus._readMessage);
          break;
        }
        case 2: {
          reader.readMessage(msg.user, User._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const GetUserTokenRequest = {
  /**
   * Serializes GetUserTokenRequest to protobuf.
   */
  encode: function (msg: PartialDeep<GetUserTokenRequest>): Uint8Array {
    return GetUserTokenRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes GetUserTokenRequest from protobuf.
   */
  decode: function (bytes: ByteSource): GetUserTokenRequest {
    return GetUserTokenRequest._readMessage(
      GetUserTokenRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes GetUserTokenRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<GetUserTokenRequest>,
  ): GetUserTokenRequest {
    return {
      userId: "",
      clientId: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetUserTokenRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.userId) {
      writer.writeString(1, msg.userId);
    }
    if (msg.clientId) {
      writer.writeString(2, msg.clientId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetUserTokenRequest,
    reader: protoscript.BinaryReader,
  ): GetUserTokenRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.userId = reader.readString();
          break;
        }
        case 2: {
          msg.clientId = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const GetUserTokenResponse = {
  /**
   * Serializes GetUserTokenResponse to protobuf.
   */
  encode: function (msg: PartialDeep<GetUserTokenResponse>): Uint8Array {
    return GetUserTokenResponse._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes GetUserTokenResponse from protobuf.
   */
  decode: function (bytes: ByteSource): GetUserTokenResponse {
    return GetUserTokenResponse._readMessage(
      GetUserTokenResponse.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes GetUserTokenResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<GetUserTokenResponse>,
  ): GetUserTokenResponse {
    return {
      status: common.ResponseStatus.initialize(),
      token: "",
      refreshToken: "",
      expiresIn: 0n,
      tokenType: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetUserTokenResponse>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.status) {
      writer.writeMessage(1, msg.status, common.ResponseStatus._writeMessage);
    }
    if (msg.token) {
      writer.writeString(2, msg.token);
    }
    if (msg.refreshToken) {
      writer.writeString(3, msg.refreshToken);
    }
    if (msg.expiresIn) {
      writer.writeInt64String(4, msg.expiresIn.toString() as any);
    }
    if (msg.tokenType) {
      writer.writeString(5, msg.tokenType);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetUserTokenResponse,
    reader: protoscript.BinaryReader,
  ): GetUserTokenResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.status, common.ResponseStatus._readMessage);
          break;
        }
        case 2: {
          msg.token = reader.readString();
          break;
        }
        case 3: {
          msg.refreshToken = reader.readString();
          break;
        }
        case 4: {
          msg.expiresIn = BigInt(reader.readInt64String());
          break;
        }
        case 5: {
          msg.tokenType = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const GetBroadcasterTokenRequest = {
  /**
   * Serializes GetBroadcasterTokenRequest to protobuf.
   */
  encode: function (msg: PartialDeep<GetBroadcasterTokenRequest>): Uint8Array {
    return GetBroadcasterTokenRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes GetBroadcasterTokenRequest from protobuf.
   */
  decode: function (bytes: ByteSource): GetBroadcasterTokenRequest {
    return GetBroadcasterTokenRequest._readMessage(
      GetBroadcasterTokenRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes GetBroadcasterTokenRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<GetBroadcasterTokenRequest>,
  ): GetBroadcasterTokenRequest {
    return {
      broadcasterId: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetBroadcasterTokenRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.broadcasterId) {
      writer.writeString(1, msg.broadcasterId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetBroadcasterTokenRequest,
    reader: protoscript.BinaryReader,
  ): GetBroadcasterTokenRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.broadcasterId = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const GetBroadcasterTokenResponse = {
  /**
   * Serializes GetBroadcasterTokenResponse to protobuf.
   */
  encode: function (msg: PartialDeep<GetBroadcasterTokenResponse>): Uint8Array {
    return GetBroadcasterTokenResponse._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes GetBroadcasterTokenResponse from protobuf.
   */
  decode: function (bytes: ByteSource): GetBroadcasterTokenResponse {
    return GetBroadcasterTokenResponse._readMessage(
      GetBroadcasterTokenResponse.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes GetBroadcasterTokenResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<GetBroadcasterTokenResponse>,
  ): GetBroadcasterTokenResponse {
    return {
      status: common.ResponseStatus.initialize(),
      token: "",
      expiresIn: 0n,
      tokenType: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetBroadcasterTokenResponse>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.status) {
      writer.writeMessage(1, msg.status, common.ResponseStatus._writeMessage);
    }
    if (msg.token) {
      writer.writeString(2, msg.token);
    }
    if (msg.expiresIn) {
      writer.writeInt64String(3, msg.expiresIn.toString() as any);
    }
    if (msg.tokenType) {
      writer.writeString(4, msg.tokenType);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetBroadcasterTokenResponse,
    reader: protoscript.BinaryReader,
  ): GetBroadcasterTokenResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.status, common.ResponseStatus._readMessage);
          break;
        }
        case 2: {
          msg.token = reader.readString();
          break;
        }
        case 3: {
          msg.expiresIn = BigInt(reader.readInt64String());
          break;
        }
        case 4: {
          msg.tokenType = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const UserJSON = {
  /**
   * Serializes User to JSON.
   */
  encode: function (msg: PartialDeep<User>): string {
    return JSON.stringify(UserJSON._writeMessage(msg));
  },

  /**
   * Deserializes User from JSON.
   */
  decode: function (json: string): User {
    return UserJSON._readMessage(UserJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes User with all fields set to their default value.
   */
  initialize: function (msg?: Partial<User>): User {
    return {
      id: "",
      username: "",
      userId: "",
      platform: "",
      createdAt: protoscript.TimestampJSON.initialize(),
      updatedAt: protoscript.TimestampJSON.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: PartialDeep<User>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json["id"] = msg.id;
    }
    if (msg.username) {
      json["username"] = msg.username;
    }
    if (msg.userId) {
      json["userId"] = msg.userId;
    }
    if (msg.platform) {
      json["platform"] = msg.platform;
    }
    if (msg.createdAt && (msg.createdAt.seconds || msg.createdAt.nanos)) {
      json["createdAt"] = protoscript.serializeTimestamp(msg.createdAt);
    }
    if (msg.updatedAt && (msg.updatedAt.seconds || msg.updatedAt.nanos)) {
      json["updatedAt"] = protoscript.serializeTimestamp(msg.updatedAt);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: User, json: any): User {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = _id_;
    }
    const _username_ = json["username"];
    if (_username_) {
      msg.username = _username_;
    }
    const _userId_ = json["userId"] ?? json["user_id"];
    if (_userId_) {
      msg.userId = _userId_;
    }
    const _platform_ = json["platform"];
    if (_platform_) {
      msg.platform = _platform_;
    }
    const _createdAt_ = json["createdAt"] ?? json["created_at"];
    if (_createdAt_) {
      msg.createdAt = protoscript.parseTimestamp(_createdAt_);
    }
    const _updatedAt_ = json["updatedAt"] ?? json["updated_at"];
    if (_updatedAt_) {
      msg.updatedAt = protoscript.parseTimestamp(_updatedAt_);
    }
    return msg;
  },
};

export const CreateUserRequestJSON = {
  /**
   * Serializes CreateUserRequest to JSON.
   */
  encode: function (msg: PartialDeep<CreateUserRequest>): string {
    return JSON.stringify(CreateUserRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes CreateUserRequest from JSON.
   */
  decode: function (json: string): CreateUserRequest {
    return CreateUserRequestJSON._readMessage(
      CreateUserRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes CreateUserRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<CreateUserRequest>): CreateUserRequest {
    return {
      username: "",
      userId: "",
      platform: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CreateUserRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.username) {
      json["username"] = msg.username;
    }
    if (msg.userId) {
      json["userId"] = msg.userId;
    }
    if (msg.platform) {
      json["platform"] = msg.platform;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: CreateUserRequest,
    json: any,
  ): CreateUserRequest {
    const _username_ = json["username"];
    if (_username_) {
      msg.username = _username_;
    }
    const _userId_ = json["userId"] ?? json["user_id"];
    if (_userId_) {
      msg.userId = _userId_;
    }
    const _platform_ = json["platform"];
    if (_platform_) {
      msg.platform = _platform_;
    }
    return msg;
  },
};

export const GetUserRequestJSON = {
  /**
   * Serializes GetUserRequest to JSON.
   */
  encode: function (msg: PartialDeep<GetUserRequest>): string {
    return JSON.stringify(GetUserRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes GetUserRequest from JSON.
   */
  decode: function (json: string): GetUserRequest {
    return GetUserRequestJSON._readMessage(
      GetUserRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes GetUserRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<GetUserRequest>): GetUserRequest {
    return {
      id: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetUserRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json["id"] = msg.id;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: GetUserRequest, json: any): GetUserRequest {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = _id_;
    }
    return msg;
  },
};

export const UpdateUserRequestJSON = {
  /**
   * Serializes UpdateUserRequest to JSON.
   */
  encode: function (msg: PartialDeep<UpdateUserRequest>): string {
    return JSON.stringify(UpdateUserRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes UpdateUserRequest from JSON.
   */
  decode: function (json: string): UpdateUserRequest {
    return UpdateUserRequestJSON._readMessage(
      UpdateUserRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes UpdateUserRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<UpdateUserRequest>): UpdateUserRequest {
    return {
      id: "",
      username: "",
      platform: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<UpdateUserRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json["id"] = msg.id;
    }
    if (msg.username) {
      json["username"] = msg.username;
    }
    if (msg.platform) {
      json["platform"] = msg.platform;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: UpdateUserRequest,
    json: any,
  ): UpdateUserRequest {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = _id_;
    }
    const _username_ = json["username"];
    if (_username_) {
      msg.username = _username_;
    }
    const _platform_ = json["platform"];
    if (_platform_) {
      msg.platform = _platform_;
    }
    return msg;
  },
};

export const DeleteUserRequestJSON = {
  /**
   * Serializes DeleteUserRequest to JSON.
   */
  encode: function (msg: PartialDeep<DeleteUserRequest>): string {
    return JSON.stringify(DeleteUserRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes DeleteUserRequest from JSON.
   */
  decode: function (json: string): DeleteUserRequest {
    return DeleteUserRequestJSON._readMessage(
      DeleteUserRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes DeleteUserRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<DeleteUserRequest>): DeleteUserRequest {
    return {
      id: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<DeleteUserRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json["id"] = msg.id;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: DeleteUserRequest,
    json: any,
  ): DeleteUserRequest {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = _id_;
    }
    return msg;
  },
};

export const UserResponseJSON = {
  /**
   * Serializes UserResponse to JSON.
   */
  encode: function (msg: PartialDeep<UserResponse>): string {
    return JSON.stringify(UserResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes UserResponse from JSON.
   */
  decode: function (json: string): UserResponse {
    return UserResponseJSON._readMessage(
      UserResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes UserResponse with all fields set to their default value.
   */
  initialize: function (msg?: Partial<UserResponse>): UserResponse {
    return {
      status: common.ResponseStatusJSON.initialize(),
      user: UserJSON.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<UserResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.status) {
      const _status_ = common.ResponseStatusJSON._writeMessage(msg.status);
      if (Object.keys(_status_).length > 0) {
        json["status"] = _status_;
      }
    }
    if (msg.user) {
      const _user_ = UserJSON._writeMessage(msg.user);
      if (Object.keys(_user_).length > 0) {
        json["user"] = _user_;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: UserResponse, json: any): UserResponse {
    const _status_ = json["status"];
    if (_status_) {
      common.ResponseStatusJSON._readMessage(msg.status, _status_);
    }
    const _user_ = json["user"];
    if (_user_) {
      UserJSON._readMessage(msg.user, _user_);
    }
    return msg;
  },
};

export const GetUserTokenRequestJSON = {
  /**
   * Serializes GetUserTokenRequest to JSON.
   */
  encode: function (msg: PartialDeep<GetUserTokenRequest>): string {
    return JSON.stringify(GetUserTokenRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes GetUserTokenRequest from JSON.
   */
  decode: function (json: string): GetUserTokenRequest {
    return GetUserTokenRequestJSON._readMessage(
      GetUserTokenRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes GetUserTokenRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<GetUserTokenRequest>,
  ): GetUserTokenRequest {
    return {
      userId: "",
      clientId: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetUserTokenRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.userId) {
      json["userId"] = msg.userId;
    }
    if (msg.clientId) {
      json["clientId"] = msg.clientId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetUserTokenRequest,
    json: any,
  ): GetUserTokenRequest {
    const _userId_ = json["userId"] ?? json["user_id"];
    if (_userId_) {
      msg.userId = _userId_;
    }
    const _clientId_ = json["clientId"] ?? json["client_id"];
    if (_clientId_) {
      msg.clientId = _clientId_;
    }
    return msg;
  },
};

export const GetUserTokenResponseJSON = {
  /**
   * Serializes GetUserTokenResponse to JSON.
   */
  encode: function (msg: PartialDeep<GetUserTokenResponse>): string {
    return JSON.stringify(GetUserTokenResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes GetUserTokenResponse from JSON.
   */
  decode: function (json: string): GetUserTokenResponse {
    return GetUserTokenResponseJSON._readMessage(
      GetUserTokenResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes GetUserTokenResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<GetUserTokenResponse>,
  ): GetUserTokenResponse {
    return {
      status: common.ResponseStatusJSON.initialize(),
      token: "",
      refreshToken: "",
      expiresIn: 0n,
      tokenType: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetUserTokenResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.status) {
      const _status_ = common.ResponseStatusJSON._writeMessage(msg.status);
      if (Object.keys(_status_).length > 0) {
        json["status"] = _status_;
      }
    }
    if (msg.token) {
      json["token"] = msg.token;
    }
    if (msg.refreshToken) {
      json["refreshToken"] = msg.refreshToken;
    }
    if (msg.expiresIn) {
      json["expiresIn"] = String(msg.expiresIn);
    }
    if (msg.tokenType) {
      json["tokenType"] = msg.tokenType;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetUserTokenResponse,
    json: any,
  ): GetUserTokenResponse {
    const _status_ = json["status"];
    if (_status_) {
      common.ResponseStatusJSON._readMessage(msg.status, _status_);
    }
    const _token_ = json["token"];
    if (_token_) {
      msg.token = _token_;
    }
    const _refreshToken_ = json["refreshToken"] ?? json["refresh_token"];
    if (_refreshToken_) {
      msg.refreshToken = _refreshToken_;
    }
    const _expiresIn_ = json["expiresIn"] ?? json["expires_in"];
    if (_expiresIn_) {
      msg.expiresIn = BigInt(_expiresIn_);
    }
    const _tokenType_ = json["tokenType"] ?? json["token_type"];
    if (_tokenType_) {
      msg.tokenType = _tokenType_;
    }
    return msg;
  },
};

export const GetBroadcasterTokenRequestJSON = {
  /**
   * Serializes GetBroadcasterTokenRequest to JSON.
   */
  encode: function (msg: PartialDeep<GetBroadcasterTokenRequest>): string {
    return JSON.stringify(GetBroadcasterTokenRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes GetBroadcasterTokenRequest from JSON.
   */
  decode: function (json: string): GetBroadcasterTokenRequest {
    return GetBroadcasterTokenRequestJSON._readMessage(
      GetBroadcasterTokenRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes GetBroadcasterTokenRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<GetBroadcasterTokenRequest>,
  ): GetBroadcasterTokenRequest {
    return {
      broadcasterId: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetBroadcasterTokenRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.broadcasterId) {
      json["broadcasterId"] = msg.broadcasterId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetBroadcasterTokenRequest,
    json: any,
  ): GetBroadcasterTokenRequest {
    const _broadcasterId_ = json["broadcasterId"] ?? json["broadcaster_id"];
    if (_broadcasterId_) {
      msg.broadcasterId = _broadcasterId_;
    }
    return msg;
  },
};

export const GetBroadcasterTokenResponseJSON = {
  /**
   * Serializes GetBroadcasterTokenResponse to JSON.
   */
  encode: function (msg: PartialDeep<GetBroadcasterTokenResponse>): string {
    return JSON.stringify(GetBroadcasterTokenResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes GetBroadcasterTokenResponse from JSON.
   */
  decode: function (json: string): GetBroadcasterTokenResponse {
    return GetBroadcasterTokenResponseJSON._readMessage(
      GetBroadcasterTokenResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes GetBroadcasterTokenResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<GetBroadcasterTokenResponse>,
  ): GetBroadcasterTokenResponse {
    return {
      status: common.ResponseStatusJSON.initialize(),
      token: "",
      expiresIn: 0n,
      tokenType: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetBroadcasterTokenResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.status) {
      const _status_ = common.ResponseStatusJSON._writeMessage(msg.status);
      if (Object.keys(_status_).length > 0) {
        json["status"] = _status_;
      }
    }
    if (msg.token) {
      json["token"] = msg.token;
    }
    if (msg.expiresIn) {
      json["expiresIn"] = String(msg.expiresIn);
    }
    if (msg.tokenType) {
      json["tokenType"] = msg.tokenType;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetBroadcasterTokenResponse,
    json: any,
  ): GetBroadcasterTokenResponse {
    const _status_ = json["status"];
    if (_status_) {
      common.ResponseStatusJSON._readMessage(msg.status, _status_);
    }
    const _token_ = json["token"];
    if (_token_) {
      msg.token = _token_;
    }
    const _expiresIn_ = json["expiresIn"] ?? json["expires_in"];
    if (_expiresIn_) {
      msg.expiresIn = BigInt(_expiresIn_);
    }
    const _tokenType_ = json["tokenType"] ?? json["token_type"];
    if (_tokenType_) {
      msg.tokenType = _tokenType_;
    }
    return msg;
  },
};
