// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: command.proto
/* eslint-disable */

import type { ByteSource, PartialDeep } from "protoscript";
import * as protoscript from "protoscript";
import { JSONrequest, PBrequest } from "twirpscript";
// This is the minimum version supported by the current runtime.
// If this line fails typechecking, breaking changes have been introduced and this
// file needs to be regenerated by running `npx twirpscript`.
export { MIN_SUPPORTED_VERSION_0_0_56 } from "twirpscript";
import type { ClientConfiguration } from "twirpscript";
import * as common from "./common.pb";

//========================================//
//                 Types                  //
//========================================//

/**
 * Command represents a chat command that can be executed
 */
export interface Command {
  id: string;
  applicationId: string;
  command: string;
  type: string;
  typeValue: string;
  cooldown: number;
  priority: number;
  enabled: boolean;
  createdBy: string;
  createdAt: protoscript.Timestamp;
}

/**
 * Request to get a single command by ID
 */
export interface GetCommandRequest {
  command: string;
  applicationId: string;
  username?: string | null | undefined;
}

/**
 * Response containing a single command
 */
export interface CommandResponse {
  status: common.ResponseStatus;
  command: Command;
}

/**
 * Request to list commands with optional filters
 */
export interface ListCommandsRequest {
  applicationId: string;
  includeDisabled: boolean;
}

/**
 * Response containing a list of commands
 */
export interface ListCommandsResponse {
  status: common.ResponseStatus;
  commands: Command[];
}

/**
 * Request to create a new command
 */
export interface CreateCommandRequest {
  applicationId: string;
  command: string;
  enabled: boolean;
  cooldown: number;
  type: string;
  typeValue: string;
  priority: number;
  createdBy: string;
}

/**
 * Request to update an existing command
 */
export interface UpdateCommandRequest {
  id: string;
  command: string;
  enabled: boolean;
  cooldown: number;
  type: string;
  typeValue: string;
  priority: number;
}

/**
 * Request to delete a command
 */
export interface DeleteCommandRequest {
  id: string;
}

//========================================//
//     CommandService Protobuf Client     //
//========================================//

/**
 * Get a command by ID
 */
export async function GetCommand(
  getCommandRequest: GetCommandRequest,
  config?: ClientConfiguration,
): Promise<CommandResponse> {
  const response = await PBrequest(
    "/command.CommandService/GetCommand",
    GetCommandRequest.encode(getCommandRequest),
    config,
  );
  return CommandResponse.decode(response);
}

/**
 * List commands with optional filters
 */
export async function ListCommands(
  listCommandsRequest: ListCommandsRequest,
  config?: ClientConfiguration,
): Promise<ListCommandsResponse> {
  const response = await PBrequest(
    "/command.CommandService/ListCommands",
    ListCommandsRequest.encode(listCommandsRequest),
    config,
  );
  return ListCommandsResponse.decode(response);
}

/**
 * Create a new command
 */
export async function CreateCommand(
  createCommandRequest: CreateCommandRequest,
  config?: ClientConfiguration,
): Promise<CommandResponse> {
  const response = await PBrequest(
    "/command.CommandService/CreateCommand",
    CreateCommandRequest.encode(createCommandRequest),
    config,
  );
  return CommandResponse.decode(response);
}

/**
 * Update an existing command
 */
export async function UpdateCommand(
  updateCommandRequest: UpdateCommandRequest,
  config?: ClientConfiguration,
): Promise<CommandResponse> {
  const response = await PBrequest(
    "/command.CommandService/UpdateCommand",
    UpdateCommandRequest.encode(updateCommandRequest),
    config,
  );
  return CommandResponse.decode(response);
}

/**
 * Delete a command
 */
export async function DeleteCommand(
  deleteCommandRequest: DeleteCommandRequest,
  config?: ClientConfiguration,
): Promise<common.ResponseStatus> {
  const response = await PBrequest(
    "/command.CommandService/DeleteCommand",
    DeleteCommandRequest.encode(deleteCommandRequest),
    config,
  );
  return common.ResponseStatus.decode(response);
}

//========================================//
//       CommandService JSON Client       //
//========================================//

/**
 * Get a command by ID
 */
export async function GetCommandJSON(
  getCommandRequest: GetCommandRequest,
  config?: ClientConfiguration,
): Promise<CommandResponse> {
  const response = await JSONrequest(
    "/command.CommandService/GetCommand",
    GetCommandRequestJSON.encode(getCommandRequest),
    config,
  );
  return CommandResponseJSON.decode(response);
}

/**
 * List commands with optional filters
 */
export async function ListCommandsJSON(
  listCommandsRequest: ListCommandsRequest,
  config?: ClientConfiguration,
): Promise<ListCommandsResponse> {
  const response = await JSONrequest(
    "/command.CommandService/ListCommands",
    ListCommandsRequestJSON.encode(listCommandsRequest),
    config,
  );
  return ListCommandsResponseJSON.decode(response);
}

/**
 * Create a new command
 */
export async function CreateCommandJSON(
  createCommandRequest: CreateCommandRequest,
  config?: ClientConfiguration,
): Promise<CommandResponse> {
  const response = await JSONrequest(
    "/command.CommandService/CreateCommand",
    CreateCommandRequestJSON.encode(createCommandRequest),
    config,
  );
  return CommandResponseJSON.decode(response);
}

/**
 * Update an existing command
 */
export async function UpdateCommandJSON(
  updateCommandRequest: UpdateCommandRequest,
  config?: ClientConfiguration,
): Promise<CommandResponse> {
  const response = await JSONrequest(
    "/command.CommandService/UpdateCommand",
    UpdateCommandRequestJSON.encode(updateCommandRequest),
    config,
  );
  return CommandResponseJSON.decode(response);
}

/**
 * Delete a command
 */
export async function DeleteCommandJSON(
  deleteCommandRequest: DeleteCommandRequest,
  config?: ClientConfiguration,
): Promise<common.ResponseStatus> {
  const response = await JSONrequest(
    "/command.CommandService/DeleteCommand",
    DeleteCommandRequestJSON.encode(deleteCommandRequest),
    config,
  );
  return common.ResponseStatusJSON.decode(response);
}

//========================================//
//             CommandService             //
//========================================//

export interface CommandService<Context = unknown> {
  /**
   * Get a command by ID
   */
  GetCommand: (
    getCommandRequest: GetCommandRequest,
    context: Context,
  ) => Promise<CommandResponse> | CommandResponse;
  /**
   * List commands with optional filters
   */
  ListCommands: (
    listCommandsRequest: ListCommandsRequest,
    context: Context,
  ) => Promise<ListCommandsResponse> | ListCommandsResponse;
  /**
   * Create a new command
   */
  CreateCommand: (
    createCommandRequest: CreateCommandRequest,
    context: Context,
  ) => Promise<CommandResponse> | CommandResponse;
  /**
   * Update an existing command
   */
  UpdateCommand: (
    updateCommandRequest: UpdateCommandRequest,
    context: Context,
  ) => Promise<CommandResponse> | CommandResponse;
  /**
   * Delete a command
   */
  DeleteCommand: (
    deleteCommandRequest: DeleteCommandRequest,
    context: Context,
  ) => Promise<common.ResponseStatus> | common.ResponseStatus;
}

export function createCommandService<Context>(
  service: CommandService<Context>,
) {
  return {
    name: "command.CommandService",
    methods: {
      GetCommand: {
        name: "GetCommand",
        handler: service.GetCommand,
        input: { protobuf: GetCommandRequest, json: GetCommandRequestJSON },
        output: { protobuf: CommandResponse, json: CommandResponseJSON },
      },
      ListCommands: {
        name: "ListCommands",
        handler: service.ListCommands,
        input: { protobuf: ListCommandsRequest, json: ListCommandsRequestJSON },
        output: {
          protobuf: ListCommandsResponse,
          json: ListCommandsResponseJSON,
        },
      },
      CreateCommand: {
        name: "CreateCommand",
        handler: service.CreateCommand,
        input: {
          protobuf: CreateCommandRequest,
          json: CreateCommandRequestJSON,
        },
        output: { protobuf: CommandResponse, json: CommandResponseJSON },
      },
      UpdateCommand: {
        name: "UpdateCommand",
        handler: service.UpdateCommand,
        input: {
          protobuf: UpdateCommandRequest,
          json: UpdateCommandRequestJSON,
        },
        output: { protobuf: CommandResponse, json: CommandResponseJSON },
      },
      DeleteCommand: {
        name: "DeleteCommand",
        handler: service.DeleteCommand,
        input: {
          protobuf: DeleteCommandRequest,
          json: DeleteCommandRequestJSON,
        },
        output: {
          protobuf: common.ResponseStatus,
          json: common.ResponseStatusJSON,
        },
      },
    },
  } as const;
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const Command = {
  /**
   * Serializes Command to protobuf.
   */
  encode: function (msg: PartialDeep<Command>): Uint8Array {
    return Command._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes Command from protobuf.
   */
  decode: function (bytes: ByteSource): Command {
    return Command._readMessage(
      Command.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes Command with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Command>): Command {
    return {
      id: "",
      applicationId: "",
      command: "",
      type: "",
      typeValue: "",
      cooldown: 0,
      priority: 0,
      enabled: false,
      createdBy: "",
      createdAt: protoscript.Timestamp.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<Command>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.id) {
      writer.writeString(1, msg.id);
    }
    if (msg.applicationId) {
      writer.writeString(2, msg.applicationId);
    }
    if (msg.command) {
      writer.writeString(3, msg.command);
    }
    if (msg.type) {
      writer.writeString(4, msg.type);
    }
    if (msg.typeValue) {
      writer.writeString(5, msg.typeValue);
    }
    if (msg.cooldown) {
      writer.writeInt32(6, msg.cooldown);
    }
    if (msg.priority) {
      writer.writeInt32(7, msg.priority);
    }
    if (msg.enabled) {
      writer.writeBool(13, msg.enabled);
    }
    if (msg.createdBy) {
      writer.writeString(14, msg.createdBy);
    }
    if (msg.createdAt) {
      writer.writeMessage(
        15,
        msg.createdAt,
        protoscript.Timestamp._writeMessage,
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Command,
    reader: protoscript.BinaryReader,
  ): Command {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readString();
          break;
        }
        case 2: {
          msg.applicationId = reader.readString();
          break;
        }
        case 3: {
          msg.command = reader.readString();
          break;
        }
        case 4: {
          msg.type = reader.readString();
          break;
        }
        case 5: {
          msg.typeValue = reader.readString();
          break;
        }
        case 6: {
          msg.cooldown = reader.readInt32();
          break;
        }
        case 7: {
          msg.priority = reader.readInt32();
          break;
        }
        case 13: {
          msg.enabled = reader.readBool();
          break;
        }
        case 14: {
          msg.createdBy = reader.readString();
          break;
        }
        case 15: {
          reader.readMessage(msg.createdAt, protoscript.Timestamp._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const GetCommandRequest = {
  /**
   * Serializes GetCommandRequest to protobuf.
   */
  encode: function (msg: PartialDeep<GetCommandRequest>): Uint8Array {
    return GetCommandRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes GetCommandRequest from protobuf.
   */
  decode: function (bytes: ByteSource): GetCommandRequest {
    return GetCommandRequest._readMessage(
      GetCommandRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes GetCommandRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<GetCommandRequest>): GetCommandRequest {
    return {
      command: "",
      applicationId: "",
      username: undefined,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetCommandRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.command) {
      writer.writeString(1, msg.command);
    }
    if (msg.applicationId) {
      writer.writeString(2, msg.applicationId);
    }
    if (msg.username != undefined) {
      writer.writeString(3, msg.username);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetCommandRequest,
    reader: protoscript.BinaryReader,
  ): GetCommandRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.command = reader.readString();
          break;
        }
        case 2: {
          msg.applicationId = reader.readString();
          break;
        }
        case 3: {
          msg.username = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const CommandResponse = {
  /**
   * Serializes CommandResponse to protobuf.
   */
  encode: function (msg: PartialDeep<CommandResponse>): Uint8Array {
    return CommandResponse._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes CommandResponse from protobuf.
   */
  decode: function (bytes: ByteSource): CommandResponse {
    return CommandResponse._readMessage(
      CommandResponse.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes CommandResponse with all fields set to their default value.
   */
  initialize: function (msg?: Partial<CommandResponse>): CommandResponse {
    return {
      status: common.ResponseStatus.initialize(),
      command: Command.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CommandResponse>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.status) {
      writer.writeMessage(1, msg.status, common.ResponseStatus._writeMessage);
    }
    if (msg.command) {
      writer.writeMessage(2, msg.command, Command._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: CommandResponse,
    reader: protoscript.BinaryReader,
  ): CommandResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.status, common.ResponseStatus._readMessage);
          break;
        }
        case 2: {
          reader.readMessage(msg.command, Command._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const ListCommandsRequest = {
  /**
   * Serializes ListCommandsRequest to protobuf.
   */
  encode: function (msg: PartialDeep<ListCommandsRequest>): Uint8Array {
    return ListCommandsRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes ListCommandsRequest from protobuf.
   */
  decode: function (bytes: ByteSource): ListCommandsRequest {
    return ListCommandsRequest._readMessage(
      ListCommandsRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes ListCommandsRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<ListCommandsRequest>,
  ): ListCommandsRequest {
    return {
      applicationId: "",
      includeDisabled: false,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListCommandsRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.applicationId) {
      writer.writeString(1, msg.applicationId);
    }
    if (msg.includeDisabled) {
      writer.writeBool(2, msg.includeDisabled);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListCommandsRequest,
    reader: protoscript.BinaryReader,
  ): ListCommandsRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.applicationId = reader.readString();
          break;
        }
        case 2: {
          msg.includeDisabled = reader.readBool();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const ListCommandsResponse = {
  /**
   * Serializes ListCommandsResponse to protobuf.
   */
  encode: function (msg: PartialDeep<ListCommandsResponse>): Uint8Array {
    return ListCommandsResponse._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes ListCommandsResponse from protobuf.
   */
  decode: function (bytes: ByteSource): ListCommandsResponse {
    return ListCommandsResponse._readMessage(
      ListCommandsResponse.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes ListCommandsResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<ListCommandsResponse>,
  ): ListCommandsResponse {
    return {
      status: common.ResponseStatus.initialize(),
      commands: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListCommandsResponse>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.status) {
      writer.writeMessage(1, msg.status, common.ResponseStatus._writeMessage);
    }
    if (msg.commands?.length) {
      writer.writeRepeatedMessage(
        2,
        msg.commands as any,
        Command._writeMessage,
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListCommandsResponse,
    reader: protoscript.BinaryReader,
  ): ListCommandsResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.status, common.ResponseStatus._readMessage);
          break;
        }
        case 2: {
          const m = Command.initialize();
          reader.readMessage(m, Command._readMessage);
          msg.commands.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const CreateCommandRequest = {
  /**
   * Serializes CreateCommandRequest to protobuf.
   */
  encode: function (msg: PartialDeep<CreateCommandRequest>): Uint8Array {
    return CreateCommandRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes CreateCommandRequest from protobuf.
   */
  decode: function (bytes: ByteSource): CreateCommandRequest {
    return CreateCommandRequest._readMessage(
      CreateCommandRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes CreateCommandRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<CreateCommandRequest>,
  ): CreateCommandRequest {
    return {
      applicationId: "",
      command: "",
      enabled: false,
      cooldown: 0,
      type: "",
      typeValue: "",
      priority: 0,
      createdBy: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CreateCommandRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.applicationId) {
      writer.writeString(1, msg.applicationId);
    }
    if (msg.command) {
      writer.writeString(2, msg.command);
    }
    if (msg.enabled) {
      writer.writeBool(3, msg.enabled);
    }
    if (msg.cooldown) {
      writer.writeInt32(4, msg.cooldown);
    }
    if (msg.type) {
      writer.writeString(5, msg.type);
    }
    if (msg.typeValue) {
      writer.writeString(6, msg.typeValue);
    }
    if (msg.priority) {
      writer.writeInt32(7, msg.priority);
    }
    if (msg.createdBy) {
      writer.writeString(8, msg.createdBy);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: CreateCommandRequest,
    reader: protoscript.BinaryReader,
  ): CreateCommandRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.applicationId = reader.readString();
          break;
        }
        case 2: {
          msg.command = reader.readString();
          break;
        }
        case 3: {
          msg.enabled = reader.readBool();
          break;
        }
        case 4: {
          msg.cooldown = reader.readInt32();
          break;
        }
        case 5: {
          msg.type = reader.readString();
          break;
        }
        case 6: {
          msg.typeValue = reader.readString();
          break;
        }
        case 7: {
          msg.priority = reader.readInt32();
          break;
        }
        case 8: {
          msg.createdBy = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const UpdateCommandRequest = {
  /**
   * Serializes UpdateCommandRequest to protobuf.
   */
  encode: function (msg: PartialDeep<UpdateCommandRequest>): Uint8Array {
    return UpdateCommandRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes UpdateCommandRequest from protobuf.
   */
  decode: function (bytes: ByteSource): UpdateCommandRequest {
    return UpdateCommandRequest._readMessage(
      UpdateCommandRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes UpdateCommandRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<UpdateCommandRequest>,
  ): UpdateCommandRequest {
    return {
      id: "",
      command: "",
      enabled: false,
      cooldown: 0,
      type: "",
      typeValue: "",
      priority: 0,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<UpdateCommandRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.id) {
      writer.writeString(1, msg.id);
    }
    if (msg.command) {
      writer.writeString(2, msg.command);
    }
    if (msg.enabled) {
      writer.writeBool(3, msg.enabled);
    }
    if (msg.cooldown) {
      writer.writeInt32(4, msg.cooldown);
    }
    if (msg.type) {
      writer.writeString(5, msg.type);
    }
    if (msg.typeValue) {
      writer.writeString(6, msg.typeValue);
    }
    if (msg.priority) {
      writer.writeInt32(7, msg.priority);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: UpdateCommandRequest,
    reader: protoscript.BinaryReader,
  ): UpdateCommandRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readString();
          break;
        }
        case 2: {
          msg.command = reader.readString();
          break;
        }
        case 3: {
          msg.enabled = reader.readBool();
          break;
        }
        case 4: {
          msg.cooldown = reader.readInt32();
          break;
        }
        case 5: {
          msg.type = reader.readString();
          break;
        }
        case 6: {
          msg.typeValue = reader.readString();
          break;
        }
        case 7: {
          msg.priority = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const DeleteCommandRequest = {
  /**
   * Serializes DeleteCommandRequest to protobuf.
   */
  encode: function (msg: PartialDeep<DeleteCommandRequest>): Uint8Array {
    return DeleteCommandRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes DeleteCommandRequest from protobuf.
   */
  decode: function (bytes: ByteSource): DeleteCommandRequest {
    return DeleteCommandRequest._readMessage(
      DeleteCommandRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes DeleteCommandRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<DeleteCommandRequest>,
  ): DeleteCommandRequest {
    return {
      id: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<DeleteCommandRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.id) {
      writer.writeString(1, msg.id);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: DeleteCommandRequest,
    reader: protoscript.BinaryReader,
  ): DeleteCommandRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const CommandJSON = {
  /**
   * Serializes Command to JSON.
   */
  encode: function (msg: PartialDeep<Command>): string {
    return JSON.stringify(CommandJSON._writeMessage(msg));
  },

  /**
   * Deserializes Command from JSON.
   */
  decode: function (json: string): Command {
    return CommandJSON._readMessage(CommandJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes Command with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Command>): Command {
    return {
      id: "",
      applicationId: "",
      command: "",
      type: "",
      typeValue: "",
      cooldown: 0,
      priority: 0,
      enabled: false,
      createdBy: "",
      createdAt: protoscript.TimestampJSON.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: PartialDeep<Command>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json["id"] = msg.id;
    }
    if (msg.applicationId) {
      json["applicationId"] = msg.applicationId;
    }
    if (msg.command) {
      json["command"] = msg.command;
    }
    if (msg.type) {
      json["type"] = msg.type;
    }
    if (msg.typeValue) {
      json["typeValue"] = msg.typeValue;
    }
    if (msg.cooldown) {
      json["cooldown"] = msg.cooldown;
    }
    if (msg.priority) {
      json["priority"] = msg.priority;
    }
    if (msg.enabled) {
      json["enabled"] = msg.enabled;
    }
    if (msg.createdBy) {
      json["createdBy"] = msg.createdBy;
    }
    if (msg.createdAt && (msg.createdAt.seconds || msg.createdAt.nanos)) {
      json["createdAt"] = protoscript.serializeTimestamp(msg.createdAt);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Command, json: any): Command {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = _id_;
    }
    const _applicationId_ = json["applicationId"] ?? json["application_id"];
    if (_applicationId_) {
      msg.applicationId = _applicationId_;
    }
    const _command_ = json["command"];
    if (_command_) {
      msg.command = _command_;
    }
    const _type_ = json["type"];
    if (_type_) {
      msg.type = _type_;
    }
    const _typeValue_ = json["typeValue"] ?? json["type_value"];
    if (_typeValue_) {
      msg.typeValue = _typeValue_;
    }
    const _cooldown_ = json["cooldown"];
    if (_cooldown_) {
      msg.cooldown = protoscript.parseNumber(_cooldown_);
    }
    const _priority_ = json["priority"];
    if (_priority_) {
      msg.priority = protoscript.parseNumber(_priority_);
    }
    const _enabled_ = json["enabled"];
    if (_enabled_) {
      msg.enabled = _enabled_;
    }
    const _createdBy_ = json["createdBy"] ?? json["created_by"];
    if (_createdBy_) {
      msg.createdBy = _createdBy_;
    }
    const _createdAt_ = json["createdAt"] ?? json["created_at"];
    if (_createdAt_) {
      msg.createdAt = protoscript.parseTimestamp(_createdAt_);
    }
    return msg;
  },
};

export const GetCommandRequestJSON = {
  /**
   * Serializes GetCommandRequest to JSON.
   */
  encode: function (msg: PartialDeep<GetCommandRequest>): string {
    return JSON.stringify(GetCommandRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes GetCommandRequest from JSON.
   */
  decode: function (json: string): GetCommandRequest {
    return GetCommandRequestJSON._readMessage(
      GetCommandRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes GetCommandRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<GetCommandRequest>): GetCommandRequest {
    return {
      command: "",
      applicationId: "",
      username: undefined,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetCommandRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.command) {
      json["command"] = msg.command;
    }
    if (msg.applicationId) {
      json["applicationId"] = msg.applicationId;
    }
    if (msg.username != undefined) {
      json["username"] = msg.username;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetCommandRequest,
    json: any,
  ): GetCommandRequest {
    const _command_ = json["command"];
    if (_command_) {
      msg.command = _command_;
    }
    const _applicationId_ = json["applicationId"] ?? json["application_id"];
    if (_applicationId_) {
      msg.applicationId = _applicationId_;
    }
    const _username_ = json["username"];
    if (_username_) {
      msg.username = _username_;
    }
    return msg;
  },
};

export const CommandResponseJSON = {
  /**
   * Serializes CommandResponse to JSON.
   */
  encode: function (msg: PartialDeep<CommandResponse>): string {
    return JSON.stringify(CommandResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes CommandResponse from JSON.
   */
  decode: function (json: string): CommandResponse {
    return CommandResponseJSON._readMessage(
      CommandResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes CommandResponse with all fields set to their default value.
   */
  initialize: function (msg?: Partial<CommandResponse>): CommandResponse {
    return {
      status: common.ResponseStatusJSON.initialize(),
      command: CommandJSON.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CommandResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.status) {
      const _status_ = common.ResponseStatusJSON._writeMessage(msg.status);
      if (Object.keys(_status_).length > 0) {
        json["status"] = _status_;
      }
    }
    if (msg.command) {
      const _command_ = CommandJSON._writeMessage(msg.command);
      if (Object.keys(_command_).length > 0) {
        json["command"] = _command_;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: CommandResponse, json: any): CommandResponse {
    const _status_ = json["status"];
    if (_status_) {
      common.ResponseStatusJSON._readMessage(msg.status, _status_);
    }
    const _command_ = json["command"];
    if (_command_) {
      CommandJSON._readMessage(msg.command, _command_);
    }
    return msg;
  },
};

export const ListCommandsRequestJSON = {
  /**
   * Serializes ListCommandsRequest to JSON.
   */
  encode: function (msg: PartialDeep<ListCommandsRequest>): string {
    return JSON.stringify(ListCommandsRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes ListCommandsRequest from JSON.
   */
  decode: function (json: string): ListCommandsRequest {
    return ListCommandsRequestJSON._readMessage(
      ListCommandsRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes ListCommandsRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<ListCommandsRequest>,
  ): ListCommandsRequest {
    return {
      applicationId: "",
      includeDisabled: false,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListCommandsRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.applicationId) {
      json["applicationId"] = msg.applicationId;
    }
    if (msg.includeDisabled) {
      json["includeDisabled"] = msg.includeDisabled;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListCommandsRequest,
    json: any,
  ): ListCommandsRequest {
    const _applicationId_ = json["applicationId"] ?? json["application_id"];
    if (_applicationId_) {
      msg.applicationId = _applicationId_;
    }
    const _includeDisabled_ =
      json["includeDisabled"] ?? json["include_disabled"];
    if (_includeDisabled_) {
      msg.includeDisabled = _includeDisabled_;
    }
    return msg;
  },
};

export const ListCommandsResponseJSON = {
  /**
   * Serializes ListCommandsResponse to JSON.
   */
  encode: function (msg: PartialDeep<ListCommandsResponse>): string {
    return JSON.stringify(ListCommandsResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes ListCommandsResponse from JSON.
   */
  decode: function (json: string): ListCommandsResponse {
    return ListCommandsResponseJSON._readMessage(
      ListCommandsResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes ListCommandsResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<ListCommandsResponse>,
  ): ListCommandsResponse {
    return {
      status: common.ResponseStatusJSON.initialize(),
      commands: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListCommandsResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.status) {
      const _status_ = common.ResponseStatusJSON._writeMessage(msg.status);
      if (Object.keys(_status_).length > 0) {
        json["status"] = _status_;
      }
    }
    if (msg.commands?.length) {
      json["commands"] = msg.commands.map(CommandJSON._writeMessage);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListCommandsResponse,
    json: any,
  ): ListCommandsResponse {
    const _status_ = json["status"];
    if (_status_) {
      common.ResponseStatusJSON._readMessage(msg.status, _status_);
    }
    const _commands_ = json["commands"];
    if (_commands_) {
      for (const item of _commands_) {
        const m = CommandJSON.initialize();
        CommandJSON._readMessage(m, item);
        msg.commands.push(m);
      }
    }
    return msg;
  },
};

export const CreateCommandRequestJSON = {
  /**
   * Serializes CreateCommandRequest to JSON.
   */
  encode: function (msg: PartialDeep<CreateCommandRequest>): string {
    return JSON.stringify(CreateCommandRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes CreateCommandRequest from JSON.
   */
  decode: function (json: string): CreateCommandRequest {
    return CreateCommandRequestJSON._readMessage(
      CreateCommandRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes CreateCommandRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<CreateCommandRequest>,
  ): CreateCommandRequest {
    return {
      applicationId: "",
      command: "",
      enabled: false,
      cooldown: 0,
      type: "",
      typeValue: "",
      priority: 0,
      createdBy: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CreateCommandRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.applicationId) {
      json["applicationId"] = msg.applicationId;
    }
    if (msg.command) {
      json["command"] = msg.command;
    }
    if (msg.enabled) {
      json["enabled"] = msg.enabled;
    }
    if (msg.cooldown) {
      json["cooldown"] = msg.cooldown;
    }
    if (msg.type) {
      json["type"] = msg.type;
    }
    if (msg.typeValue) {
      json["typeValue"] = msg.typeValue;
    }
    if (msg.priority) {
      json["priority"] = msg.priority;
    }
    if (msg.createdBy) {
      json["createdBy"] = msg.createdBy;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: CreateCommandRequest,
    json: any,
  ): CreateCommandRequest {
    const _applicationId_ = json["applicationId"] ?? json["application_id"];
    if (_applicationId_) {
      msg.applicationId = _applicationId_;
    }
    const _command_ = json["command"];
    if (_command_) {
      msg.command = _command_;
    }
    const _enabled_ = json["enabled"];
    if (_enabled_) {
      msg.enabled = _enabled_;
    }
    const _cooldown_ = json["cooldown"];
    if (_cooldown_) {
      msg.cooldown = protoscript.parseNumber(_cooldown_);
    }
    const _type_ = json["type"];
    if (_type_) {
      msg.type = _type_;
    }
    const _typeValue_ = json["typeValue"] ?? json["type_value"];
    if (_typeValue_) {
      msg.typeValue = _typeValue_;
    }
    const _priority_ = json["priority"];
    if (_priority_) {
      msg.priority = protoscript.parseNumber(_priority_);
    }
    const _createdBy_ = json["createdBy"] ?? json["created_by"];
    if (_createdBy_) {
      msg.createdBy = _createdBy_;
    }
    return msg;
  },
};

export const UpdateCommandRequestJSON = {
  /**
   * Serializes UpdateCommandRequest to JSON.
   */
  encode: function (msg: PartialDeep<UpdateCommandRequest>): string {
    return JSON.stringify(UpdateCommandRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes UpdateCommandRequest from JSON.
   */
  decode: function (json: string): UpdateCommandRequest {
    return UpdateCommandRequestJSON._readMessage(
      UpdateCommandRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes UpdateCommandRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<UpdateCommandRequest>,
  ): UpdateCommandRequest {
    return {
      id: "",
      command: "",
      enabled: false,
      cooldown: 0,
      type: "",
      typeValue: "",
      priority: 0,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<UpdateCommandRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json["id"] = msg.id;
    }
    if (msg.command) {
      json["command"] = msg.command;
    }
    if (msg.enabled) {
      json["enabled"] = msg.enabled;
    }
    if (msg.cooldown) {
      json["cooldown"] = msg.cooldown;
    }
    if (msg.type) {
      json["type"] = msg.type;
    }
    if (msg.typeValue) {
      json["typeValue"] = msg.typeValue;
    }
    if (msg.priority) {
      json["priority"] = msg.priority;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: UpdateCommandRequest,
    json: any,
  ): UpdateCommandRequest {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = _id_;
    }
    const _command_ = json["command"];
    if (_command_) {
      msg.command = _command_;
    }
    const _enabled_ = json["enabled"];
    if (_enabled_) {
      msg.enabled = _enabled_;
    }
    const _cooldown_ = json["cooldown"];
    if (_cooldown_) {
      msg.cooldown = protoscript.parseNumber(_cooldown_);
    }
    const _type_ = json["type"];
    if (_type_) {
      msg.type = _type_;
    }
    const _typeValue_ = json["typeValue"] ?? json["type_value"];
    if (_typeValue_) {
      msg.typeValue = _typeValue_;
    }
    const _priority_ = json["priority"];
    if (_priority_) {
      msg.priority = protoscript.parseNumber(_priority_);
    }
    return msg;
  },
};

export const DeleteCommandRequestJSON = {
  /**
   * Serializes DeleteCommandRequest to JSON.
   */
  encode: function (msg: PartialDeep<DeleteCommandRequest>): string {
    return JSON.stringify(DeleteCommandRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes DeleteCommandRequest from JSON.
   */
  decode: function (json: string): DeleteCommandRequest {
    return DeleteCommandRequestJSON._readMessage(
      DeleteCommandRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes DeleteCommandRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<DeleteCommandRequest>,
  ): DeleteCommandRequest {
    return {
      id: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<DeleteCommandRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json["id"] = msg.id;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: DeleteCommandRequest,
    json: any,
  ): DeleteCommandRequest {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = _id_;
    }
    return msg;
  },
};
