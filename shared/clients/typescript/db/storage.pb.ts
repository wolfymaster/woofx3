// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: storage.proto
/* eslint-disable */

import type { ByteSource, PartialDeep } from "protoscript";
import * as protoscript from "protoscript";
import { JSONrequest, PBrequest } from "twirpscript";
// This is the minimum version supported by the current runtime.
// If this line fails typechecking, breaking changes have been introduced and this
// file needs to be regenerated by running `npx twirpscript`.
export { MIN_SUPPORTED_VERSION_0_0_56 } from "twirpscript";
import type { ClientConfiguration } from "twirpscript";

//========================================//
//                 Types                  //
//========================================//

/**
 * Storage item with metadata
 */
export interface StorageItem {
  key: string;
  value: string;
  createdAt: bigint;
  expiresAt: bigint;
  namespace: string;
  applicationId: string;
  clearOnStreamEnd: boolean;
}

/**
 * Get a value by key
 */
export interface GetRequest {
  key: string;
  applicationId: string;
}

export interface GetResponse {
  item: StorageItem;
}

/**
 * Set a key-value pair
 */
export interface SetRequest {
  item: StorageItem;
}

export interface SetResponse {}

/**
 * Delete a key
 */
export interface DeleteRequest {
  key: string;
  applicationId: string;
}

export interface DeleteResponse {}

/**
 * Clear all keys in a namespace
 */
export interface ClearNamespaceRequest {
  namespace: string;
  applicationId: string;
}

export interface ClearNamespaceResponse {}

/**
 * Clear all expired keys
 */
export interface ClearExpiredRequest {
  applicationId: string;
}

export interface ClearExpiredResponse {}

/**
 * Clear all keys for an application
 */
export interface ClearAllForApplicationRequest {
  applicationId: string;
}

export interface ClearAllForApplicationResponse {}

//========================================//
//     StorageService Protobuf Client     //
//========================================//

/**
 * Get a value by key
 */
export async function Get(
  getRequest: GetRequest,
  config?: ClientConfiguration,
): Promise<GetResponse> {
  const response = await PBrequest(
    "/storage.StorageService/Get",
    GetRequest.encode(getRequest),
    config,
  );
  return GetResponse.decode(response);
}

/**
 * Set a key-value pair
 */
export async function Set(
  setRequest: SetRequest,
  config?: ClientConfiguration,
): Promise<SetResponse> {
  const response = await PBrequest(
    "/storage.StorageService/Set",
    SetRequest.encode(setRequest),
    config,
  );
  return SetResponse.decode(response);
}

/**
 * Delete a key
 */
export async function Delete(
  deleteRequest: DeleteRequest,
  config?: ClientConfiguration,
): Promise<DeleteResponse> {
  const response = await PBrequest(
    "/storage.StorageService/Delete",
    DeleteRequest.encode(deleteRequest),
    config,
  );
  return DeleteResponse.decode(response);
}

/**
 * Clear all keys in a namespace
 */
export async function ClearNamespace(
  clearNamespaceRequest: ClearNamespaceRequest,
  config?: ClientConfiguration,
): Promise<ClearNamespaceResponse> {
  const response = await PBrequest(
    "/storage.StorageService/ClearNamespace",
    ClearNamespaceRequest.encode(clearNamespaceRequest),
    config,
  );
  return ClearNamespaceResponse.decode(response);
}

/**
 * Clear all expired keys
 */
export async function ClearExpired(
  clearExpiredRequest: ClearExpiredRequest,
  config?: ClientConfiguration,
): Promise<ClearExpiredResponse> {
  const response = await PBrequest(
    "/storage.StorageService/ClearExpired",
    ClearExpiredRequest.encode(clearExpiredRequest),
    config,
  );
  return ClearExpiredResponse.decode(response);
}

/**
 * Clear all keys for an application
 */
export async function ClearAllForApplication(
  clearAllForApplicationRequest: ClearAllForApplicationRequest,
  config?: ClientConfiguration,
): Promise<ClearAllForApplicationResponse> {
  const response = await PBrequest(
    "/storage.StorageService/ClearAllForApplication",
    ClearAllForApplicationRequest.encode(clearAllForApplicationRequest),
    config,
  );
  return ClearAllForApplicationResponse.decode(response);
}

//========================================//
//       StorageService JSON Client       //
//========================================//

/**
 * Get a value by key
 */
export async function GetJSON(
  getRequest: GetRequest,
  config?: ClientConfiguration,
): Promise<GetResponse> {
  const response = await JSONrequest(
    "/storage.StorageService/Get",
    GetRequestJSON.encode(getRequest),
    config,
  );
  return GetResponseJSON.decode(response);
}

/**
 * Set a key-value pair
 */
export async function SetJSON(
  setRequest: SetRequest,
  config?: ClientConfiguration,
): Promise<SetResponse> {
  const response = await JSONrequest(
    "/storage.StorageService/Set",
    SetRequestJSON.encode(setRequest),
    config,
  );
  return SetResponseJSON.decode(response);
}

/**
 * Delete a key
 */
export async function DeleteJSON(
  deleteRequest: DeleteRequest,
  config?: ClientConfiguration,
): Promise<DeleteResponse> {
  const response = await JSONrequest(
    "/storage.StorageService/Delete",
    DeleteRequestJSON.encode(deleteRequest),
    config,
  );
  return DeleteResponseJSON.decode(response);
}

/**
 * Clear all keys in a namespace
 */
export async function ClearNamespaceJSON(
  clearNamespaceRequest: ClearNamespaceRequest,
  config?: ClientConfiguration,
): Promise<ClearNamespaceResponse> {
  const response = await JSONrequest(
    "/storage.StorageService/ClearNamespace",
    ClearNamespaceRequestJSON.encode(clearNamespaceRequest),
    config,
  );
  return ClearNamespaceResponseJSON.decode(response);
}

/**
 * Clear all expired keys
 */
export async function ClearExpiredJSON(
  clearExpiredRequest: ClearExpiredRequest,
  config?: ClientConfiguration,
): Promise<ClearExpiredResponse> {
  const response = await JSONrequest(
    "/storage.StorageService/ClearExpired",
    ClearExpiredRequestJSON.encode(clearExpiredRequest),
    config,
  );
  return ClearExpiredResponseJSON.decode(response);
}

/**
 * Clear all keys for an application
 */
export async function ClearAllForApplicationJSON(
  clearAllForApplicationRequest: ClearAllForApplicationRequest,
  config?: ClientConfiguration,
): Promise<ClearAllForApplicationResponse> {
  const response = await JSONrequest(
    "/storage.StorageService/ClearAllForApplication",
    ClearAllForApplicationRequestJSON.encode(clearAllForApplicationRequest),
    config,
  );
  return ClearAllForApplicationResponseJSON.decode(response);
}

//========================================//
//             StorageService             //
//========================================//

/**
 * Storage service for managing key-value storage with TTL and namespacing
 */
export interface StorageService<Context = unknown> {
  /**
   * Get a value by key
   */
  Get: (
    getRequest: GetRequest,
    context: Context,
  ) => Promise<GetResponse> | GetResponse;
  /**
   * Set a key-value pair
   */
  Set: (
    setRequest: SetRequest,
    context: Context,
  ) => Promise<SetResponse> | SetResponse;
  /**
   * Delete a key
   */
  Delete: (
    deleteRequest: DeleteRequest,
    context: Context,
  ) => Promise<DeleteResponse> | DeleteResponse;
  /**
   * Clear all keys in a namespace
   */
  ClearNamespace: (
    clearNamespaceRequest: ClearNamespaceRequest,
    context: Context,
  ) => Promise<ClearNamespaceResponse> | ClearNamespaceResponse;
  /**
   * Clear all expired keys
   */
  ClearExpired: (
    clearExpiredRequest: ClearExpiredRequest,
    context: Context,
  ) => Promise<ClearExpiredResponse> | ClearExpiredResponse;
  /**
   * Clear all keys for an application
   */
  ClearAllForApplication: (
    clearAllForApplicationRequest: ClearAllForApplicationRequest,
    context: Context,
  ) => Promise<ClearAllForApplicationResponse> | ClearAllForApplicationResponse;
}

export function createStorageService<Context>(
  service: StorageService<Context>,
) {
  return {
    name: "storage.StorageService",
    methods: {
      Get: {
        name: "Get",
        handler: service.Get,
        input: { protobuf: GetRequest, json: GetRequestJSON },
        output: { protobuf: GetResponse, json: GetResponseJSON },
      },
      Set: {
        name: "Set",
        handler: service.Set,
        input: { protobuf: SetRequest, json: SetRequestJSON },
        output: { protobuf: SetResponse, json: SetResponseJSON },
      },
      Delete: {
        name: "Delete",
        handler: service.Delete,
        input: { protobuf: DeleteRequest, json: DeleteRequestJSON },
        output: { protobuf: DeleteResponse, json: DeleteResponseJSON },
      },
      ClearNamespace: {
        name: "ClearNamespace",
        handler: service.ClearNamespace,
        input: {
          protobuf: ClearNamespaceRequest,
          json: ClearNamespaceRequestJSON,
        },
        output: {
          protobuf: ClearNamespaceResponse,
          json: ClearNamespaceResponseJSON,
        },
      },
      ClearExpired: {
        name: "ClearExpired",
        handler: service.ClearExpired,
        input: { protobuf: ClearExpiredRequest, json: ClearExpiredRequestJSON },
        output: {
          protobuf: ClearExpiredResponse,
          json: ClearExpiredResponseJSON,
        },
      },
      ClearAllForApplication: {
        name: "ClearAllForApplication",
        handler: service.ClearAllForApplication,
        input: {
          protobuf: ClearAllForApplicationRequest,
          json: ClearAllForApplicationRequestJSON,
        },
        output: {
          protobuf: ClearAllForApplicationResponse,
          json: ClearAllForApplicationResponseJSON,
        },
      },
    },
  } as const;
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const StorageItem = {
  /**
   * Serializes StorageItem to protobuf.
   */
  encode: function (msg: PartialDeep<StorageItem>): Uint8Array {
    return StorageItem._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes StorageItem from protobuf.
   */
  decode: function (bytes: ByteSource): StorageItem {
    return StorageItem._readMessage(
      StorageItem.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes StorageItem with all fields set to their default value.
   */
  initialize: function (msg?: Partial<StorageItem>): StorageItem {
    return {
      key: "",
      value: "",
      createdAt: 0n,
      expiresAt: 0n,
      namespace: "",
      applicationId: "",
      clearOnStreamEnd: false,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<StorageItem>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.key) {
      writer.writeString(1, msg.key);
    }
    if (msg.value) {
      writer.writeString(2, msg.value);
    }
    if (msg.createdAt) {
      writer.writeInt64String(3, msg.createdAt.toString() as any);
    }
    if (msg.expiresAt) {
      writer.writeInt64String(4, msg.expiresAt.toString() as any);
    }
    if (msg.namespace) {
      writer.writeString(5, msg.namespace);
    }
    if (msg.applicationId) {
      writer.writeString(6, msg.applicationId);
    }
    if (msg.clearOnStreamEnd) {
      writer.writeBool(7, msg.clearOnStreamEnd);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: StorageItem,
    reader: protoscript.BinaryReader,
  ): StorageItem {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.key = reader.readString();
          break;
        }
        case 2: {
          msg.value = reader.readString();
          break;
        }
        case 3: {
          msg.createdAt = BigInt(reader.readInt64String());
          break;
        }
        case 4: {
          msg.expiresAt = BigInt(reader.readInt64String());
          break;
        }
        case 5: {
          msg.namespace = reader.readString();
          break;
        }
        case 6: {
          msg.applicationId = reader.readString();
          break;
        }
        case 7: {
          msg.clearOnStreamEnd = reader.readBool();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const GetRequest = {
  /**
   * Serializes GetRequest to protobuf.
   */
  encode: function (msg: PartialDeep<GetRequest>): Uint8Array {
    return GetRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes GetRequest from protobuf.
   */
  decode: function (bytes: ByteSource): GetRequest {
    return GetRequest._readMessage(
      GetRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes GetRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<GetRequest>): GetRequest {
    return {
      key: "",
      applicationId: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.key) {
      writer.writeString(1, msg.key);
    }
    if (msg.applicationId) {
      writer.writeString(2, msg.applicationId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetRequest,
    reader: protoscript.BinaryReader,
  ): GetRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.key = reader.readString();
          break;
        }
        case 2: {
          msg.applicationId = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const GetResponse = {
  /**
   * Serializes GetResponse to protobuf.
   */
  encode: function (msg: PartialDeep<GetResponse>): Uint8Array {
    return GetResponse._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes GetResponse from protobuf.
   */
  decode: function (bytes: ByteSource): GetResponse {
    return GetResponse._readMessage(
      GetResponse.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes GetResponse with all fields set to their default value.
   */
  initialize: function (msg?: Partial<GetResponse>): GetResponse {
    return {
      item: StorageItem.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetResponse>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.item) {
      writer.writeMessage(1, msg.item, StorageItem._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetResponse,
    reader: protoscript.BinaryReader,
  ): GetResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.item, StorageItem._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const SetRequest = {
  /**
   * Serializes SetRequest to protobuf.
   */
  encode: function (msg: PartialDeep<SetRequest>): Uint8Array {
    return SetRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes SetRequest from protobuf.
   */
  decode: function (bytes: ByteSource): SetRequest {
    return SetRequest._readMessage(
      SetRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes SetRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<SetRequest>): SetRequest {
    return {
      item: StorageItem.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<SetRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.item) {
      writer.writeMessage(1, msg.item, StorageItem._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: SetRequest,
    reader: protoscript.BinaryReader,
  ): SetRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.item, StorageItem._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const SetResponse = {
  /**
   * Serializes SetResponse to protobuf.
   */
  encode: function (_msg?: PartialDeep<SetResponse>): Uint8Array {
    return new Uint8Array();
  },

  /**
   * Deserializes SetResponse from protobuf.
   */
  decode: function (_bytes?: ByteSource): SetResponse {
    return {};
  },

  /**
   * Initializes SetResponse with all fields set to their default value.
   */
  initialize: function (msg?: Partial<SetResponse>): SetResponse {
    return {
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: PartialDeep<SetResponse>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    _msg: SetResponse,
    _reader: protoscript.BinaryReader,
  ): SetResponse {
    return _msg;
  },
};

export const DeleteRequest = {
  /**
   * Serializes DeleteRequest to protobuf.
   */
  encode: function (msg: PartialDeep<DeleteRequest>): Uint8Array {
    return DeleteRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes DeleteRequest from protobuf.
   */
  decode: function (bytes: ByteSource): DeleteRequest {
    return DeleteRequest._readMessage(
      DeleteRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes DeleteRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<DeleteRequest>): DeleteRequest {
    return {
      key: "",
      applicationId: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<DeleteRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.key) {
      writer.writeString(1, msg.key);
    }
    if (msg.applicationId) {
      writer.writeString(2, msg.applicationId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: DeleteRequest,
    reader: protoscript.BinaryReader,
  ): DeleteRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.key = reader.readString();
          break;
        }
        case 2: {
          msg.applicationId = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const DeleteResponse = {
  /**
   * Serializes DeleteResponse to protobuf.
   */
  encode: function (_msg?: PartialDeep<DeleteResponse>): Uint8Array {
    return new Uint8Array();
  },

  /**
   * Deserializes DeleteResponse from protobuf.
   */
  decode: function (_bytes?: ByteSource): DeleteResponse {
    return {};
  },

  /**
   * Initializes DeleteResponse with all fields set to their default value.
   */
  initialize: function (msg?: Partial<DeleteResponse>): DeleteResponse {
    return {
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: PartialDeep<DeleteResponse>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    _msg: DeleteResponse,
    _reader: protoscript.BinaryReader,
  ): DeleteResponse {
    return _msg;
  },
};

export const ClearNamespaceRequest = {
  /**
   * Serializes ClearNamespaceRequest to protobuf.
   */
  encode: function (msg: PartialDeep<ClearNamespaceRequest>): Uint8Array {
    return ClearNamespaceRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes ClearNamespaceRequest from protobuf.
   */
  decode: function (bytes: ByteSource): ClearNamespaceRequest {
    return ClearNamespaceRequest._readMessage(
      ClearNamespaceRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes ClearNamespaceRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<ClearNamespaceRequest>,
  ): ClearNamespaceRequest {
    return {
      namespace: "",
      applicationId: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ClearNamespaceRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.namespace) {
      writer.writeString(1, msg.namespace);
    }
    if (msg.applicationId) {
      writer.writeString(2, msg.applicationId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ClearNamespaceRequest,
    reader: protoscript.BinaryReader,
  ): ClearNamespaceRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.namespace = reader.readString();
          break;
        }
        case 2: {
          msg.applicationId = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const ClearNamespaceResponse = {
  /**
   * Serializes ClearNamespaceResponse to protobuf.
   */
  encode: function (_msg?: PartialDeep<ClearNamespaceResponse>): Uint8Array {
    return new Uint8Array();
  },

  /**
   * Deserializes ClearNamespaceResponse from protobuf.
   */
  decode: function (_bytes?: ByteSource): ClearNamespaceResponse {
    return {};
  },

  /**
   * Initializes ClearNamespaceResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<ClearNamespaceResponse>,
  ): ClearNamespaceResponse {
    return {
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: PartialDeep<ClearNamespaceResponse>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    _msg: ClearNamespaceResponse,
    _reader: protoscript.BinaryReader,
  ): ClearNamespaceResponse {
    return _msg;
  },
};

export const ClearExpiredRequest = {
  /**
   * Serializes ClearExpiredRequest to protobuf.
   */
  encode: function (msg: PartialDeep<ClearExpiredRequest>): Uint8Array {
    return ClearExpiredRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes ClearExpiredRequest from protobuf.
   */
  decode: function (bytes: ByteSource): ClearExpiredRequest {
    return ClearExpiredRequest._readMessage(
      ClearExpiredRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes ClearExpiredRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<ClearExpiredRequest>,
  ): ClearExpiredRequest {
    return {
      applicationId: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ClearExpiredRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.applicationId) {
      writer.writeString(1, msg.applicationId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ClearExpiredRequest,
    reader: protoscript.BinaryReader,
  ): ClearExpiredRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.applicationId = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const ClearExpiredResponse = {
  /**
   * Serializes ClearExpiredResponse to protobuf.
   */
  encode: function (_msg?: PartialDeep<ClearExpiredResponse>): Uint8Array {
    return new Uint8Array();
  },

  /**
   * Deserializes ClearExpiredResponse from protobuf.
   */
  decode: function (_bytes?: ByteSource): ClearExpiredResponse {
    return {};
  },

  /**
   * Initializes ClearExpiredResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<ClearExpiredResponse>,
  ): ClearExpiredResponse {
    return {
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: PartialDeep<ClearExpiredResponse>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    _msg: ClearExpiredResponse,
    _reader: protoscript.BinaryReader,
  ): ClearExpiredResponse {
    return _msg;
  },
};

export const ClearAllForApplicationRequest = {
  /**
   * Serializes ClearAllForApplicationRequest to protobuf.
   */
  encode: function (
    msg: PartialDeep<ClearAllForApplicationRequest>,
  ): Uint8Array {
    return ClearAllForApplicationRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes ClearAllForApplicationRequest from protobuf.
   */
  decode: function (bytes: ByteSource): ClearAllForApplicationRequest {
    return ClearAllForApplicationRequest._readMessage(
      ClearAllForApplicationRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes ClearAllForApplicationRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<ClearAllForApplicationRequest>,
  ): ClearAllForApplicationRequest {
    return {
      applicationId: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ClearAllForApplicationRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.applicationId) {
      writer.writeString(1, msg.applicationId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ClearAllForApplicationRequest,
    reader: protoscript.BinaryReader,
  ): ClearAllForApplicationRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.applicationId = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const ClearAllForApplicationResponse = {
  /**
   * Serializes ClearAllForApplicationResponse to protobuf.
   */
  encode: function (
    _msg?: PartialDeep<ClearAllForApplicationResponse>,
  ): Uint8Array {
    return new Uint8Array();
  },

  /**
   * Deserializes ClearAllForApplicationResponse from protobuf.
   */
  decode: function (_bytes?: ByteSource): ClearAllForApplicationResponse {
    return {};
  },

  /**
   * Initializes ClearAllForApplicationResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<ClearAllForApplicationResponse>,
  ): ClearAllForApplicationResponse {
    return {
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: PartialDeep<ClearAllForApplicationResponse>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    _msg: ClearAllForApplicationResponse,
    _reader: protoscript.BinaryReader,
  ): ClearAllForApplicationResponse {
    return _msg;
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const StorageItemJSON = {
  /**
   * Serializes StorageItem to JSON.
   */
  encode: function (msg: PartialDeep<StorageItem>): string {
    return JSON.stringify(StorageItemJSON._writeMessage(msg));
  },

  /**
   * Deserializes StorageItem from JSON.
   */
  decode: function (json: string): StorageItem {
    return StorageItemJSON._readMessage(
      StorageItemJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes StorageItem with all fields set to their default value.
   */
  initialize: function (msg?: Partial<StorageItem>): StorageItem {
    return {
      key: "",
      value: "",
      createdAt: 0n,
      expiresAt: 0n,
      namespace: "",
      applicationId: "",
      clearOnStreamEnd: false,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<StorageItem>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.key) {
      json["key"] = msg.key;
    }
    if (msg.value) {
      json["value"] = msg.value;
    }
    if (msg.createdAt) {
      json["createdAt"] = String(msg.createdAt);
    }
    if (msg.expiresAt) {
      json["expiresAt"] = String(msg.expiresAt);
    }
    if (msg.namespace) {
      json["namespace"] = msg.namespace;
    }
    if (msg.applicationId) {
      json["applicationId"] = msg.applicationId;
    }
    if (msg.clearOnStreamEnd) {
      json["clearOnStreamEnd"] = msg.clearOnStreamEnd;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: StorageItem, json: any): StorageItem {
    const _key_ = json["key"];
    if (_key_) {
      msg.key = _key_;
    }
    const _value_ = json["value"];
    if (_value_) {
      msg.value = _value_;
    }
    const _createdAt_ = json["createdAt"] ?? json["created_at"];
    if (_createdAt_) {
      msg.createdAt = BigInt(_createdAt_);
    }
    const _expiresAt_ = json["expiresAt"] ?? json["expires_at"];
    if (_expiresAt_) {
      msg.expiresAt = BigInt(_expiresAt_);
    }
    const _namespace_ = json["namespace"];
    if (_namespace_) {
      msg.namespace = _namespace_;
    }
    const _applicationId_ = json["applicationId"] ?? json["application_id"];
    if (_applicationId_) {
      msg.applicationId = _applicationId_;
    }
    const _clearOnStreamEnd_ =
      json["clearOnStreamEnd"] ?? json["clear_on_stream_end"];
    if (_clearOnStreamEnd_) {
      msg.clearOnStreamEnd = _clearOnStreamEnd_;
    }
    return msg;
  },
};

export const GetRequestJSON = {
  /**
   * Serializes GetRequest to JSON.
   */
  encode: function (msg: PartialDeep<GetRequest>): string {
    return JSON.stringify(GetRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes GetRequest from JSON.
   */
  decode: function (json: string): GetRequest {
    return GetRequestJSON._readMessage(
      GetRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes GetRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<GetRequest>): GetRequest {
    return {
      key: "",
      applicationId: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.key) {
      json["key"] = msg.key;
    }
    if (msg.applicationId) {
      json["applicationId"] = msg.applicationId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: GetRequest, json: any): GetRequest {
    const _key_ = json["key"];
    if (_key_) {
      msg.key = _key_;
    }
    const _applicationId_ = json["applicationId"] ?? json["application_id"];
    if (_applicationId_) {
      msg.applicationId = _applicationId_;
    }
    return msg;
  },
};

export const GetResponseJSON = {
  /**
   * Serializes GetResponse to JSON.
   */
  encode: function (msg: PartialDeep<GetResponse>): string {
    return JSON.stringify(GetResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes GetResponse from JSON.
   */
  decode: function (json: string): GetResponse {
    return GetResponseJSON._readMessage(
      GetResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes GetResponse with all fields set to their default value.
   */
  initialize: function (msg?: Partial<GetResponse>): GetResponse {
    return {
      item: StorageItemJSON.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.item) {
      const _item_ = StorageItemJSON._writeMessage(msg.item);
      if (Object.keys(_item_).length > 0) {
        json["item"] = _item_;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: GetResponse, json: any): GetResponse {
    const _item_ = json["item"];
    if (_item_) {
      StorageItemJSON._readMessage(msg.item, _item_);
    }
    return msg;
  },
};

export const SetRequestJSON = {
  /**
   * Serializes SetRequest to JSON.
   */
  encode: function (msg: PartialDeep<SetRequest>): string {
    return JSON.stringify(SetRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes SetRequest from JSON.
   */
  decode: function (json: string): SetRequest {
    return SetRequestJSON._readMessage(
      SetRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes SetRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<SetRequest>): SetRequest {
    return {
      item: StorageItemJSON.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<SetRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.item) {
      const _item_ = StorageItemJSON._writeMessage(msg.item);
      if (Object.keys(_item_).length > 0) {
        json["item"] = _item_;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: SetRequest, json: any): SetRequest {
    const _item_ = json["item"];
    if (_item_) {
      StorageItemJSON._readMessage(msg.item, _item_);
    }
    return msg;
  },
};

export const SetResponseJSON = {
  /**
   * Serializes SetResponse to JSON.
   */
  encode: function (_msg?: PartialDeep<SetResponse>): string {
    return "{}";
  },

  /**
   * Deserializes SetResponse from JSON.
   */
  decode: function (_json?: string): SetResponse {
    return {};
  },

  /**
   * Initializes SetResponse with all fields set to their default value.
   */
  initialize: function (msg?: Partial<SetResponse>): SetResponse {
    return {
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: PartialDeep<SetResponse>,
  ): Record<string, unknown> {
    return {};
  },

  /**
   * @private
   */
  _readMessage: function (msg: SetResponse, _json: any): SetResponse {
    return msg;
  },
};

export const DeleteRequestJSON = {
  /**
   * Serializes DeleteRequest to JSON.
   */
  encode: function (msg: PartialDeep<DeleteRequest>): string {
    return JSON.stringify(DeleteRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes DeleteRequest from JSON.
   */
  decode: function (json: string): DeleteRequest {
    return DeleteRequestJSON._readMessage(
      DeleteRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes DeleteRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<DeleteRequest>): DeleteRequest {
    return {
      key: "",
      applicationId: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<DeleteRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.key) {
      json["key"] = msg.key;
    }
    if (msg.applicationId) {
      json["applicationId"] = msg.applicationId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: DeleteRequest, json: any): DeleteRequest {
    const _key_ = json["key"];
    if (_key_) {
      msg.key = _key_;
    }
    const _applicationId_ = json["applicationId"] ?? json["application_id"];
    if (_applicationId_) {
      msg.applicationId = _applicationId_;
    }
    return msg;
  },
};

export const DeleteResponseJSON = {
  /**
   * Serializes DeleteResponse to JSON.
   */
  encode: function (_msg?: PartialDeep<DeleteResponse>): string {
    return "{}";
  },

  /**
   * Deserializes DeleteResponse from JSON.
   */
  decode: function (_json?: string): DeleteResponse {
    return {};
  },

  /**
   * Initializes DeleteResponse with all fields set to their default value.
   */
  initialize: function (msg?: Partial<DeleteResponse>): DeleteResponse {
    return {
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: PartialDeep<DeleteResponse>,
  ): Record<string, unknown> {
    return {};
  },

  /**
   * @private
   */
  _readMessage: function (msg: DeleteResponse, _json: any): DeleteResponse {
    return msg;
  },
};

export const ClearNamespaceRequestJSON = {
  /**
   * Serializes ClearNamespaceRequest to JSON.
   */
  encode: function (msg: PartialDeep<ClearNamespaceRequest>): string {
    return JSON.stringify(ClearNamespaceRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes ClearNamespaceRequest from JSON.
   */
  decode: function (json: string): ClearNamespaceRequest {
    return ClearNamespaceRequestJSON._readMessage(
      ClearNamespaceRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes ClearNamespaceRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<ClearNamespaceRequest>,
  ): ClearNamespaceRequest {
    return {
      namespace: "",
      applicationId: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ClearNamespaceRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.namespace) {
      json["namespace"] = msg.namespace;
    }
    if (msg.applicationId) {
      json["applicationId"] = msg.applicationId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ClearNamespaceRequest,
    json: any,
  ): ClearNamespaceRequest {
    const _namespace_ = json["namespace"];
    if (_namespace_) {
      msg.namespace = _namespace_;
    }
    const _applicationId_ = json["applicationId"] ?? json["application_id"];
    if (_applicationId_) {
      msg.applicationId = _applicationId_;
    }
    return msg;
  },
};

export const ClearNamespaceResponseJSON = {
  /**
   * Serializes ClearNamespaceResponse to JSON.
   */
  encode: function (_msg?: PartialDeep<ClearNamespaceResponse>): string {
    return "{}";
  },

  /**
   * Deserializes ClearNamespaceResponse from JSON.
   */
  decode: function (_json?: string): ClearNamespaceResponse {
    return {};
  },

  /**
   * Initializes ClearNamespaceResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<ClearNamespaceResponse>,
  ): ClearNamespaceResponse {
    return {
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: PartialDeep<ClearNamespaceResponse>,
  ): Record<string, unknown> {
    return {};
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ClearNamespaceResponse,
    _json: any,
  ): ClearNamespaceResponse {
    return msg;
  },
};

export const ClearExpiredRequestJSON = {
  /**
   * Serializes ClearExpiredRequest to JSON.
   */
  encode: function (msg: PartialDeep<ClearExpiredRequest>): string {
    return JSON.stringify(ClearExpiredRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes ClearExpiredRequest from JSON.
   */
  decode: function (json: string): ClearExpiredRequest {
    return ClearExpiredRequestJSON._readMessage(
      ClearExpiredRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes ClearExpiredRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<ClearExpiredRequest>,
  ): ClearExpiredRequest {
    return {
      applicationId: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ClearExpiredRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.applicationId) {
      json["applicationId"] = msg.applicationId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ClearExpiredRequest,
    json: any,
  ): ClearExpiredRequest {
    const _applicationId_ = json["applicationId"] ?? json["application_id"];
    if (_applicationId_) {
      msg.applicationId = _applicationId_;
    }
    return msg;
  },
};

export const ClearExpiredResponseJSON = {
  /**
   * Serializes ClearExpiredResponse to JSON.
   */
  encode: function (_msg?: PartialDeep<ClearExpiredResponse>): string {
    return "{}";
  },

  /**
   * Deserializes ClearExpiredResponse from JSON.
   */
  decode: function (_json?: string): ClearExpiredResponse {
    return {};
  },

  /**
   * Initializes ClearExpiredResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<ClearExpiredResponse>,
  ): ClearExpiredResponse {
    return {
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: PartialDeep<ClearExpiredResponse>,
  ): Record<string, unknown> {
    return {};
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ClearExpiredResponse,
    _json: any,
  ): ClearExpiredResponse {
    return msg;
  },
};

export const ClearAllForApplicationRequestJSON = {
  /**
   * Serializes ClearAllForApplicationRequest to JSON.
   */
  encode: function (msg: PartialDeep<ClearAllForApplicationRequest>): string {
    return JSON.stringify(ClearAllForApplicationRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes ClearAllForApplicationRequest from JSON.
   */
  decode: function (json: string): ClearAllForApplicationRequest {
    return ClearAllForApplicationRequestJSON._readMessage(
      ClearAllForApplicationRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes ClearAllForApplicationRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<ClearAllForApplicationRequest>,
  ): ClearAllForApplicationRequest {
    return {
      applicationId: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ClearAllForApplicationRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.applicationId) {
      json["applicationId"] = msg.applicationId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ClearAllForApplicationRequest,
    json: any,
  ): ClearAllForApplicationRequest {
    const _applicationId_ = json["applicationId"] ?? json["application_id"];
    if (_applicationId_) {
      msg.applicationId = _applicationId_;
    }
    return msg;
  },
};

export const ClearAllForApplicationResponseJSON = {
  /**
   * Serializes ClearAllForApplicationResponse to JSON.
   */
  encode: function (
    _msg?: PartialDeep<ClearAllForApplicationResponse>,
  ): string {
    return "{}";
  },

  /**
   * Deserializes ClearAllForApplicationResponse from JSON.
   */
  decode: function (_json?: string): ClearAllForApplicationResponse {
    return {};
  },

  /**
   * Initializes ClearAllForApplicationResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<ClearAllForApplicationResponse>,
  ): ClearAllForApplicationResponse {
    return {
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: PartialDeep<ClearAllForApplicationResponse>,
  ): Record<string, unknown> {
    return {};
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ClearAllForApplicationResponse,
    _json: any,
  ): ClearAllForApplicationResponse {
    return msg;
  },
};
