// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: common.proto
/* eslint-disable */

import type { ByteSource, PartialDeep } from "protoscript";
import * as protoscript from "protoscript";

//========================================//
//                 Types                  //
//========================================//

export interface ResponseStatus {
  code: ResponseStatus.Code;
  message: string;
}

export declare namespace ResponseStatus {
  export type Code =
    | "OK"
    | "INVALID_ARGUMENT"
    | "NOT_FOUND"
    | "PERMISSION_DENIED"
    | "INTERNAL";
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const ResponseStatus = {
  /**
   * Serializes ResponseStatus to protobuf.
   */
  encode: function (msg: PartialDeep<ResponseStatus>): Uint8Array {
    return ResponseStatus._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes ResponseStatus from protobuf.
   */
  decode: function (bytes: ByteSource): ResponseStatus {
    return ResponseStatus._readMessage(
      ResponseStatus.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes ResponseStatus with all fields set to their default value.
   */
  initialize: function (msg?: Partial<ResponseStatus>): ResponseStatus {
    return {
      code: ResponseStatus.Code._fromInt(0),
      message: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ResponseStatus>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.code && ResponseStatus.Code._toInt(msg.code)) {
      writer.writeEnum(1, ResponseStatus.Code._toInt(msg.code));
    }
    if (msg.message) {
      writer.writeString(2, msg.message);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ResponseStatus,
    reader: protoscript.BinaryReader,
  ): ResponseStatus {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.code = ResponseStatus.Code._fromInt(reader.readEnum());
          break;
        }
        case 2: {
          msg.message = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },

  Code: {
    OK: "OK",
    INVALID_ARGUMENT: "INVALID_ARGUMENT",
    NOT_FOUND: "NOT_FOUND",
    PERMISSION_DENIED: "PERMISSION_DENIED",
    INTERNAL: "INTERNAL",
    /**
     * @private
     */
    _fromInt: function (i: number): ResponseStatus.Code {
      switch (i) {
        case 0: {
          return "OK";
        }
        case 1: {
          return "INVALID_ARGUMENT";
        }
        case 2: {
          return "NOT_FOUND";
        }
        case 3: {
          return "PERMISSION_DENIED";
        }
        case 4: {
          return "INTERNAL";
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as ResponseStatus.Code;
        }
      }
    },
    /**
     * @private
     */
    _toInt: function (i: ResponseStatus.Code): number {
      switch (i) {
        case "OK": {
          return 0;
        }
        case "INVALID_ARGUMENT": {
          return 1;
        }
        case "NOT_FOUND": {
          return 2;
        }
        case "PERMISSION_DENIED": {
          return 3;
        }
        case "INTERNAL": {
          return 4;
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as number;
        }
      }
    },
  } as const,
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const ResponseStatusJSON = {
  /**
   * Serializes ResponseStatus to JSON.
   */
  encode: function (msg: PartialDeep<ResponseStatus>): string {
    return JSON.stringify(ResponseStatusJSON._writeMessage(msg));
  },

  /**
   * Deserializes ResponseStatus from JSON.
   */
  decode: function (json: string): ResponseStatus {
    return ResponseStatusJSON._readMessage(
      ResponseStatusJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes ResponseStatus with all fields set to their default value.
   */
  initialize: function (msg?: Partial<ResponseStatus>): ResponseStatus {
    return {
      code: ResponseStatus.Code._fromInt(0),
      message: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ResponseStatus>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.code && ResponseStatusJSON.Code._toInt(msg.code)) {
      json["code"] = msg.code;
    }
    if (msg.message) {
      json["message"] = msg.message;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: ResponseStatus, json: any): ResponseStatus {
    const _code_ = json["code"];
    if (_code_) {
      msg.code = ResponseStatus.Code._fromInt(_code_);
    }
    const _message_ = json["message"];
    if (_message_) {
      msg.message = _message_;
    }
    return msg;
  },

  Code: {
    OK: "OK",
    INVALID_ARGUMENT: "INVALID_ARGUMENT",
    NOT_FOUND: "NOT_FOUND",
    PERMISSION_DENIED: "PERMISSION_DENIED",
    INTERNAL: "INTERNAL",
    /**
     * @private
     */
    _fromInt: function (i: number): ResponseStatus.Code {
      switch (i) {
        case 0: {
          return "OK";
        }
        case 1: {
          return "INVALID_ARGUMENT";
        }
        case 2: {
          return "NOT_FOUND";
        }
        case 3: {
          return "PERMISSION_DENIED";
        }
        case 4: {
          return "INTERNAL";
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as ResponseStatus.Code;
        }
      }
    },
    /**
     * @private
     */
    _toInt: function (i: ResponseStatus.Code): number {
      switch (i) {
        case "OK": {
          return 0;
        }
        case "INVALID_ARGUMENT": {
          return 1;
        }
        case "NOT_FOUND": {
          return 2;
        }
        case "PERMISSION_DENIED": {
          return 3;
        }
        case "INTERNAL": {
          return 4;
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as number;
        }
      }
    },
  } as const,
};
