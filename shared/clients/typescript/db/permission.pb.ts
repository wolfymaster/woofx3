// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: permission.proto
/* eslint-disable */

import type { ByteSource, PartialDeep } from "protoscript";
import * as protoscript from "protoscript";
import { JSONrequest, PBrequest } from "twirpscript";
// This is the minimum version supported by the current runtime.
// If this line fails typechecking, breaking changes have been introduced and this
// file needs to be regenerated by running `npx twirpscript`.
export { MIN_SUPPORTED_VERSION_0_0_56 } from "twirpscript";
import type { ClientConfiguration } from "twirpscript";
import * as common from "./common.pb";

//========================================//
//                 Types                  //
//========================================//

export interface HasPermissionRequest {
  username: string;
  resource: string;
  action: string;
}

export interface PermissionRequest {
  applicationId: string;
  subject: string;
  object: string;
  action: string;
  permission: string;
}

export interface UserResourceRoleRequest {
  applicationId: string;
  username: string;
  resource: string;
  role: string;
}

//========================================//
//   PermissionService Protobuf Client    //
//========================================//

export async function HasPermission(
  hasPermissionRequest: HasPermissionRequest,
  config?: ClientConfiguration,
): Promise<common.ResponseStatus> {
  const response = await PBrequest(
    "/permission.PermissionService/HasPermission",
    HasPermissionRequest.encode(hasPermissionRequest),
    config,
  );
  return common.ResponseStatus.decode(response);
}

export async function AddPermission(
  permissionRequest: PermissionRequest,
  config?: ClientConfiguration,
): Promise<common.ResponseStatus> {
  const response = await PBrequest(
    "/permission.PermissionService/AddPermission",
    PermissionRequest.encode(permissionRequest),
    config,
  );
  return common.ResponseStatus.decode(response);
}

export async function AddUserToResource(
  userResourceRoleRequest: UserResourceRoleRequest,
  config?: ClientConfiguration,
): Promise<common.ResponseStatus> {
  const response = await PBrequest(
    "/permission.PermissionService/AddUserToResource",
    UserResourceRoleRequest.encode(userResourceRoleRequest),
    config,
  );
  return common.ResponseStatus.decode(response);
}

export async function AddUserToGroup(
  userResourceRoleRequest: UserResourceRoleRequest,
  config?: ClientConfiguration,
): Promise<common.ResponseStatus> {
  const response = await PBrequest(
    "/permission.PermissionService/AddUserToGroup",
    UserResourceRoleRequest.encode(userResourceRoleRequest),
    config,
  );
  return common.ResponseStatus.decode(response);
}

export async function AddUserToRole(
  userResourceRoleRequest: UserResourceRoleRequest,
  config?: ClientConfiguration,
): Promise<common.ResponseStatus> {
  const response = await PBrequest(
    "/permission.PermissionService/AddUserToRole",
    UserResourceRoleRequest.encode(userResourceRoleRequest),
    config,
  );
  return common.ResponseStatus.decode(response);
}

export async function AddRoleToGroup(
  userResourceRoleRequest: UserResourceRoleRequest,
  config?: ClientConfiguration,
): Promise<common.ResponseStatus> {
  const response = await PBrequest(
    "/permission.PermissionService/AddRoleToGroup",
    UserResourceRoleRequest.encode(userResourceRoleRequest),
    config,
  );
  return common.ResponseStatus.decode(response);
}

export async function AddGroupToResource(
  userResourceRoleRequest: UserResourceRoleRequest,
  config?: ClientConfiguration,
): Promise<common.ResponseStatus> {
  const response = await PBrequest(
    "/permission.PermissionService/AddGroupToResource",
    UserResourceRoleRequest.encode(userResourceRoleRequest),
    config,
  );
  return common.ResponseStatus.decode(response);
}

export async function RemovePermission(
  permissionRequest: PermissionRequest,
  config?: ClientConfiguration,
): Promise<common.ResponseStatus> {
  const response = await PBrequest(
    "/permission.PermissionService/RemovePermission",
    PermissionRequest.encode(permissionRequest),
    config,
  );
  return common.ResponseStatus.decode(response);
}

export async function RemoveUserFromResource(
  userResourceRoleRequest: UserResourceRoleRequest,
  config?: ClientConfiguration,
): Promise<common.ResponseStatus> {
  const response = await PBrequest(
    "/permission.PermissionService/RemoveUserFromResource",
    UserResourceRoleRequest.encode(userResourceRoleRequest),
    config,
  );
  return common.ResponseStatus.decode(response);
}

export async function RemoveUserFromGroup(
  userResourceRoleRequest: UserResourceRoleRequest,
  config?: ClientConfiguration,
): Promise<common.ResponseStatus> {
  const response = await PBrequest(
    "/permission.PermissionService/RemoveUserFromGroup",
    UserResourceRoleRequest.encode(userResourceRoleRequest),
    config,
  );
  return common.ResponseStatus.decode(response);
}

export async function RemoveRoleFromGroup(
  userResourceRoleRequest: UserResourceRoleRequest,
  config?: ClientConfiguration,
): Promise<common.ResponseStatus> {
  const response = await PBrequest(
    "/permission.PermissionService/RemoveRoleFromGroup",
    UserResourceRoleRequest.encode(userResourceRoleRequest),
    config,
  );
  return common.ResponseStatus.decode(response);
}

export async function RemoveGroupFromResource(
  userResourceRoleRequest: UserResourceRoleRequest,
  config?: ClientConfiguration,
): Promise<common.ResponseStatus> {
  const response = await PBrequest(
    "/permission.PermissionService/RemoveGroupFromResource",
    UserResourceRoleRequest.encode(userResourceRoleRequest),
    config,
  );
  return common.ResponseStatus.decode(response);
}

//========================================//
//     PermissionService JSON Client      //
//========================================//

export async function HasPermissionJSON(
  hasPermissionRequest: HasPermissionRequest,
  config?: ClientConfiguration,
): Promise<common.ResponseStatus> {
  const response = await JSONrequest(
    "/permission.PermissionService/HasPermission",
    HasPermissionRequestJSON.encode(hasPermissionRequest),
    config,
  );
  return common.ResponseStatusJSON.decode(response);
}

export async function AddPermissionJSON(
  permissionRequest: PermissionRequest,
  config?: ClientConfiguration,
): Promise<common.ResponseStatus> {
  const response = await JSONrequest(
    "/permission.PermissionService/AddPermission",
    PermissionRequestJSON.encode(permissionRequest),
    config,
  );
  return common.ResponseStatusJSON.decode(response);
}

export async function AddUserToResourceJSON(
  userResourceRoleRequest: UserResourceRoleRequest,
  config?: ClientConfiguration,
): Promise<common.ResponseStatus> {
  const response = await JSONrequest(
    "/permission.PermissionService/AddUserToResource",
    UserResourceRoleRequestJSON.encode(userResourceRoleRequest),
    config,
  );
  return common.ResponseStatusJSON.decode(response);
}

export async function AddUserToGroupJSON(
  userResourceRoleRequest: UserResourceRoleRequest,
  config?: ClientConfiguration,
): Promise<common.ResponseStatus> {
  const response = await JSONrequest(
    "/permission.PermissionService/AddUserToGroup",
    UserResourceRoleRequestJSON.encode(userResourceRoleRequest),
    config,
  );
  return common.ResponseStatusJSON.decode(response);
}

export async function AddUserToRoleJSON(
  userResourceRoleRequest: UserResourceRoleRequest,
  config?: ClientConfiguration,
): Promise<common.ResponseStatus> {
  const response = await JSONrequest(
    "/permission.PermissionService/AddUserToRole",
    UserResourceRoleRequestJSON.encode(userResourceRoleRequest),
    config,
  );
  return common.ResponseStatusJSON.decode(response);
}

export async function AddRoleToGroupJSON(
  userResourceRoleRequest: UserResourceRoleRequest,
  config?: ClientConfiguration,
): Promise<common.ResponseStatus> {
  const response = await JSONrequest(
    "/permission.PermissionService/AddRoleToGroup",
    UserResourceRoleRequestJSON.encode(userResourceRoleRequest),
    config,
  );
  return common.ResponseStatusJSON.decode(response);
}

export async function AddGroupToResourceJSON(
  userResourceRoleRequest: UserResourceRoleRequest,
  config?: ClientConfiguration,
): Promise<common.ResponseStatus> {
  const response = await JSONrequest(
    "/permission.PermissionService/AddGroupToResource",
    UserResourceRoleRequestJSON.encode(userResourceRoleRequest),
    config,
  );
  return common.ResponseStatusJSON.decode(response);
}

export async function RemovePermissionJSON(
  permissionRequest: PermissionRequest,
  config?: ClientConfiguration,
): Promise<common.ResponseStatus> {
  const response = await JSONrequest(
    "/permission.PermissionService/RemovePermission",
    PermissionRequestJSON.encode(permissionRequest),
    config,
  );
  return common.ResponseStatusJSON.decode(response);
}

export async function RemoveUserFromResourceJSON(
  userResourceRoleRequest: UserResourceRoleRequest,
  config?: ClientConfiguration,
): Promise<common.ResponseStatus> {
  const response = await JSONrequest(
    "/permission.PermissionService/RemoveUserFromResource",
    UserResourceRoleRequestJSON.encode(userResourceRoleRequest),
    config,
  );
  return common.ResponseStatusJSON.decode(response);
}

export async function RemoveUserFromGroupJSON(
  userResourceRoleRequest: UserResourceRoleRequest,
  config?: ClientConfiguration,
): Promise<common.ResponseStatus> {
  const response = await JSONrequest(
    "/permission.PermissionService/RemoveUserFromGroup",
    UserResourceRoleRequestJSON.encode(userResourceRoleRequest),
    config,
  );
  return common.ResponseStatusJSON.decode(response);
}

export async function RemoveRoleFromGroupJSON(
  userResourceRoleRequest: UserResourceRoleRequest,
  config?: ClientConfiguration,
): Promise<common.ResponseStatus> {
  const response = await JSONrequest(
    "/permission.PermissionService/RemoveRoleFromGroup",
    UserResourceRoleRequestJSON.encode(userResourceRoleRequest),
    config,
  );
  return common.ResponseStatusJSON.decode(response);
}

export async function RemoveGroupFromResourceJSON(
  userResourceRoleRequest: UserResourceRoleRequest,
  config?: ClientConfiguration,
): Promise<common.ResponseStatus> {
  const response = await JSONrequest(
    "/permission.PermissionService/RemoveGroupFromResource",
    UserResourceRoleRequestJSON.encode(userResourceRoleRequest),
    config,
  );
  return common.ResponseStatusJSON.decode(response);
}

//========================================//
//           PermissionService            //
//========================================//

export interface PermissionService<Context = unknown> {
  HasPermission: (
    hasPermissionRequest: HasPermissionRequest,
    context: Context,
  ) => Promise<common.ResponseStatus> | common.ResponseStatus;
  AddPermission: (
    permissionRequest: PermissionRequest,
    context: Context,
  ) => Promise<common.ResponseStatus> | common.ResponseStatus;
  AddUserToResource: (
    userResourceRoleRequest: UserResourceRoleRequest,
    context: Context,
  ) => Promise<common.ResponseStatus> | common.ResponseStatus;
  AddUserToGroup: (
    userResourceRoleRequest: UserResourceRoleRequest,
    context: Context,
  ) => Promise<common.ResponseStatus> | common.ResponseStatus;
  AddUserToRole: (
    userResourceRoleRequest: UserResourceRoleRequest,
    context: Context,
  ) => Promise<common.ResponseStatus> | common.ResponseStatus;
  AddRoleToGroup: (
    userResourceRoleRequest: UserResourceRoleRequest,
    context: Context,
  ) => Promise<common.ResponseStatus> | common.ResponseStatus;
  AddGroupToResource: (
    userResourceRoleRequest: UserResourceRoleRequest,
    context: Context,
  ) => Promise<common.ResponseStatus> | common.ResponseStatus;
  RemovePermission: (
    permissionRequest: PermissionRequest,
    context: Context,
  ) => Promise<common.ResponseStatus> | common.ResponseStatus;
  RemoveUserFromResource: (
    userResourceRoleRequest: UserResourceRoleRequest,
    context: Context,
  ) => Promise<common.ResponseStatus> | common.ResponseStatus;
  RemoveUserFromGroup: (
    userResourceRoleRequest: UserResourceRoleRequest,
    context: Context,
  ) => Promise<common.ResponseStatus> | common.ResponseStatus;
  RemoveRoleFromGroup: (
    userResourceRoleRequest: UserResourceRoleRequest,
    context: Context,
  ) => Promise<common.ResponseStatus> | common.ResponseStatus;
  RemoveGroupFromResource: (
    userResourceRoleRequest: UserResourceRoleRequest,
    context: Context,
  ) => Promise<common.ResponseStatus> | common.ResponseStatus;
}

export function createPermissionService<Context>(
  service: PermissionService<Context>,
) {
  return {
    name: "permission.PermissionService",
    methods: {
      HasPermission: {
        name: "HasPermission",
        handler: service.HasPermission,
        input: {
          protobuf: HasPermissionRequest,
          json: HasPermissionRequestJSON,
        },
        output: {
          protobuf: common.ResponseStatus,
          json: common.ResponseStatusJSON,
        },
      },
      AddPermission: {
        name: "AddPermission",
        handler: service.AddPermission,
        input: { protobuf: PermissionRequest, json: PermissionRequestJSON },
        output: {
          protobuf: common.ResponseStatus,
          json: common.ResponseStatusJSON,
        },
      },
      AddUserToResource: {
        name: "AddUserToResource",
        handler: service.AddUserToResource,
        input: {
          protobuf: UserResourceRoleRequest,
          json: UserResourceRoleRequestJSON,
        },
        output: {
          protobuf: common.ResponseStatus,
          json: common.ResponseStatusJSON,
        },
      },
      AddUserToGroup: {
        name: "AddUserToGroup",
        handler: service.AddUserToGroup,
        input: {
          protobuf: UserResourceRoleRequest,
          json: UserResourceRoleRequestJSON,
        },
        output: {
          protobuf: common.ResponseStatus,
          json: common.ResponseStatusJSON,
        },
      },
      AddUserToRole: {
        name: "AddUserToRole",
        handler: service.AddUserToRole,
        input: {
          protobuf: UserResourceRoleRequest,
          json: UserResourceRoleRequestJSON,
        },
        output: {
          protobuf: common.ResponseStatus,
          json: common.ResponseStatusJSON,
        },
      },
      AddRoleToGroup: {
        name: "AddRoleToGroup",
        handler: service.AddRoleToGroup,
        input: {
          protobuf: UserResourceRoleRequest,
          json: UserResourceRoleRequestJSON,
        },
        output: {
          protobuf: common.ResponseStatus,
          json: common.ResponseStatusJSON,
        },
      },
      AddGroupToResource: {
        name: "AddGroupToResource",
        handler: service.AddGroupToResource,
        input: {
          protobuf: UserResourceRoleRequest,
          json: UserResourceRoleRequestJSON,
        },
        output: {
          protobuf: common.ResponseStatus,
          json: common.ResponseStatusJSON,
        },
      },
      RemovePermission: {
        name: "RemovePermission",
        handler: service.RemovePermission,
        input: { protobuf: PermissionRequest, json: PermissionRequestJSON },
        output: {
          protobuf: common.ResponseStatus,
          json: common.ResponseStatusJSON,
        },
      },
      RemoveUserFromResource: {
        name: "RemoveUserFromResource",
        handler: service.RemoveUserFromResource,
        input: {
          protobuf: UserResourceRoleRequest,
          json: UserResourceRoleRequestJSON,
        },
        output: {
          protobuf: common.ResponseStatus,
          json: common.ResponseStatusJSON,
        },
      },
      RemoveUserFromGroup: {
        name: "RemoveUserFromGroup",
        handler: service.RemoveUserFromGroup,
        input: {
          protobuf: UserResourceRoleRequest,
          json: UserResourceRoleRequestJSON,
        },
        output: {
          protobuf: common.ResponseStatus,
          json: common.ResponseStatusJSON,
        },
      },
      RemoveRoleFromGroup: {
        name: "RemoveRoleFromGroup",
        handler: service.RemoveRoleFromGroup,
        input: {
          protobuf: UserResourceRoleRequest,
          json: UserResourceRoleRequestJSON,
        },
        output: {
          protobuf: common.ResponseStatus,
          json: common.ResponseStatusJSON,
        },
      },
      RemoveGroupFromResource: {
        name: "RemoveGroupFromResource",
        handler: service.RemoveGroupFromResource,
        input: {
          protobuf: UserResourceRoleRequest,
          json: UserResourceRoleRequestJSON,
        },
        output: {
          protobuf: common.ResponseStatus,
          json: common.ResponseStatusJSON,
        },
      },
    },
  } as const;
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const HasPermissionRequest = {
  /**
   * Serializes HasPermissionRequest to protobuf.
   */
  encode: function (msg: PartialDeep<HasPermissionRequest>): Uint8Array {
    return HasPermissionRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes HasPermissionRequest from protobuf.
   */
  decode: function (bytes: ByteSource): HasPermissionRequest {
    return HasPermissionRequest._readMessage(
      HasPermissionRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes HasPermissionRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<HasPermissionRequest>,
  ): HasPermissionRequest {
    return {
      username: "",
      resource: "",
      action: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<HasPermissionRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.username) {
      writer.writeString(1, msg.username);
    }
    if (msg.resource) {
      writer.writeString(2, msg.resource);
    }
    if (msg.action) {
      writer.writeString(3, msg.action);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: HasPermissionRequest,
    reader: protoscript.BinaryReader,
  ): HasPermissionRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.username = reader.readString();
          break;
        }
        case 2: {
          msg.resource = reader.readString();
          break;
        }
        case 3: {
          msg.action = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const PermissionRequest = {
  /**
   * Serializes PermissionRequest to protobuf.
   */
  encode: function (msg: PartialDeep<PermissionRequest>): Uint8Array {
    return PermissionRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes PermissionRequest from protobuf.
   */
  decode: function (bytes: ByteSource): PermissionRequest {
    return PermissionRequest._readMessage(
      PermissionRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes PermissionRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<PermissionRequest>): PermissionRequest {
    return {
      applicationId: "",
      subject: "",
      object: "",
      action: "",
      permission: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<PermissionRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.applicationId) {
      writer.writeString(1, msg.applicationId);
    }
    if (msg.subject) {
      writer.writeString(2, msg.subject);
    }
    if (msg.object) {
      writer.writeString(3, msg.object);
    }
    if (msg.action) {
      writer.writeString(4, msg.action);
    }
    if (msg.permission) {
      writer.writeString(5, msg.permission);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: PermissionRequest,
    reader: protoscript.BinaryReader,
  ): PermissionRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.applicationId = reader.readString();
          break;
        }
        case 2: {
          msg.subject = reader.readString();
          break;
        }
        case 3: {
          msg.object = reader.readString();
          break;
        }
        case 4: {
          msg.action = reader.readString();
          break;
        }
        case 5: {
          msg.permission = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const UserResourceRoleRequest = {
  /**
   * Serializes UserResourceRoleRequest to protobuf.
   */
  encode: function (msg: PartialDeep<UserResourceRoleRequest>): Uint8Array {
    return UserResourceRoleRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes UserResourceRoleRequest from protobuf.
   */
  decode: function (bytes: ByteSource): UserResourceRoleRequest {
    return UserResourceRoleRequest._readMessage(
      UserResourceRoleRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes UserResourceRoleRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<UserResourceRoleRequest>,
  ): UserResourceRoleRequest {
    return {
      applicationId: "",
      username: "",
      resource: "",
      role: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<UserResourceRoleRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.applicationId) {
      writer.writeString(1, msg.applicationId);
    }
    if (msg.username) {
      writer.writeString(2, msg.username);
    }
    if (msg.resource) {
      writer.writeString(3, msg.resource);
    }
    if (msg.role) {
      writer.writeString(4, msg.role);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: UserResourceRoleRequest,
    reader: protoscript.BinaryReader,
  ): UserResourceRoleRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.applicationId = reader.readString();
          break;
        }
        case 2: {
          msg.username = reader.readString();
          break;
        }
        case 3: {
          msg.resource = reader.readString();
          break;
        }
        case 4: {
          msg.role = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const HasPermissionRequestJSON = {
  /**
   * Serializes HasPermissionRequest to JSON.
   */
  encode: function (msg: PartialDeep<HasPermissionRequest>): string {
    return JSON.stringify(HasPermissionRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes HasPermissionRequest from JSON.
   */
  decode: function (json: string): HasPermissionRequest {
    return HasPermissionRequestJSON._readMessage(
      HasPermissionRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes HasPermissionRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<HasPermissionRequest>,
  ): HasPermissionRequest {
    return {
      username: "",
      resource: "",
      action: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<HasPermissionRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.username) {
      json["username"] = msg.username;
    }
    if (msg.resource) {
      json["resource"] = msg.resource;
    }
    if (msg.action) {
      json["action"] = msg.action;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: HasPermissionRequest,
    json: any,
  ): HasPermissionRequest {
    const _username_ = json["username"];
    if (_username_) {
      msg.username = _username_;
    }
    const _resource_ = json["resource"];
    if (_resource_) {
      msg.resource = _resource_;
    }
    const _action_ = json["action"];
    if (_action_) {
      msg.action = _action_;
    }
    return msg;
  },
};

export const PermissionRequestJSON = {
  /**
   * Serializes PermissionRequest to JSON.
   */
  encode: function (msg: PartialDeep<PermissionRequest>): string {
    return JSON.stringify(PermissionRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes PermissionRequest from JSON.
   */
  decode: function (json: string): PermissionRequest {
    return PermissionRequestJSON._readMessage(
      PermissionRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes PermissionRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<PermissionRequest>): PermissionRequest {
    return {
      applicationId: "",
      subject: "",
      object: "",
      action: "",
      permission: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<PermissionRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.applicationId) {
      json["applicationId"] = msg.applicationId;
    }
    if (msg.subject) {
      json["subject"] = msg.subject;
    }
    if (msg.object) {
      json["object"] = msg.object;
    }
    if (msg.action) {
      json["action"] = msg.action;
    }
    if (msg.permission) {
      json["permission"] = msg.permission;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: PermissionRequest,
    json: any,
  ): PermissionRequest {
    const _applicationId_ = json["applicationId"] ?? json["application_id"];
    if (_applicationId_) {
      msg.applicationId = _applicationId_;
    }
    const _subject_ = json["subject"];
    if (_subject_) {
      msg.subject = _subject_;
    }
    const _object_ = json["object"];
    if (_object_) {
      msg.object = _object_;
    }
    const _action_ = json["action"];
    if (_action_) {
      msg.action = _action_;
    }
    const _permission_ = json["permission"];
    if (_permission_) {
      msg.permission = _permission_;
    }
    return msg;
  },
};

export const UserResourceRoleRequestJSON = {
  /**
   * Serializes UserResourceRoleRequest to JSON.
   */
  encode: function (msg: PartialDeep<UserResourceRoleRequest>): string {
    return JSON.stringify(UserResourceRoleRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes UserResourceRoleRequest from JSON.
   */
  decode: function (json: string): UserResourceRoleRequest {
    return UserResourceRoleRequestJSON._readMessage(
      UserResourceRoleRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes UserResourceRoleRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<UserResourceRoleRequest>,
  ): UserResourceRoleRequest {
    return {
      applicationId: "",
      username: "",
      resource: "",
      role: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<UserResourceRoleRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.applicationId) {
      json["applicationId"] = msg.applicationId;
    }
    if (msg.username) {
      json["username"] = msg.username;
    }
    if (msg.resource) {
      json["resource"] = msg.resource;
    }
    if (msg.role) {
      json["role"] = msg.role;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: UserResourceRoleRequest,
    json: any,
  ): UserResourceRoleRequest {
    const _applicationId_ = json["applicationId"] ?? json["application_id"];
    if (_applicationId_) {
      msg.applicationId = _applicationId_;
    }
    const _username_ = json["username"];
    if (_username_) {
      msg.username = _username_;
    }
    const _resource_ = json["resource"];
    if (_resource_) {
      msg.resource = _resource_;
    }
    const _role_ = json["role"];
    if (_role_) {
      msg.role = _role_;
    }
    return msg;
  },
};
